// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Pids.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Pids_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Pids_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Pids_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Pids_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Pids_2eproto;
namespace ola {
namespace rdm {
namespace pid {
class Field;
class FieldDefaultTypeInternal;
extern FieldDefaultTypeInternal _Field_default_instance_;
class FrameFormat;
class FrameFormatDefaultTypeInternal;
extern FrameFormatDefaultTypeInternal _FrameFormat_default_instance_;
class LabeledValue;
class LabeledValueDefaultTypeInternal;
extern LabeledValueDefaultTypeInternal _LabeledValue_default_instance_;
class Manufacturer;
class ManufacturerDefaultTypeInternal;
extern ManufacturerDefaultTypeInternal _Manufacturer_default_instance_;
class Pid;
class PidDefaultTypeInternal;
extern PidDefaultTypeInternal _Pid_default_instance_;
class PidStore;
class PidStoreDefaultTypeInternal;
extern PidStoreDefaultTypeInternal _PidStore_default_instance_;
class Range;
class RangeDefaultTypeInternal;
extern RangeDefaultTypeInternal _Range_default_instance_;
}  // namespace pid
}  // namespace rdm
}  // namespace ola
PROTOBUF_NAMESPACE_OPEN
template<> ::ola::rdm::pid::Field* Arena::CreateMaybeMessage<::ola::rdm::pid::Field>(Arena*);
template<> ::ola::rdm::pid::FrameFormat* Arena::CreateMaybeMessage<::ola::rdm::pid::FrameFormat>(Arena*);
template<> ::ola::rdm::pid::LabeledValue* Arena::CreateMaybeMessage<::ola::rdm::pid::LabeledValue>(Arena*);
template<> ::ola::rdm::pid::Manufacturer* Arena::CreateMaybeMessage<::ola::rdm::pid::Manufacturer>(Arena*);
template<> ::ola::rdm::pid::Pid* Arena::CreateMaybeMessage<::ola::rdm::pid::Pid>(Arena*);
template<> ::ola::rdm::pid::PidStore* Arena::CreateMaybeMessage<::ola::rdm::pid::PidStore>(Arena*);
template<> ::ola::rdm::pid::Range* Arena::CreateMaybeMessage<::ola::rdm::pid::Range>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ola {
namespace rdm {
namespace pid {

enum SubDeviceRange : int {
  ROOT_DEVICE = 1,
  ROOT_OR_ALL_SUBDEVICE = 2,
  ROOT_OR_SUBDEVICE = 3,
  ONLY_SUBDEVICES = 4
};
bool SubDeviceRange_IsValid(int value);
constexpr SubDeviceRange SubDeviceRange_MIN = ROOT_DEVICE;
constexpr SubDeviceRange SubDeviceRange_MAX = ONLY_SUBDEVICES;
constexpr int SubDeviceRange_ARRAYSIZE = SubDeviceRange_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SubDeviceRange_descriptor();
template<typename T>
inline const std::string& SubDeviceRange_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SubDeviceRange>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SubDeviceRange_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SubDeviceRange_descriptor(), enum_t_value);
}
inline bool SubDeviceRange_Parse(
    const std::string& name, SubDeviceRange* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SubDeviceRange>(
    SubDeviceRange_descriptor(), name, value);
}
enum FieldType : int {
  BOOL = 1,
  UINT8 = 2,
  UINT16 = 3,
  UINT32 = 4,
  STRING = 5,
  GROUP = 6,
  INT8 = 7,
  INT16 = 8,
  INT32 = 9,
  IPV4 = 10,
  UID = 11,
  MAC = 12
};
bool FieldType_IsValid(int value);
constexpr FieldType FieldType_MIN = BOOL;
constexpr FieldType FieldType_MAX = MAC;
constexpr int FieldType_ARRAYSIZE = FieldType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FieldType_descriptor();
template<typename T>
inline const std::string& FieldType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, FieldType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function FieldType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    FieldType_descriptor(), enum_t_value);
}
inline bool FieldType_Parse(
    const std::string& name, FieldType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<FieldType>(
    FieldType_descriptor(), name, value);
}
// ===================================================================

class LabeledValue PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ola.rdm.pid.LabeledValue) */ {
 public:
  inline LabeledValue() : LabeledValue(nullptr) {};
  virtual ~LabeledValue();

  LabeledValue(const LabeledValue& from);
  LabeledValue(LabeledValue&& from) noexcept
    : LabeledValue() {
    *this = ::std::move(from);
  }

  inline LabeledValue& operator=(const LabeledValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline LabeledValue& operator=(LabeledValue&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LabeledValue& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LabeledValue* internal_default_instance() {
    return reinterpret_cast<const LabeledValue*>(
               &_LabeledValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LabeledValue& a, LabeledValue& b) {
    a.Swap(&b);
  }
  inline void Swap(LabeledValue* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LabeledValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LabeledValue* New() const final {
    return CreateMaybeMessage<LabeledValue>(nullptr);
  }

  LabeledValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LabeledValue>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LabeledValue& from);
  void MergeFrom(const LabeledValue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LabeledValue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ola.rdm.pid.LabeledValue";
  }
  protected:
  explicit LabeledValue(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Pids_2eproto);
    return ::descriptor_table_Pids_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLabelFieldNumber = 2,
    kValueFieldNumber = 1,
  };
  // required string label = 2;
  bool has_label() const;
  private:
  bool _internal_has_label() const;
  public:
  void clear_label();
  const std::string& label() const;
  void set_label(const std::string& value);
  void set_label(std::string&& value);
  void set_label(const char* value);
  void set_label(const char* value, size_t size);
  std::string* mutable_label();
  std::string* release_label();
  void set_allocated_label(std::string* label);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_label();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_label(
      std::string* label);
  private:
  const std::string& _internal_label() const;
  void _internal_set_label(const std::string& value);
  std::string* _internal_mutable_label();
  public:

  // required int64 value = 1;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::int64 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_value() const;
  void _internal_set_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:ola.rdm.pid.LabeledValue)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr label_;
  ::PROTOBUF_NAMESPACE_ID::int64 value_;
  friend struct ::TableStruct_Pids_2eproto;
};
// -------------------------------------------------------------------

class Range PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ola.rdm.pid.Range) */ {
 public:
  inline Range() : Range(nullptr) {};
  virtual ~Range();

  Range(const Range& from);
  Range(Range&& from) noexcept
    : Range() {
    *this = ::std::move(from);
  }

  inline Range& operator=(const Range& from) {
    CopyFrom(from);
    return *this;
  }
  inline Range& operator=(Range&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Range& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Range* internal_default_instance() {
    return reinterpret_cast<const Range*>(
               &_Range_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Range& a, Range& b) {
    a.Swap(&b);
  }
  inline void Swap(Range* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Range* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Range* New() const final {
    return CreateMaybeMessage<Range>(nullptr);
  }

  Range* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Range>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Range& from);
  void MergeFrom(const Range& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Range* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ola.rdm.pid.Range";
  }
  protected:
  explicit Range(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Pids_2eproto);
    return ::descriptor_table_Pids_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMinFieldNumber = 1,
    kMaxFieldNumber = 2,
  };
  // required int64 min = 1;
  bool has_min() const;
  private:
  bool _internal_has_min() const;
  public:
  void clear_min();
  ::PROTOBUF_NAMESPACE_ID::int64 min() const;
  void set_min(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_min() const;
  void _internal_set_min(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // required int64 max = 2;
  bool has_max() const;
  private:
  bool _internal_has_max() const;
  public:
  void clear_max();
  ::PROTOBUF_NAMESPACE_ID::int64 max() const;
  void set_max(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_max() const;
  void _internal_set_max(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:ola.rdm.pid.Range)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 min_;
  ::PROTOBUF_NAMESPACE_ID::int64 max_;
  friend struct ::TableStruct_Pids_2eproto;
};
// -------------------------------------------------------------------

class Field PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ola.rdm.pid.Field) */ {
 public:
  inline Field() : Field(nullptr) {};
  virtual ~Field();

  Field(const Field& from);
  Field(Field&& from) noexcept
    : Field() {
    *this = ::std::move(from);
  }

  inline Field& operator=(const Field& from) {
    CopyFrom(from);
    return *this;
  }
  inline Field& operator=(Field&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Field& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Field* internal_default_instance() {
    return reinterpret_cast<const Field*>(
               &_Field_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Field& a, Field& b) {
    a.Swap(&b);
  }
  inline void Swap(Field* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Field* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Field* New() const final {
    return CreateMaybeMessage<Field>(nullptr);
  }

  Field* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Field>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Field& from);
  void MergeFrom(const Field& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Field* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ola.rdm.pid.Field";
  }
  protected:
  explicit Field(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Pids_2eproto);
    return ::descriptor_table_Pids_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLabelFieldNumber = 6,
    kRangeFieldNumber = 7,
    kFieldFieldNumber = 8,
    kNameFieldNumber = 2,
    kMinSizeFieldNumber = 3,
    kMaxSizeFieldNumber = 4,
    kMultiplierFieldNumber = 5,
    kTypeFieldNumber = 1,
  };
  // repeated .ola.rdm.pid.LabeledValue label = 6;
  int label_size() const;
  private:
  int _internal_label_size() const;
  public:
  void clear_label();
  ::ola::rdm::pid::LabeledValue* mutable_label(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ola::rdm::pid::LabeledValue >*
      mutable_label();
  private:
  const ::ola::rdm::pid::LabeledValue& _internal_label(int index) const;
  ::ola::rdm::pid::LabeledValue* _internal_add_label();
  public:
  const ::ola::rdm::pid::LabeledValue& label(int index) const;
  ::ola::rdm::pid::LabeledValue* add_label();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ola::rdm::pid::LabeledValue >&
      label() const;

  // repeated .ola.rdm.pid.Range range = 7;
  int range_size() const;
  private:
  int _internal_range_size() const;
  public:
  void clear_range();
  ::ola::rdm::pid::Range* mutable_range(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ola::rdm::pid::Range >*
      mutable_range();
  private:
  const ::ola::rdm::pid::Range& _internal_range(int index) const;
  ::ola::rdm::pid::Range* _internal_add_range();
  public:
  const ::ola::rdm::pid::Range& range(int index) const;
  ::ola::rdm::pid::Range* add_range();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ola::rdm::pid::Range >&
      range() const;

  // repeated .ola.rdm.pid.Field field = 8;
  int field_size() const;
  private:
  int _internal_field_size() const;
  public:
  void clear_field();
  ::ola::rdm::pid::Field* mutable_field(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ola::rdm::pid::Field >*
      mutable_field();
  private:
  const ::ola::rdm::pid::Field& _internal_field(int index) const;
  ::ola::rdm::pid::Field* _internal_add_field();
  public:
  const ::ola::rdm::pid::Field& field(int index) const;
  ::ola::rdm::pid::Field* add_field();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ola::rdm::pid::Field >&
      field() const;

  // required string name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional uint32 min_size = 3;
  bool has_min_size() const;
  private:
  bool _internal_has_min_size() const;
  public:
  void clear_min_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 min_size() const;
  void set_min_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_min_size() const;
  void _internal_set_min_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 max_size = 4;
  bool has_max_size() const;
  private:
  bool _internal_has_max_size() const;
  public:
  void clear_max_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_size() const;
  void set_max_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_size() const;
  void _internal_set_max_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional sint32 multiplier = 5;
  bool has_multiplier() const;
  private:
  bool _internal_has_multiplier() const;
  public:
  void clear_multiplier();
  ::PROTOBUF_NAMESPACE_ID::int32 multiplier() const;
  void set_multiplier(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_multiplier() const;
  void _internal_set_multiplier(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required .ola.rdm.pid.FieldType type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::ola::rdm::pid::FieldType type() const;
  void set_type(::ola::rdm::pid::FieldType value);
  private:
  ::ola::rdm::pid::FieldType _internal_type() const;
  void _internal_set_type(::ola::rdm::pid::FieldType value);
  public:

  // @@protoc_insertion_point(class_scope:ola.rdm.pid.Field)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ola::rdm::pid::LabeledValue > label_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ola::rdm::pid::Range > range_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ola::rdm::pid::Field > field_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 min_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 multiplier_;
  int type_;
  friend struct ::TableStruct_Pids_2eproto;
};
// -------------------------------------------------------------------

class FrameFormat PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ola.rdm.pid.FrameFormat) */ {
 public:
  inline FrameFormat() : FrameFormat(nullptr) {};
  virtual ~FrameFormat();

  FrameFormat(const FrameFormat& from);
  FrameFormat(FrameFormat&& from) noexcept
    : FrameFormat() {
    *this = ::std::move(from);
  }

  inline FrameFormat& operator=(const FrameFormat& from) {
    CopyFrom(from);
    return *this;
  }
  inline FrameFormat& operator=(FrameFormat&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FrameFormat& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FrameFormat* internal_default_instance() {
    return reinterpret_cast<const FrameFormat*>(
               &_FrameFormat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(FrameFormat& a, FrameFormat& b) {
    a.Swap(&b);
  }
  inline void Swap(FrameFormat* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FrameFormat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FrameFormat* New() const final {
    return CreateMaybeMessage<FrameFormat>(nullptr);
  }

  FrameFormat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FrameFormat>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FrameFormat& from);
  void MergeFrom(const FrameFormat& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FrameFormat* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ola.rdm.pid.FrameFormat";
  }
  protected:
  explicit FrameFormat(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Pids_2eproto);
    return ::descriptor_table_Pids_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFieldFieldNumber = 1,
  };
  // repeated .ola.rdm.pid.Field field = 1;
  int field_size() const;
  private:
  int _internal_field_size() const;
  public:
  void clear_field();
  ::ola::rdm::pid::Field* mutable_field(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ola::rdm::pid::Field >*
      mutable_field();
  private:
  const ::ola::rdm::pid::Field& _internal_field(int index) const;
  ::ola::rdm::pid::Field* _internal_add_field();
  public:
  const ::ola::rdm::pid::Field& field(int index) const;
  ::ola::rdm::pid::Field* add_field();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ola::rdm::pid::Field >&
      field() const;

  // @@protoc_insertion_point(class_scope:ola.rdm.pid.FrameFormat)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ola::rdm::pid::Field > field_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Pids_2eproto;
};
// -------------------------------------------------------------------

class Pid PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ola.rdm.pid.Pid) */ {
 public:
  inline Pid() : Pid(nullptr) {};
  virtual ~Pid();

  Pid(const Pid& from);
  Pid(Pid&& from) noexcept
    : Pid() {
    *this = ::std::move(from);
  }

  inline Pid& operator=(const Pid& from) {
    CopyFrom(from);
    return *this;
  }
  inline Pid& operator=(Pid&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Pid& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Pid* internal_default_instance() {
    return reinterpret_cast<const Pid*>(
               &_Pid_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Pid& a, Pid& b) {
    a.Swap(&b);
  }
  inline void Swap(Pid* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Pid* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Pid* New() const final {
    return CreateMaybeMessage<Pid>(nullptr);
  }

  Pid* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Pid>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Pid& from);
  void MergeFrom(const Pid& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Pid* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ola.rdm.pid.Pid";
  }
  protected:
  explicit Pid(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Pids_2eproto);
    return ::descriptor_table_Pids_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kGetRequestFieldNumber = 3,
    kGetResponseFieldNumber = 4,
    kSetRequestFieldNumber = 5,
    kSetResponseFieldNumber = 6,
    kDiscoveryRequestFieldNumber = 9,
    kDiscoveryResponseFieldNumber = 10,
    kValueFieldNumber = 2,
    kDiscoverySubDeviceRangeFieldNumber = 11,
    kGetSubDeviceRangeFieldNumber = 7,
    kSetSubDeviceRangeFieldNumber = 8,
  };
  // required string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional .ola.rdm.pid.FrameFormat get_request = 3;
  bool has_get_request() const;
  private:
  bool _internal_has_get_request() const;
  public:
  void clear_get_request();
  const ::ola::rdm::pid::FrameFormat& get_request() const;
  ::ola::rdm::pid::FrameFormat* release_get_request();
  ::ola::rdm::pid::FrameFormat* mutable_get_request();
  void set_allocated_get_request(::ola::rdm::pid::FrameFormat* get_request);
  private:
  const ::ola::rdm::pid::FrameFormat& _internal_get_request() const;
  ::ola::rdm::pid::FrameFormat* _internal_mutable_get_request();
  public:
  void unsafe_arena_set_allocated_get_request(
      ::ola::rdm::pid::FrameFormat* get_request);
  ::ola::rdm::pid::FrameFormat* unsafe_arena_release_get_request();

  // optional .ola.rdm.pid.FrameFormat get_response = 4;
  bool has_get_response() const;
  private:
  bool _internal_has_get_response() const;
  public:
  void clear_get_response();
  const ::ola::rdm::pid::FrameFormat& get_response() const;
  ::ola::rdm::pid::FrameFormat* release_get_response();
  ::ola::rdm::pid::FrameFormat* mutable_get_response();
  void set_allocated_get_response(::ola::rdm::pid::FrameFormat* get_response);
  private:
  const ::ola::rdm::pid::FrameFormat& _internal_get_response() const;
  ::ola::rdm::pid::FrameFormat* _internal_mutable_get_response();
  public:
  void unsafe_arena_set_allocated_get_response(
      ::ola::rdm::pid::FrameFormat* get_response);
  ::ola::rdm::pid::FrameFormat* unsafe_arena_release_get_response();

  // optional .ola.rdm.pid.FrameFormat set_request = 5;
  bool has_set_request() const;
  private:
  bool _internal_has_set_request() const;
  public:
  void clear_set_request();
  const ::ola::rdm::pid::FrameFormat& set_request() const;
  ::ola::rdm::pid::FrameFormat* release_set_request();
  ::ola::rdm::pid::FrameFormat* mutable_set_request();
  void set_allocated_set_request(::ola::rdm::pid::FrameFormat* set_request);
  private:
  const ::ola::rdm::pid::FrameFormat& _internal_set_request() const;
  ::ola::rdm::pid::FrameFormat* _internal_mutable_set_request();
  public:
  void unsafe_arena_set_allocated_set_request(
      ::ola::rdm::pid::FrameFormat* set_request);
  ::ola::rdm::pid::FrameFormat* unsafe_arena_release_set_request();

  // optional .ola.rdm.pid.FrameFormat set_response = 6;
  bool has_set_response() const;
  private:
  bool _internal_has_set_response() const;
  public:
  void clear_set_response();
  const ::ola::rdm::pid::FrameFormat& set_response() const;
  ::ola::rdm::pid::FrameFormat* release_set_response();
  ::ola::rdm::pid::FrameFormat* mutable_set_response();
  void set_allocated_set_response(::ola::rdm::pid::FrameFormat* set_response);
  private:
  const ::ola::rdm::pid::FrameFormat& _internal_set_response() const;
  ::ola::rdm::pid::FrameFormat* _internal_mutable_set_response();
  public:
  void unsafe_arena_set_allocated_set_response(
      ::ola::rdm::pid::FrameFormat* set_response);
  ::ola::rdm::pid::FrameFormat* unsafe_arena_release_set_response();

  // optional .ola.rdm.pid.FrameFormat discovery_request = 9;
  bool has_discovery_request() const;
  private:
  bool _internal_has_discovery_request() const;
  public:
  void clear_discovery_request();
  const ::ola::rdm::pid::FrameFormat& discovery_request() const;
  ::ola::rdm::pid::FrameFormat* release_discovery_request();
  ::ola::rdm::pid::FrameFormat* mutable_discovery_request();
  void set_allocated_discovery_request(::ola::rdm::pid::FrameFormat* discovery_request);
  private:
  const ::ola::rdm::pid::FrameFormat& _internal_discovery_request() const;
  ::ola::rdm::pid::FrameFormat* _internal_mutable_discovery_request();
  public:
  void unsafe_arena_set_allocated_discovery_request(
      ::ola::rdm::pid::FrameFormat* discovery_request);
  ::ola::rdm::pid::FrameFormat* unsafe_arena_release_discovery_request();

  // optional .ola.rdm.pid.FrameFormat discovery_response = 10;
  bool has_discovery_response() const;
  private:
  bool _internal_has_discovery_response() const;
  public:
  void clear_discovery_response();
  const ::ola::rdm::pid::FrameFormat& discovery_response() const;
  ::ola::rdm::pid::FrameFormat* release_discovery_response();
  ::ola::rdm::pid::FrameFormat* mutable_discovery_response();
  void set_allocated_discovery_response(::ola::rdm::pid::FrameFormat* discovery_response);
  private:
  const ::ola::rdm::pid::FrameFormat& _internal_discovery_response() const;
  ::ola::rdm::pid::FrameFormat* _internal_mutable_discovery_response();
  public:
  void unsafe_arena_set_allocated_discovery_response(
      ::ola::rdm::pid::FrameFormat* discovery_response);
  ::ola::rdm::pid::FrameFormat* unsafe_arena_release_discovery_response();

  // required uint32 value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::uint32 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_value() const;
  void _internal_set_value(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .ola.rdm.pid.SubDeviceRange discovery_sub_device_range = 11;
  bool has_discovery_sub_device_range() const;
  private:
  bool _internal_has_discovery_sub_device_range() const;
  public:
  void clear_discovery_sub_device_range();
  ::ola::rdm::pid::SubDeviceRange discovery_sub_device_range() const;
  void set_discovery_sub_device_range(::ola::rdm::pid::SubDeviceRange value);
  private:
  ::ola::rdm::pid::SubDeviceRange _internal_discovery_sub_device_range() const;
  void _internal_set_discovery_sub_device_range(::ola::rdm::pid::SubDeviceRange value);
  public:

  // optional .ola.rdm.pid.SubDeviceRange get_sub_device_range = 7;
  bool has_get_sub_device_range() const;
  private:
  bool _internal_has_get_sub_device_range() const;
  public:
  void clear_get_sub_device_range();
  ::ola::rdm::pid::SubDeviceRange get_sub_device_range() const;
  void set_get_sub_device_range(::ola::rdm::pid::SubDeviceRange value);
  private:
  ::ola::rdm::pid::SubDeviceRange _internal_get_sub_device_range() const;
  void _internal_set_get_sub_device_range(::ola::rdm::pid::SubDeviceRange value);
  public:

  // optional .ola.rdm.pid.SubDeviceRange set_sub_device_range = 8;
  bool has_set_sub_device_range() const;
  private:
  bool _internal_has_set_sub_device_range() const;
  public:
  void clear_set_sub_device_range();
  ::ola::rdm::pid::SubDeviceRange set_sub_device_range() const;
  void set_set_sub_device_range(::ola::rdm::pid::SubDeviceRange value);
  private:
  ::ola::rdm::pid::SubDeviceRange _internal_set_sub_device_range() const;
  void _internal_set_set_sub_device_range(::ola::rdm::pid::SubDeviceRange value);
  public:

  // @@protoc_insertion_point(class_scope:ola.rdm.pid.Pid)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::ola::rdm::pid::FrameFormat* get_request_;
  ::ola::rdm::pid::FrameFormat* get_response_;
  ::ola::rdm::pid::FrameFormat* set_request_;
  ::ola::rdm::pid::FrameFormat* set_response_;
  ::ola::rdm::pid::FrameFormat* discovery_request_;
  ::ola::rdm::pid::FrameFormat* discovery_response_;
  ::PROTOBUF_NAMESPACE_ID::uint32 value_;
  int discovery_sub_device_range_;
  int get_sub_device_range_;
  int set_sub_device_range_;
  friend struct ::TableStruct_Pids_2eproto;
};
// -------------------------------------------------------------------

class Manufacturer PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ola.rdm.pid.Manufacturer) */ {
 public:
  inline Manufacturer() : Manufacturer(nullptr) {};
  virtual ~Manufacturer();

  Manufacturer(const Manufacturer& from);
  Manufacturer(Manufacturer&& from) noexcept
    : Manufacturer() {
    *this = ::std::move(from);
  }

  inline Manufacturer& operator=(const Manufacturer& from) {
    CopyFrom(from);
    return *this;
  }
  inline Manufacturer& operator=(Manufacturer&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Manufacturer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Manufacturer* internal_default_instance() {
    return reinterpret_cast<const Manufacturer*>(
               &_Manufacturer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Manufacturer& a, Manufacturer& b) {
    a.Swap(&b);
  }
  inline void Swap(Manufacturer* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Manufacturer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Manufacturer* New() const final {
    return CreateMaybeMessage<Manufacturer>(nullptr);
  }

  Manufacturer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Manufacturer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Manufacturer& from);
  void MergeFrom(const Manufacturer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Manufacturer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ola.rdm.pid.Manufacturer";
  }
  protected:
  explicit Manufacturer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Pids_2eproto);
    return ::descriptor_table_Pids_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPidFieldNumber = 3,
    kManufacturerNameFieldNumber = 2,
    kManufacturerIdFieldNumber = 1,
  };
  // repeated .ola.rdm.pid.Pid pid = 3;
  int pid_size() const;
  private:
  int _internal_pid_size() const;
  public:
  void clear_pid();
  ::ola::rdm::pid::Pid* mutable_pid(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ola::rdm::pid::Pid >*
      mutable_pid();
  private:
  const ::ola::rdm::pid::Pid& _internal_pid(int index) const;
  ::ola::rdm::pid::Pid* _internal_add_pid();
  public:
  const ::ola::rdm::pid::Pid& pid(int index) const;
  ::ola::rdm::pid::Pid* add_pid();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ola::rdm::pid::Pid >&
      pid() const;

  // required string manufacturer_name = 2;
  bool has_manufacturer_name() const;
  private:
  bool _internal_has_manufacturer_name() const;
  public:
  void clear_manufacturer_name();
  const std::string& manufacturer_name() const;
  void set_manufacturer_name(const std::string& value);
  void set_manufacturer_name(std::string&& value);
  void set_manufacturer_name(const char* value);
  void set_manufacturer_name(const char* value, size_t size);
  std::string* mutable_manufacturer_name();
  std::string* release_manufacturer_name();
  void set_allocated_manufacturer_name(std::string* manufacturer_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_manufacturer_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_manufacturer_name(
      std::string* manufacturer_name);
  private:
  const std::string& _internal_manufacturer_name() const;
  void _internal_set_manufacturer_name(const std::string& value);
  std::string* _internal_mutable_manufacturer_name();
  public:

  // required uint32 manufacturer_id = 1;
  bool has_manufacturer_id() const;
  private:
  bool _internal_has_manufacturer_id() const;
  public:
  void clear_manufacturer_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 manufacturer_id() const;
  void set_manufacturer_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_manufacturer_id() const;
  void _internal_set_manufacturer_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:ola.rdm.pid.Manufacturer)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ola::rdm::pid::Pid > pid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr manufacturer_name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 manufacturer_id_;
  friend struct ::TableStruct_Pids_2eproto;
};
// -------------------------------------------------------------------

class PidStore PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ola.rdm.pid.PidStore) */ {
 public:
  inline PidStore() : PidStore(nullptr) {};
  virtual ~PidStore();

  PidStore(const PidStore& from);
  PidStore(PidStore&& from) noexcept
    : PidStore() {
    *this = ::std::move(from);
  }

  inline PidStore& operator=(const PidStore& from) {
    CopyFrom(from);
    return *this;
  }
  inline PidStore& operator=(PidStore&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PidStore& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PidStore* internal_default_instance() {
    return reinterpret_cast<const PidStore*>(
               &_PidStore_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(PidStore& a, PidStore& b) {
    a.Swap(&b);
  }
  inline void Swap(PidStore* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PidStore* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PidStore* New() const final {
    return CreateMaybeMessage<PidStore>(nullptr);
  }

  PidStore* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PidStore>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PidStore& from);
  void MergeFrom(const PidStore& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PidStore* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ola.rdm.pid.PidStore";
  }
  protected:
  explicit PidStore(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Pids_2eproto);
    return ::descriptor_table_Pids_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPidFieldNumber = 1,
    kManufacturerFieldNumber = 2,
    kVersionFieldNumber = 3,
  };
  // repeated .ola.rdm.pid.Pid pid = 1;
  int pid_size() const;
  private:
  int _internal_pid_size() const;
  public:
  void clear_pid();
  ::ola::rdm::pid::Pid* mutable_pid(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ola::rdm::pid::Pid >*
      mutable_pid();
  private:
  const ::ola::rdm::pid::Pid& _internal_pid(int index) const;
  ::ola::rdm::pid::Pid* _internal_add_pid();
  public:
  const ::ola::rdm::pid::Pid& pid(int index) const;
  ::ola::rdm::pid::Pid* add_pid();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ola::rdm::pid::Pid >&
      pid() const;

  // repeated .ola.rdm.pid.Manufacturer manufacturer = 2;
  int manufacturer_size() const;
  private:
  int _internal_manufacturer_size() const;
  public:
  void clear_manufacturer();
  ::ola::rdm::pid::Manufacturer* mutable_manufacturer(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ola::rdm::pid::Manufacturer >*
      mutable_manufacturer();
  private:
  const ::ola::rdm::pid::Manufacturer& _internal_manufacturer(int index) const;
  ::ola::rdm::pid::Manufacturer* _internal_add_manufacturer();
  public:
  const ::ola::rdm::pid::Manufacturer& manufacturer(int index) const;
  ::ola::rdm::pid::Manufacturer* add_manufacturer();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ola::rdm::pid::Manufacturer >&
      manufacturer() const;

  // required uint64 version = 3;
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::uint64 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_version() const;
  void _internal_set_version(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:ola.rdm.pid.PidStore)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ola::rdm::pid::Pid > pid_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ola::rdm::pid::Manufacturer > manufacturer_;
  ::PROTOBUF_NAMESPACE_ID::uint64 version_;
  friend struct ::TableStruct_Pids_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LabeledValue

// required int64 value = 1;
inline bool LabeledValue::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LabeledValue::has_value() const {
  return _internal_has_value();
}
inline void LabeledValue::clear_value() {
  value_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LabeledValue::_internal_value() const {
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LabeledValue::value() const {
  // @@protoc_insertion_point(field_get:ola.rdm.pid.LabeledValue.value)
  return _internal_value();
}
inline void LabeledValue::_internal_set_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  value_ = value;
}
inline void LabeledValue::set_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:ola.rdm.pid.LabeledValue.value)
}

// required string label = 2;
inline bool LabeledValue::_internal_has_label() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LabeledValue::has_label() const {
  return _internal_has_label();
}
inline void LabeledValue::clear_label() {
  label_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& LabeledValue::label() const {
  // @@protoc_insertion_point(field_get:ola.rdm.pid.LabeledValue.label)
  return _internal_label();
}
inline void LabeledValue::set_label(const std::string& value) {
  _internal_set_label(value);
  // @@protoc_insertion_point(field_set:ola.rdm.pid.LabeledValue.label)
}
inline std::string* LabeledValue::mutable_label() {
  // @@protoc_insertion_point(field_mutable:ola.rdm.pid.LabeledValue.label)
  return _internal_mutable_label();
}
inline const std::string& LabeledValue::_internal_label() const {
  return label_.Get();
}
inline void LabeledValue::_internal_set_label(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  label_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LabeledValue::set_label(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  label_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ola.rdm.pid.LabeledValue.label)
}
inline void LabeledValue::set_label(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  label_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ola.rdm.pid.LabeledValue.label)
}
inline void LabeledValue::set_label(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  label_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ola.rdm.pid.LabeledValue.label)
}
inline std::string* LabeledValue::_internal_mutable_label() {
  _has_bits_[0] |= 0x00000001u;
  return label_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LabeledValue::release_label() {
  // @@protoc_insertion_point(field_release:ola.rdm.pid.LabeledValue.label)
  if (!_internal_has_label()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return label_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LabeledValue::set_allocated_label(std::string* label) {
  if (label != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  label_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), label,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ola.rdm.pid.LabeledValue.label)
}
inline std::string* LabeledValue::unsafe_arena_release_label() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ola.rdm.pid.LabeledValue.label)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return label_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void LabeledValue::unsafe_arena_set_allocated_label(
    std::string* label) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (label != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  label_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      label, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ola.rdm.pid.LabeledValue.label)
}

// -------------------------------------------------------------------

// Range

// required int64 min = 1;
inline bool Range::_internal_has_min() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Range::has_min() const {
  return _internal_has_min();
}
inline void Range::clear_min() {
  min_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Range::_internal_min() const {
  return min_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Range::min() const {
  // @@protoc_insertion_point(field_get:ola.rdm.pid.Range.min)
  return _internal_min();
}
inline void Range::_internal_set_min(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  min_ = value;
}
inline void Range::set_min(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_min(value);
  // @@protoc_insertion_point(field_set:ola.rdm.pid.Range.min)
}

// required int64 max = 2;
inline bool Range::_internal_has_max() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Range::has_max() const {
  return _internal_has_max();
}
inline void Range::clear_max() {
  max_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Range::_internal_max() const {
  return max_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Range::max() const {
  // @@protoc_insertion_point(field_get:ola.rdm.pid.Range.max)
  return _internal_max();
}
inline void Range::_internal_set_max(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  max_ = value;
}
inline void Range::set_max(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_max(value);
  // @@protoc_insertion_point(field_set:ola.rdm.pid.Range.max)
}

// -------------------------------------------------------------------

// Field

// required .ola.rdm.pid.FieldType type = 1;
inline bool Field::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Field::has_type() const {
  return _internal_has_type();
}
inline void Field::clear_type() {
  type_ = 1;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::ola::rdm::pid::FieldType Field::_internal_type() const {
  return static_cast< ::ola::rdm::pid::FieldType >(type_);
}
inline ::ola::rdm::pid::FieldType Field::type() const {
  // @@protoc_insertion_point(field_get:ola.rdm.pid.Field.type)
  return _internal_type();
}
inline void Field::_internal_set_type(::ola::rdm::pid::FieldType value) {
  assert(::ola::rdm::pid::FieldType_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  type_ = value;
}
inline void Field::set_type(::ola::rdm::pid::FieldType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:ola.rdm.pid.Field.type)
}

// required string name = 2;
inline bool Field::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Field::has_name() const {
  return _internal_has_name();
}
inline void Field::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Field::name() const {
  // @@protoc_insertion_point(field_get:ola.rdm.pid.Field.name)
  return _internal_name();
}
inline void Field::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:ola.rdm.pid.Field.name)
}
inline std::string* Field::mutable_name() {
  // @@protoc_insertion_point(field_mutable:ola.rdm.pid.Field.name)
  return _internal_mutable_name();
}
inline const std::string& Field::_internal_name() const {
  return name_.Get();
}
inline void Field::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Field::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ola.rdm.pid.Field.name)
}
inline void Field::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ola.rdm.pid.Field.name)
}
inline void Field::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ola.rdm.pid.Field.name)
}
inline std::string* Field::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Field::release_name() {
  // @@protoc_insertion_point(field_release:ola.rdm.pid.Field.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Field::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ola.rdm.pid.Field.name)
}
inline std::string* Field::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ola.rdm.pid.Field.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Field::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ola.rdm.pid.Field.name)
}

// optional uint32 min_size = 3;
inline bool Field::_internal_has_min_size() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Field::has_min_size() const {
  return _internal_has_min_size();
}
inline void Field::clear_min_size() {
  min_size_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Field::_internal_min_size() const {
  return min_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Field::min_size() const {
  // @@protoc_insertion_point(field_get:ola.rdm.pid.Field.min_size)
  return _internal_min_size();
}
inline void Field::_internal_set_min_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  min_size_ = value;
}
inline void Field::set_min_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_min_size(value);
  // @@protoc_insertion_point(field_set:ola.rdm.pid.Field.min_size)
}

// optional uint32 max_size = 4;
inline bool Field::_internal_has_max_size() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Field::has_max_size() const {
  return _internal_has_max_size();
}
inline void Field::clear_max_size() {
  max_size_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Field::_internal_max_size() const {
  return max_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Field::max_size() const {
  // @@protoc_insertion_point(field_get:ola.rdm.pid.Field.max_size)
  return _internal_max_size();
}
inline void Field::_internal_set_max_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  max_size_ = value;
}
inline void Field::set_max_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_size(value);
  // @@protoc_insertion_point(field_set:ola.rdm.pid.Field.max_size)
}

// optional sint32 multiplier = 5;
inline bool Field::_internal_has_multiplier() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Field::has_multiplier() const {
  return _internal_has_multiplier();
}
inline void Field::clear_multiplier() {
  multiplier_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Field::_internal_multiplier() const {
  return multiplier_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Field::multiplier() const {
  // @@protoc_insertion_point(field_get:ola.rdm.pid.Field.multiplier)
  return _internal_multiplier();
}
inline void Field::_internal_set_multiplier(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  multiplier_ = value;
}
inline void Field::set_multiplier(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_multiplier(value);
  // @@protoc_insertion_point(field_set:ola.rdm.pid.Field.multiplier)
}

// repeated .ola.rdm.pid.LabeledValue label = 6;
inline int Field::_internal_label_size() const {
  return label_.size();
}
inline int Field::label_size() const {
  return _internal_label_size();
}
inline void Field::clear_label() {
  label_.Clear();
}
inline ::ola::rdm::pid::LabeledValue* Field::mutable_label(int index) {
  // @@protoc_insertion_point(field_mutable:ola.rdm.pid.Field.label)
  return label_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ola::rdm::pid::LabeledValue >*
Field::mutable_label() {
  // @@protoc_insertion_point(field_mutable_list:ola.rdm.pid.Field.label)
  return &label_;
}
inline const ::ola::rdm::pid::LabeledValue& Field::_internal_label(int index) const {
  return label_.Get(index);
}
inline const ::ola::rdm::pid::LabeledValue& Field::label(int index) const {
  // @@protoc_insertion_point(field_get:ola.rdm.pid.Field.label)
  return _internal_label(index);
}
inline ::ola::rdm::pid::LabeledValue* Field::_internal_add_label() {
  return label_.Add();
}
inline ::ola::rdm::pid::LabeledValue* Field::add_label() {
  // @@protoc_insertion_point(field_add:ola.rdm.pid.Field.label)
  return _internal_add_label();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ola::rdm::pid::LabeledValue >&
Field::label() const {
  // @@protoc_insertion_point(field_list:ola.rdm.pid.Field.label)
  return label_;
}

// repeated .ola.rdm.pid.Range range = 7;
inline int Field::_internal_range_size() const {
  return range_.size();
}
inline int Field::range_size() const {
  return _internal_range_size();
}
inline void Field::clear_range() {
  range_.Clear();
}
inline ::ola::rdm::pid::Range* Field::mutable_range(int index) {
  // @@protoc_insertion_point(field_mutable:ola.rdm.pid.Field.range)
  return range_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ola::rdm::pid::Range >*
Field::mutable_range() {
  // @@protoc_insertion_point(field_mutable_list:ola.rdm.pid.Field.range)
  return &range_;
}
inline const ::ola::rdm::pid::Range& Field::_internal_range(int index) const {
  return range_.Get(index);
}
inline const ::ola::rdm::pid::Range& Field::range(int index) const {
  // @@protoc_insertion_point(field_get:ola.rdm.pid.Field.range)
  return _internal_range(index);
}
inline ::ola::rdm::pid::Range* Field::_internal_add_range() {
  return range_.Add();
}
inline ::ola::rdm::pid::Range* Field::add_range() {
  // @@protoc_insertion_point(field_add:ola.rdm.pid.Field.range)
  return _internal_add_range();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ola::rdm::pid::Range >&
Field::range() const {
  // @@protoc_insertion_point(field_list:ola.rdm.pid.Field.range)
  return range_;
}

// repeated .ola.rdm.pid.Field field = 8;
inline int Field::_internal_field_size() const {
  return field_.size();
}
inline int Field::field_size() const {
  return _internal_field_size();
}
inline void Field::clear_field() {
  field_.Clear();
}
inline ::ola::rdm::pid::Field* Field::mutable_field(int index) {
  // @@protoc_insertion_point(field_mutable:ola.rdm.pid.Field.field)
  return field_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ola::rdm::pid::Field >*
Field::mutable_field() {
  // @@protoc_insertion_point(field_mutable_list:ola.rdm.pid.Field.field)
  return &field_;
}
inline const ::ola::rdm::pid::Field& Field::_internal_field(int index) const {
  return field_.Get(index);
}
inline const ::ola::rdm::pid::Field& Field::field(int index) const {
  // @@protoc_insertion_point(field_get:ola.rdm.pid.Field.field)
  return _internal_field(index);
}
inline ::ola::rdm::pid::Field* Field::_internal_add_field() {
  return field_.Add();
}
inline ::ola::rdm::pid::Field* Field::add_field() {
  // @@protoc_insertion_point(field_add:ola.rdm.pid.Field.field)
  return _internal_add_field();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ola::rdm::pid::Field >&
Field::field() const {
  // @@protoc_insertion_point(field_list:ola.rdm.pid.Field.field)
  return field_;
}

// -------------------------------------------------------------------

// FrameFormat

// repeated .ola.rdm.pid.Field field = 1;
inline int FrameFormat::_internal_field_size() const {
  return field_.size();
}
inline int FrameFormat::field_size() const {
  return _internal_field_size();
}
inline void FrameFormat::clear_field() {
  field_.Clear();
}
inline ::ola::rdm::pid::Field* FrameFormat::mutable_field(int index) {
  // @@protoc_insertion_point(field_mutable:ola.rdm.pid.FrameFormat.field)
  return field_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ola::rdm::pid::Field >*
FrameFormat::mutable_field() {
  // @@protoc_insertion_point(field_mutable_list:ola.rdm.pid.FrameFormat.field)
  return &field_;
}
inline const ::ola::rdm::pid::Field& FrameFormat::_internal_field(int index) const {
  return field_.Get(index);
}
inline const ::ola::rdm::pid::Field& FrameFormat::field(int index) const {
  // @@protoc_insertion_point(field_get:ola.rdm.pid.FrameFormat.field)
  return _internal_field(index);
}
inline ::ola::rdm::pid::Field* FrameFormat::_internal_add_field() {
  return field_.Add();
}
inline ::ola::rdm::pid::Field* FrameFormat::add_field() {
  // @@protoc_insertion_point(field_add:ola.rdm.pid.FrameFormat.field)
  return _internal_add_field();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ola::rdm::pid::Field >&
FrameFormat::field() const {
  // @@protoc_insertion_point(field_list:ola.rdm.pid.FrameFormat.field)
  return field_;
}

// -------------------------------------------------------------------

// Pid

// required string name = 1;
inline bool Pid::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Pid::has_name() const {
  return _internal_has_name();
}
inline void Pid::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Pid::name() const {
  // @@protoc_insertion_point(field_get:ola.rdm.pid.Pid.name)
  return _internal_name();
}
inline void Pid::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:ola.rdm.pid.Pid.name)
}
inline std::string* Pid::mutable_name() {
  // @@protoc_insertion_point(field_mutable:ola.rdm.pid.Pid.name)
  return _internal_mutable_name();
}
inline const std::string& Pid::_internal_name() const {
  return name_.Get();
}
inline void Pid::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Pid::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ola.rdm.pid.Pid.name)
}
inline void Pid::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ola.rdm.pid.Pid.name)
}
inline void Pid::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ola.rdm.pid.Pid.name)
}
inline std::string* Pid::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Pid::release_name() {
  // @@protoc_insertion_point(field_release:ola.rdm.pid.Pid.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Pid::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ola.rdm.pid.Pid.name)
}
inline std::string* Pid::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ola.rdm.pid.Pid.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Pid::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ola.rdm.pid.Pid.name)
}

// required uint32 value = 2;
inline bool Pid::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Pid::has_value() const {
  return _internal_has_value();
}
inline void Pid::clear_value() {
  value_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Pid::_internal_value() const {
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Pid::value() const {
  // @@protoc_insertion_point(field_get:ola.rdm.pid.Pid.value)
  return _internal_value();
}
inline void Pid::_internal_set_value(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  value_ = value;
}
inline void Pid::set_value(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:ola.rdm.pid.Pid.value)
}

// optional .ola.rdm.pid.FrameFormat get_request = 3;
inline bool Pid::_internal_has_get_request() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || get_request_ != nullptr);
  return value;
}
inline bool Pid::has_get_request() const {
  return _internal_has_get_request();
}
inline void Pid::clear_get_request() {
  if (get_request_ != nullptr) get_request_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::ola::rdm::pid::FrameFormat& Pid::_internal_get_request() const {
  const ::ola::rdm::pid::FrameFormat* p = get_request_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ola::rdm::pid::FrameFormat*>(
      &::ola::rdm::pid::_FrameFormat_default_instance_);
}
inline const ::ola::rdm::pid::FrameFormat& Pid::get_request() const {
  // @@protoc_insertion_point(field_get:ola.rdm.pid.Pid.get_request)
  return _internal_get_request();
}
inline void Pid::unsafe_arena_set_allocated_get_request(
    ::ola::rdm::pid::FrameFormat* get_request) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(get_request_);
  }
  get_request_ = get_request;
  if (get_request) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ola.rdm.pid.Pid.get_request)
}
inline ::ola::rdm::pid::FrameFormat* Pid::release_get_request() {
  auto temp = unsafe_arena_release_get_request();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ola::rdm::pid::FrameFormat* Pid::unsafe_arena_release_get_request() {
  // @@protoc_insertion_point(field_release:ola.rdm.pid.Pid.get_request)
  _has_bits_[0] &= ~0x00000002u;
  ::ola::rdm::pid::FrameFormat* temp = get_request_;
  get_request_ = nullptr;
  return temp;
}
inline ::ola::rdm::pid::FrameFormat* Pid::_internal_mutable_get_request() {
  _has_bits_[0] |= 0x00000002u;
  if (get_request_ == nullptr) {
    auto* p = CreateMaybeMessage<::ola::rdm::pid::FrameFormat>(GetArena());
    get_request_ = p;
  }
  return get_request_;
}
inline ::ola::rdm::pid::FrameFormat* Pid::mutable_get_request() {
  // @@protoc_insertion_point(field_mutable:ola.rdm.pid.Pid.get_request)
  return _internal_mutable_get_request();
}
inline void Pid::set_allocated_get_request(::ola::rdm::pid::FrameFormat* get_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete get_request_;
  }
  if (get_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(get_request);
    if (message_arena != submessage_arena) {
      get_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_request, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  get_request_ = get_request;
  // @@protoc_insertion_point(field_set_allocated:ola.rdm.pid.Pid.get_request)
}

// optional .ola.rdm.pid.FrameFormat get_response = 4;
inline bool Pid::_internal_has_get_response() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || get_response_ != nullptr);
  return value;
}
inline bool Pid::has_get_response() const {
  return _internal_has_get_response();
}
inline void Pid::clear_get_response() {
  if (get_response_ != nullptr) get_response_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::ola::rdm::pid::FrameFormat& Pid::_internal_get_response() const {
  const ::ola::rdm::pid::FrameFormat* p = get_response_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ola::rdm::pid::FrameFormat*>(
      &::ola::rdm::pid::_FrameFormat_default_instance_);
}
inline const ::ola::rdm::pid::FrameFormat& Pid::get_response() const {
  // @@protoc_insertion_point(field_get:ola.rdm.pid.Pid.get_response)
  return _internal_get_response();
}
inline void Pid::unsafe_arena_set_allocated_get_response(
    ::ola::rdm::pid::FrameFormat* get_response) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(get_response_);
  }
  get_response_ = get_response;
  if (get_response) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ola.rdm.pid.Pid.get_response)
}
inline ::ola::rdm::pid::FrameFormat* Pid::release_get_response() {
  auto temp = unsafe_arena_release_get_response();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ola::rdm::pid::FrameFormat* Pid::unsafe_arena_release_get_response() {
  // @@protoc_insertion_point(field_release:ola.rdm.pid.Pid.get_response)
  _has_bits_[0] &= ~0x00000004u;
  ::ola::rdm::pid::FrameFormat* temp = get_response_;
  get_response_ = nullptr;
  return temp;
}
inline ::ola::rdm::pid::FrameFormat* Pid::_internal_mutable_get_response() {
  _has_bits_[0] |= 0x00000004u;
  if (get_response_ == nullptr) {
    auto* p = CreateMaybeMessage<::ola::rdm::pid::FrameFormat>(GetArena());
    get_response_ = p;
  }
  return get_response_;
}
inline ::ola::rdm::pid::FrameFormat* Pid::mutable_get_response() {
  // @@protoc_insertion_point(field_mutable:ola.rdm.pid.Pid.get_response)
  return _internal_mutable_get_response();
}
inline void Pid::set_allocated_get_response(::ola::rdm::pid::FrameFormat* get_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete get_response_;
  }
  if (get_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(get_response);
    if (message_arena != submessage_arena) {
      get_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_response, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  get_response_ = get_response;
  // @@protoc_insertion_point(field_set_allocated:ola.rdm.pid.Pid.get_response)
}

// optional .ola.rdm.pid.FrameFormat set_request = 5;
inline bool Pid::_internal_has_set_request() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || set_request_ != nullptr);
  return value;
}
inline bool Pid::has_set_request() const {
  return _internal_has_set_request();
}
inline void Pid::clear_set_request() {
  if (set_request_ != nullptr) set_request_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::ola::rdm::pid::FrameFormat& Pid::_internal_set_request() const {
  const ::ola::rdm::pid::FrameFormat* p = set_request_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ola::rdm::pid::FrameFormat*>(
      &::ola::rdm::pid::_FrameFormat_default_instance_);
}
inline const ::ola::rdm::pid::FrameFormat& Pid::set_request() const {
  // @@protoc_insertion_point(field_get:ola.rdm.pid.Pid.set_request)
  return _internal_set_request();
}
inline void Pid::unsafe_arena_set_allocated_set_request(
    ::ola::rdm::pid::FrameFormat* set_request) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(set_request_);
  }
  set_request_ = set_request;
  if (set_request) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ola.rdm.pid.Pid.set_request)
}
inline ::ola::rdm::pid::FrameFormat* Pid::release_set_request() {
  auto temp = unsafe_arena_release_set_request();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ola::rdm::pid::FrameFormat* Pid::unsafe_arena_release_set_request() {
  // @@protoc_insertion_point(field_release:ola.rdm.pid.Pid.set_request)
  _has_bits_[0] &= ~0x00000008u;
  ::ola::rdm::pid::FrameFormat* temp = set_request_;
  set_request_ = nullptr;
  return temp;
}
inline ::ola::rdm::pid::FrameFormat* Pid::_internal_mutable_set_request() {
  _has_bits_[0] |= 0x00000008u;
  if (set_request_ == nullptr) {
    auto* p = CreateMaybeMessage<::ola::rdm::pid::FrameFormat>(GetArena());
    set_request_ = p;
  }
  return set_request_;
}
inline ::ola::rdm::pid::FrameFormat* Pid::mutable_set_request() {
  // @@protoc_insertion_point(field_mutable:ola.rdm.pid.Pid.set_request)
  return _internal_mutable_set_request();
}
inline void Pid::set_allocated_set_request(::ola::rdm::pid::FrameFormat* set_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete set_request_;
  }
  if (set_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(set_request);
    if (message_arena != submessage_arena) {
      set_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, set_request, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  set_request_ = set_request;
  // @@protoc_insertion_point(field_set_allocated:ola.rdm.pid.Pid.set_request)
}

// optional .ola.rdm.pid.FrameFormat set_response = 6;
inline bool Pid::_internal_has_set_response() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || set_response_ != nullptr);
  return value;
}
inline bool Pid::has_set_response() const {
  return _internal_has_set_response();
}
inline void Pid::clear_set_response() {
  if (set_response_ != nullptr) set_response_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::ola::rdm::pid::FrameFormat& Pid::_internal_set_response() const {
  const ::ola::rdm::pid::FrameFormat* p = set_response_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ola::rdm::pid::FrameFormat*>(
      &::ola::rdm::pid::_FrameFormat_default_instance_);
}
inline const ::ola::rdm::pid::FrameFormat& Pid::set_response() const {
  // @@protoc_insertion_point(field_get:ola.rdm.pid.Pid.set_response)
  return _internal_set_response();
}
inline void Pid::unsafe_arena_set_allocated_set_response(
    ::ola::rdm::pid::FrameFormat* set_response) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(set_response_);
  }
  set_response_ = set_response;
  if (set_response) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ola.rdm.pid.Pid.set_response)
}
inline ::ola::rdm::pid::FrameFormat* Pid::release_set_response() {
  auto temp = unsafe_arena_release_set_response();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ola::rdm::pid::FrameFormat* Pid::unsafe_arena_release_set_response() {
  // @@protoc_insertion_point(field_release:ola.rdm.pid.Pid.set_response)
  _has_bits_[0] &= ~0x00000010u;
  ::ola::rdm::pid::FrameFormat* temp = set_response_;
  set_response_ = nullptr;
  return temp;
}
inline ::ola::rdm::pid::FrameFormat* Pid::_internal_mutable_set_response() {
  _has_bits_[0] |= 0x00000010u;
  if (set_response_ == nullptr) {
    auto* p = CreateMaybeMessage<::ola::rdm::pid::FrameFormat>(GetArena());
    set_response_ = p;
  }
  return set_response_;
}
inline ::ola::rdm::pid::FrameFormat* Pid::mutable_set_response() {
  // @@protoc_insertion_point(field_mutable:ola.rdm.pid.Pid.set_response)
  return _internal_mutable_set_response();
}
inline void Pid::set_allocated_set_response(::ola::rdm::pid::FrameFormat* set_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete set_response_;
  }
  if (set_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(set_response);
    if (message_arena != submessage_arena) {
      set_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, set_response, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  set_response_ = set_response;
  // @@protoc_insertion_point(field_set_allocated:ola.rdm.pid.Pid.set_response)
}

// optional .ola.rdm.pid.SubDeviceRange get_sub_device_range = 7;
inline bool Pid::_internal_has_get_sub_device_range() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool Pid::has_get_sub_device_range() const {
  return _internal_has_get_sub_device_range();
}
inline void Pid::clear_get_sub_device_range() {
  get_sub_device_range_ = 1;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::ola::rdm::pid::SubDeviceRange Pid::_internal_get_sub_device_range() const {
  return static_cast< ::ola::rdm::pid::SubDeviceRange >(get_sub_device_range_);
}
inline ::ola::rdm::pid::SubDeviceRange Pid::get_sub_device_range() const {
  // @@protoc_insertion_point(field_get:ola.rdm.pid.Pid.get_sub_device_range)
  return _internal_get_sub_device_range();
}
inline void Pid::_internal_set_get_sub_device_range(::ola::rdm::pid::SubDeviceRange value) {
  assert(::ola::rdm::pid::SubDeviceRange_IsValid(value));
  _has_bits_[0] |= 0x00000200u;
  get_sub_device_range_ = value;
}
inline void Pid::set_get_sub_device_range(::ola::rdm::pid::SubDeviceRange value) {
  _internal_set_get_sub_device_range(value);
  // @@protoc_insertion_point(field_set:ola.rdm.pid.Pid.get_sub_device_range)
}

// optional .ola.rdm.pid.SubDeviceRange set_sub_device_range = 8;
inline bool Pid::_internal_has_set_sub_device_range() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool Pid::has_set_sub_device_range() const {
  return _internal_has_set_sub_device_range();
}
inline void Pid::clear_set_sub_device_range() {
  set_sub_device_range_ = 1;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::ola::rdm::pid::SubDeviceRange Pid::_internal_set_sub_device_range() const {
  return static_cast< ::ola::rdm::pid::SubDeviceRange >(set_sub_device_range_);
}
inline ::ola::rdm::pid::SubDeviceRange Pid::set_sub_device_range() const {
  // @@protoc_insertion_point(field_get:ola.rdm.pid.Pid.set_sub_device_range)
  return _internal_set_sub_device_range();
}
inline void Pid::_internal_set_set_sub_device_range(::ola::rdm::pid::SubDeviceRange value) {
  assert(::ola::rdm::pid::SubDeviceRange_IsValid(value));
  _has_bits_[0] |= 0x00000400u;
  set_sub_device_range_ = value;
}
inline void Pid::set_set_sub_device_range(::ola::rdm::pid::SubDeviceRange value) {
  _internal_set_set_sub_device_range(value);
  // @@protoc_insertion_point(field_set:ola.rdm.pid.Pid.set_sub_device_range)
}

// optional .ola.rdm.pid.FrameFormat discovery_request = 9;
inline bool Pid::_internal_has_discovery_request() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || discovery_request_ != nullptr);
  return value;
}
inline bool Pid::has_discovery_request() const {
  return _internal_has_discovery_request();
}
inline void Pid::clear_discovery_request() {
  if (discovery_request_ != nullptr) discovery_request_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::ola::rdm::pid::FrameFormat& Pid::_internal_discovery_request() const {
  const ::ola::rdm::pid::FrameFormat* p = discovery_request_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ola::rdm::pid::FrameFormat*>(
      &::ola::rdm::pid::_FrameFormat_default_instance_);
}
inline const ::ola::rdm::pid::FrameFormat& Pid::discovery_request() const {
  // @@protoc_insertion_point(field_get:ola.rdm.pid.Pid.discovery_request)
  return _internal_discovery_request();
}
inline void Pid::unsafe_arena_set_allocated_discovery_request(
    ::ola::rdm::pid::FrameFormat* discovery_request) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(discovery_request_);
  }
  discovery_request_ = discovery_request;
  if (discovery_request) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ola.rdm.pid.Pid.discovery_request)
}
inline ::ola::rdm::pid::FrameFormat* Pid::release_discovery_request() {
  auto temp = unsafe_arena_release_discovery_request();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ola::rdm::pid::FrameFormat* Pid::unsafe_arena_release_discovery_request() {
  // @@protoc_insertion_point(field_release:ola.rdm.pid.Pid.discovery_request)
  _has_bits_[0] &= ~0x00000020u;
  ::ola::rdm::pid::FrameFormat* temp = discovery_request_;
  discovery_request_ = nullptr;
  return temp;
}
inline ::ola::rdm::pid::FrameFormat* Pid::_internal_mutable_discovery_request() {
  _has_bits_[0] |= 0x00000020u;
  if (discovery_request_ == nullptr) {
    auto* p = CreateMaybeMessage<::ola::rdm::pid::FrameFormat>(GetArena());
    discovery_request_ = p;
  }
  return discovery_request_;
}
inline ::ola::rdm::pid::FrameFormat* Pid::mutable_discovery_request() {
  // @@protoc_insertion_point(field_mutable:ola.rdm.pid.Pid.discovery_request)
  return _internal_mutable_discovery_request();
}
inline void Pid::set_allocated_discovery_request(::ola::rdm::pid::FrameFormat* discovery_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete discovery_request_;
  }
  if (discovery_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(discovery_request);
    if (message_arena != submessage_arena) {
      discovery_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, discovery_request, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  discovery_request_ = discovery_request;
  // @@protoc_insertion_point(field_set_allocated:ola.rdm.pid.Pid.discovery_request)
}

// optional .ola.rdm.pid.FrameFormat discovery_response = 10;
inline bool Pid::_internal_has_discovery_response() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || discovery_response_ != nullptr);
  return value;
}
inline bool Pid::has_discovery_response() const {
  return _internal_has_discovery_response();
}
inline void Pid::clear_discovery_response() {
  if (discovery_response_ != nullptr) discovery_response_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
inline const ::ola::rdm::pid::FrameFormat& Pid::_internal_discovery_response() const {
  const ::ola::rdm::pid::FrameFormat* p = discovery_response_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ola::rdm::pid::FrameFormat*>(
      &::ola::rdm::pid::_FrameFormat_default_instance_);
}
inline const ::ola::rdm::pid::FrameFormat& Pid::discovery_response() const {
  // @@protoc_insertion_point(field_get:ola.rdm.pid.Pid.discovery_response)
  return _internal_discovery_response();
}
inline void Pid::unsafe_arena_set_allocated_discovery_response(
    ::ola::rdm::pid::FrameFormat* discovery_response) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(discovery_response_);
  }
  discovery_response_ = discovery_response;
  if (discovery_response) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ola.rdm.pid.Pid.discovery_response)
}
inline ::ola::rdm::pid::FrameFormat* Pid::release_discovery_response() {
  auto temp = unsafe_arena_release_discovery_response();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ola::rdm::pid::FrameFormat* Pid::unsafe_arena_release_discovery_response() {
  // @@protoc_insertion_point(field_release:ola.rdm.pid.Pid.discovery_response)
  _has_bits_[0] &= ~0x00000040u;
  ::ola::rdm::pid::FrameFormat* temp = discovery_response_;
  discovery_response_ = nullptr;
  return temp;
}
inline ::ola::rdm::pid::FrameFormat* Pid::_internal_mutable_discovery_response() {
  _has_bits_[0] |= 0x00000040u;
  if (discovery_response_ == nullptr) {
    auto* p = CreateMaybeMessage<::ola::rdm::pid::FrameFormat>(GetArena());
    discovery_response_ = p;
  }
  return discovery_response_;
}
inline ::ola::rdm::pid::FrameFormat* Pid::mutable_discovery_response() {
  // @@protoc_insertion_point(field_mutable:ola.rdm.pid.Pid.discovery_response)
  return _internal_mutable_discovery_response();
}
inline void Pid::set_allocated_discovery_response(::ola::rdm::pid::FrameFormat* discovery_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete discovery_response_;
  }
  if (discovery_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(discovery_response);
    if (message_arena != submessage_arena) {
      discovery_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, discovery_response, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  discovery_response_ = discovery_response;
  // @@protoc_insertion_point(field_set_allocated:ola.rdm.pid.Pid.discovery_response)
}

// optional .ola.rdm.pid.SubDeviceRange discovery_sub_device_range = 11;
inline bool Pid::_internal_has_discovery_sub_device_range() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool Pid::has_discovery_sub_device_range() const {
  return _internal_has_discovery_sub_device_range();
}
inline void Pid::clear_discovery_sub_device_range() {
  discovery_sub_device_range_ = 1;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::ola::rdm::pid::SubDeviceRange Pid::_internal_discovery_sub_device_range() const {
  return static_cast< ::ola::rdm::pid::SubDeviceRange >(discovery_sub_device_range_);
}
inline ::ola::rdm::pid::SubDeviceRange Pid::discovery_sub_device_range() const {
  // @@protoc_insertion_point(field_get:ola.rdm.pid.Pid.discovery_sub_device_range)
  return _internal_discovery_sub_device_range();
}
inline void Pid::_internal_set_discovery_sub_device_range(::ola::rdm::pid::SubDeviceRange value) {
  assert(::ola::rdm::pid::SubDeviceRange_IsValid(value));
  _has_bits_[0] |= 0x00000100u;
  discovery_sub_device_range_ = value;
}
inline void Pid::set_discovery_sub_device_range(::ola::rdm::pid::SubDeviceRange value) {
  _internal_set_discovery_sub_device_range(value);
  // @@protoc_insertion_point(field_set:ola.rdm.pid.Pid.discovery_sub_device_range)
}

// -------------------------------------------------------------------

// Manufacturer

// required uint32 manufacturer_id = 1;
inline bool Manufacturer::_internal_has_manufacturer_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Manufacturer::has_manufacturer_id() const {
  return _internal_has_manufacturer_id();
}
inline void Manufacturer::clear_manufacturer_id() {
  manufacturer_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Manufacturer::_internal_manufacturer_id() const {
  return manufacturer_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Manufacturer::manufacturer_id() const {
  // @@protoc_insertion_point(field_get:ola.rdm.pid.Manufacturer.manufacturer_id)
  return _internal_manufacturer_id();
}
inline void Manufacturer::_internal_set_manufacturer_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  manufacturer_id_ = value;
}
inline void Manufacturer::set_manufacturer_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_manufacturer_id(value);
  // @@protoc_insertion_point(field_set:ola.rdm.pid.Manufacturer.manufacturer_id)
}

// required string manufacturer_name = 2;
inline bool Manufacturer::_internal_has_manufacturer_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Manufacturer::has_manufacturer_name() const {
  return _internal_has_manufacturer_name();
}
inline void Manufacturer::clear_manufacturer_name() {
  manufacturer_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Manufacturer::manufacturer_name() const {
  // @@protoc_insertion_point(field_get:ola.rdm.pid.Manufacturer.manufacturer_name)
  return _internal_manufacturer_name();
}
inline void Manufacturer::set_manufacturer_name(const std::string& value) {
  _internal_set_manufacturer_name(value);
  // @@protoc_insertion_point(field_set:ola.rdm.pid.Manufacturer.manufacturer_name)
}
inline std::string* Manufacturer::mutable_manufacturer_name() {
  // @@protoc_insertion_point(field_mutable:ola.rdm.pid.Manufacturer.manufacturer_name)
  return _internal_mutable_manufacturer_name();
}
inline const std::string& Manufacturer::_internal_manufacturer_name() const {
  return manufacturer_name_.Get();
}
inline void Manufacturer::_internal_set_manufacturer_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  manufacturer_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Manufacturer::set_manufacturer_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  manufacturer_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ola.rdm.pid.Manufacturer.manufacturer_name)
}
inline void Manufacturer::set_manufacturer_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  manufacturer_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ola.rdm.pid.Manufacturer.manufacturer_name)
}
inline void Manufacturer::set_manufacturer_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  manufacturer_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ola.rdm.pid.Manufacturer.manufacturer_name)
}
inline std::string* Manufacturer::_internal_mutable_manufacturer_name() {
  _has_bits_[0] |= 0x00000001u;
  return manufacturer_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Manufacturer::release_manufacturer_name() {
  // @@protoc_insertion_point(field_release:ola.rdm.pid.Manufacturer.manufacturer_name)
  if (!_internal_has_manufacturer_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return manufacturer_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Manufacturer::set_allocated_manufacturer_name(std::string* manufacturer_name) {
  if (manufacturer_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  manufacturer_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), manufacturer_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ola.rdm.pid.Manufacturer.manufacturer_name)
}
inline std::string* Manufacturer::unsafe_arena_release_manufacturer_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ola.rdm.pid.Manufacturer.manufacturer_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return manufacturer_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Manufacturer::unsafe_arena_set_allocated_manufacturer_name(
    std::string* manufacturer_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (manufacturer_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  manufacturer_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      manufacturer_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ola.rdm.pid.Manufacturer.manufacturer_name)
}

// repeated .ola.rdm.pid.Pid pid = 3;
inline int Manufacturer::_internal_pid_size() const {
  return pid_.size();
}
inline int Manufacturer::pid_size() const {
  return _internal_pid_size();
}
inline void Manufacturer::clear_pid() {
  pid_.Clear();
}
inline ::ola::rdm::pid::Pid* Manufacturer::mutable_pid(int index) {
  // @@protoc_insertion_point(field_mutable:ola.rdm.pid.Manufacturer.pid)
  return pid_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ola::rdm::pid::Pid >*
Manufacturer::mutable_pid() {
  // @@protoc_insertion_point(field_mutable_list:ola.rdm.pid.Manufacturer.pid)
  return &pid_;
}
inline const ::ola::rdm::pid::Pid& Manufacturer::_internal_pid(int index) const {
  return pid_.Get(index);
}
inline const ::ola::rdm::pid::Pid& Manufacturer::pid(int index) const {
  // @@protoc_insertion_point(field_get:ola.rdm.pid.Manufacturer.pid)
  return _internal_pid(index);
}
inline ::ola::rdm::pid::Pid* Manufacturer::_internal_add_pid() {
  return pid_.Add();
}
inline ::ola::rdm::pid::Pid* Manufacturer::add_pid() {
  // @@protoc_insertion_point(field_add:ola.rdm.pid.Manufacturer.pid)
  return _internal_add_pid();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ola::rdm::pid::Pid >&
Manufacturer::pid() const {
  // @@protoc_insertion_point(field_list:ola.rdm.pid.Manufacturer.pid)
  return pid_;
}

// -------------------------------------------------------------------

// PidStore

// repeated .ola.rdm.pid.Pid pid = 1;
inline int PidStore::_internal_pid_size() const {
  return pid_.size();
}
inline int PidStore::pid_size() const {
  return _internal_pid_size();
}
inline void PidStore::clear_pid() {
  pid_.Clear();
}
inline ::ola::rdm::pid::Pid* PidStore::mutable_pid(int index) {
  // @@protoc_insertion_point(field_mutable:ola.rdm.pid.PidStore.pid)
  return pid_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ola::rdm::pid::Pid >*
PidStore::mutable_pid() {
  // @@protoc_insertion_point(field_mutable_list:ola.rdm.pid.PidStore.pid)
  return &pid_;
}
inline const ::ola::rdm::pid::Pid& PidStore::_internal_pid(int index) const {
  return pid_.Get(index);
}
inline const ::ola::rdm::pid::Pid& PidStore::pid(int index) const {
  // @@protoc_insertion_point(field_get:ola.rdm.pid.PidStore.pid)
  return _internal_pid(index);
}
inline ::ola::rdm::pid::Pid* PidStore::_internal_add_pid() {
  return pid_.Add();
}
inline ::ola::rdm::pid::Pid* PidStore::add_pid() {
  // @@protoc_insertion_point(field_add:ola.rdm.pid.PidStore.pid)
  return _internal_add_pid();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ola::rdm::pid::Pid >&
PidStore::pid() const {
  // @@protoc_insertion_point(field_list:ola.rdm.pid.PidStore.pid)
  return pid_;
}

// repeated .ola.rdm.pid.Manufacturer manufacturer = 2;
inline int PidStore::_internal_manufacturer_size() const {
  return manufacturer_.size();
}
inline int PidStore::manufacturer_size() const {
  return _internal_manufacturer_size();
}
inline void PidStore::clear_manufacturer() {
  manufacturer_.Clear();
}
inline ::ola::rdm::pid::Manufacturer* PidStore::mutable_manufacturer(int index) {
  // @@protoc_insertion_point(field_mutable:ola.rdm.pid.PidStore.manufacturer)
  return manufacturer_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ola::rdm::pid::Manufacturer >*
PidStore::mutable_manufacturer() {
  // @@protoc_insertion_point(field_mutable_list:ola.rdm.pid.PidStore.manufacturer)
  return &manufacturer_;
}
inline const ::ola::rdm::pid::Manufacturer& PidStore::_internal_manufacturer(int index) const {
  return manufacturer_.Get(index);
}
inline const ::ola::rdm::pid::Manufacturer& PidStore::manufacturer(int index) const {
  // @@protoc_insertion_point(field_get:ola.rdm.pid.PidStore.manufacturer)
  return _internal_manufacturer(index);
}
inline ::ola::rdm::pid::Manufacturer* PidStore::_internal_add_manufacturer() {
  return manufacturer_.Add();
}
inline ::ola::rdm::pid::Manufacturer* PidStore::add_manufacturer() {
  // @@protoc_insertion_point(field_add:ola.rdm.pid.PidStore.manufacturer)
  return _internal_add_manufacturer();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ola::rdm::pid::Manufacturer >&
PidStore::manufacturer() const {
  // @@protoc_insertion_point(field_list:ola.rdm.pid.PidStore.manufacturer)
  return manufacturer_;
}

// required uint64 version = 3;
inline bool PidStore::_internal_has_version() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PidStore::has_version() const {
  return _internal_has_version();
}
inline void PidStore::clear_version() {
  version_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PidStore::_internal_version() const {
  return version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PidStore::version() const {
  // @@protoc_insertion_point(field_get:ola.rdm.pid.PidStore.version)
  return _internal_version();
}
inline void PidStore::_internal_set_version(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  version_ = value;
}
inline void PidStore::set_version(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:ola.rdm.pid.PidStore.version)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pid
}  // namespace rdm
}  // namespace ola

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::ola::rdm::pid::SubDeviceRange> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ola::rdm::pid::SubDeviceRange>() {
  return ::ola::rdm::pid::SubDeviceRange_descriptor();
}
template <> struct is_proto_enum< ::ola::rdm::pid::FieldType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ola::rdm::pid::FieldType>() {
  return ::ola::rdm::pid::FieldType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Pids_2eproto
