// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Pids.proto

#include "Pids.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_Pids_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Field_Pids_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Pids_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FrameFormat_Pids_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Pids_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LabeledValue_Pids_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Pids_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Manufacturer_Pids_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Pids_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Pid_Pids_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Pids_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Range_Pids_2eproto;
namespace ola {
namespace rdm {
namespace pid {
class LabeledValueDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LabeledValue> _instance;
} _LabeledValue_default_instance_;
class RangeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Range> _instance;
} _Range_default_instance_;
class FieldDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Field> _instance;
} _Field_default_instance_;
class FrameFormatDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FrameFormat> _instance;
} _FrameFormat_default_instance_;
class PidDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Pid> _instance;
} _Pid_default_instance_;
class ManufacturerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Manufacturer> _instance;
} _Manufacturer_default_instance_;
class PidStoreDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PidStore> _instance;
} _PidStore_default_instance_;
}  // namespace pid
}  // namespace rdm
}  // namespace ola
static void InitDefaultsscc_info_Field_Pids_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ola::rdm::pid::_Field_default_instance_;
    new (ptr) ::ola::rdm::pid::Field();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ola::rdm::pid::Field::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Field_Pids_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Field_Pids_2eproto}, {
      &scc_info_LabeledValue_Pids_2eproto.base,
      &scc_info_Range_Pids_2eproto.base,}};

static void InitDefaultsscc_info_FrameFormat_Pids_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ola::rdm::pid::_FrameFormat_default_instance_;
    new (ptr) ::ola::rdm::pid::FrameFormat();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ola::rdm::pid::FrameFormat::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FrameFormat_Pids_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FrameFormat_Pids_2eproto}, {
      &scc_info_Field_Pids_2eproto.base,}};

static void InitDefaultsscc_info_LabeledValue_Pids_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ola::rdm::pid::_LabeledValue_default_instance_;
    new (ptr) ::ola::rdm::pid::LabeledValue();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ola::rdm::pid::LabeledValue::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LabeledValue_Pids_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LabeledValue_Pids_2eproto}, {}};

static void InitDefaultsscc_info_Manufacturer_Pids_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ola::rdm::pid::_Manufacturer_default_instance_;
    new (ptr) ::ola::rdm::pid::Manufacturer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ola::rdm::pid::Manufacturer::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Manufacturer_Pids_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Manufacturer_Pids_2eproto}, {
      &scc_info_Pid_Pids_2eproto.base,}};

static void InitDefaultsscc_info_Pid_Pids_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ola::rdm::pid::_Pid_default_instance_;
    new (ptr) ::ola::rdm::pid::Pid();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ola::rdm::pid::Pid::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Pid_Pids_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Pid_Pids_2eproto}, {
      &scc_info_FrameFormat_Pids_2eproto.base,}};

static void InitDefaultsscc_info_PidStore_Pids_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ola::rdm::pid::_PidStore_default_instance_;
    new (ptr) ::ola::rdm::pid::PidStore();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ola::rdm::pid::PidStore::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PidStore_Pids_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PidStore_Pids_2eproto}, {
      &scc_info_Pid_Pids_2eproto.base,
      &scc_info_Manufacturer_Pids_2eproto.base,}};

static void InitDefaultsscc_info_Range_Pids_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ola::rdm::pid::_Range_default_instance_;
    new (ptr) ::ola::rdm::pid::Range();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ola::rdm::pid::Range::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Range_Pids_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Range_Pids_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Pids_2eproto[7];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_Pids_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Pids_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_Pids_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::ola::rdm::pid::LabeledValue, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ola::rdm::pid::LabeledValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ola::rdm::pid::LabeledValue, value_),
  PROTOBUF_FIELD_OFFSET(::ola::rdm::pid::LabeledValue, label_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::ola::rdm::pid::Range, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ola::rdm::pid::Range, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ola::rdm::pid::Range, min_),
  PROTOBUF_FIELD_OFFSET(::ola::rdm::pid::Range, max_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ola::rdm::pid::Field, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ola::rdm::pid::Field, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ola::rdm::pid::Field, type_),
  PROTOBUF_FIELD_OFFSET(::ola::rdm::pid::Field, name_),
  PROTOBUF_FIELD_OFFSET(::ola::rdm::pid::Field, min_size_),
  PROTOBUF_FIELD_OFFSET(::ola::rdm::pid::Field, max_size_),
  PROTOBUF_FIELD_OFFSET(::ola::rdm::pid::Field, multiplier_),
  PROTOBUF_FIELD_OFFSET(::ola::rdm::pid::Field, label_),
  PROTOBUF_FIELD_OFFSET(::ola::rdm::pid::Field, range_),
  PROTOBUF_FIELD_OFFSET(::ola::rdm::pid::Field, field_),
  4,
  0,
  1,
  2,
  3,
  ~0u,
  ~0u,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ola::rdm::pid::FrameFormat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ola::rdm::pid::FrameFormat, field_),
  PROTOBUF_FIELD_OFFSET(::ola::rdm::pid::Pid, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ola::rdm::pid::Pid, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ola::rdm::pid::Pid, name_),
  PROTOBUF_FIELD_OFFSET(::ola::rdm::pid::Pid, value_),
  PROTOBUF_FIELD_OFFSET(::ola::rdm::pid::Pid, get_request_),
  PROTOBUF_FIELD_OFFSET(::ola::rdm::pid::Pid, get_response_),
  PROTOBUF_FIELD_OFFSET(::ola::rdm::pid::Pid, set_request_),
  PROTOBUF_FIELD_OFFSET(::ola::rdm::pid::Pid, set_response_),
  PROTOBUF_FIELD_OFFSET(::ola::rdm::pid::Pid, get_sub_device_range_),
  PROTOBUF_FIELD_OFFSET(::ola::rdm::pid::Pid, set_sub_device_range_),
  PROTOBUF_FIELD_OFFSET(::ola::rdm::pid::Pid, discovery_request_),
  PROTOBUF_FIELD_OFFSET(::ola::rdm::pid::Pid, discovery_response_),
  PROTOBUF_FIELD_OFFSET(::ola::rdm::pid::Pid, discovery_sub_device_range_),
  0,
  7,
  1,
  2,
  3,
  4,
  9,
  10,
  5,
  6,
  8,
  PROTOBUF_FIELD_OFFSET(::ola::rdm::pid::Manufacturer, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ola::rdm::pid::Manufacturer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ola::rdm::pid::Manufacturer, manufacturer_id_),
  PROTOBUF_FIELD_OFFSET(::ola::rdm::pid::Manufacturer, manufacturer_name_),
  PROTOBUF_FIELD_OFFSET(::ola::rdm::pid::Manufacturer, pid_),
  1,
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::ola::rdm::pid::PidStore, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ola::rdm::pid::PidStore, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ola::rdm::pid::PidStore, pid_),
  PROTOBUF_FIELD_OFFSET(::ola::rdm::pid::PidStore, manufacturer_),
  PROTOBUF_FIELD_OFFSET(::ola::rdm::pid::PidStore, version_),
  ~0u,
  ~0u,
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::ola::rdm::pid::LabeledValue)},
  { 9, 16, sizeof(::ola::rdm::pid::Range)},
  { 18, 31, sizeof(::ola::rdm::pid::Field)},
  { 39, -1, sizeof(::ola::rdm::pid::FrameFormat)},
  { 45, 61, sizeof(::ola::rdm::pid::Pid)},
  { 72, 80, sizeof(::ola::rdm::pid::Manufacturer)},
  { 83, 91, sizeof(::ola::rdm::pid::PidStore)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ola::rdm::pid::_LabeledValue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ola::rdm::pid::_Range_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ola::rdm::pid::_Field_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ola::rdm::pid::_FrameFormat_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ola::rdm::pid::_Pid_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ola::rdm::pid::_Manufacturer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ola::rdm::pid::_PidStore_default_instance_),
};

const char descriptor_table_protodef_Pids_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\nPids.proto\022\013ola.rdm.pid\",\n\014LabeledValu"
  "e\022\r\n\005value\030\001 \002(\003\022\r\n\005label\030\002 \002(\t\"!\n\005Range"
  "\022\013\n\003min\030\001 \002(\003\022\013\n\003max\030\002 \002(\003\"\343\001\n\005Field\022$\n\004"
  "type\030\001 \002(\0162\026.ola.rdm.pid.FieldType\022\014\n\004na"
  "me\030\002 \002(\t\022\020\n\010min_size\030\003 \001(\r\022\020\n\010max_size\030\004"
  " \001(\r\022\022\n\nmultiplier\030\005 \001(\021\022(\n\005label\030\006 \003(\0132"
  "\031.ola.rdm.pid.LabeledValue\022!\n\005range\030\007 \003("
  "\0132\022.ola.rdm.pid.Range\022!\n\005field\030\010 \003(\0132\022.o"
  "la.rdm.pid.Field\"0\n\013FrameFormat\022!\n\005field"
  "\030\001 \003(\0132\022.ola.rdm.pid.Field\"\202\004\n\003Pid\022\014\n\004na"
  "me\030\001 \002(\t\022\r\n\005value\030\002 \002(\r\022-\n\013get_request\030\003"
  " \001(\0132\030.ola.rdm.pid.FrameFormat\022.\n\014get_re"
  "sponse\030\004 \001(\0132\030.ola.rdm.pid.FrameFormat\022-"
  "\n\013set_request\030\005 \001(\0132\030.ola.rdm.pid.FrameF"
  "ormat\022.\n\014set_response\030\006 \001(\0132\030.ola.rdm.pi"
  "d.FrameFormat\0229\n\024get_sub_device_range\030\007 "
  "\001(\0162\033.ola.rdm.pid.SubDeviceRange\0229\n\024set_"
  "sub_device_range\030\010 \001(\0162\033.ola.rdm.pid.Sub"
  "DeviceRange\0223\n\021discovery_request\030\t \001(\0132\030"
  ".ola.rdm.pid.FrameFormat\0224\n\022discovery_re"
  "sponse\030\n \001(\0132\030.ola.rdm.pid.FrameFormat\022\?"
  "\n\032discovery_sub_device_range\030\013 \001(\0162\033.ola"
  ".rdm.pid.SubDeviceRange\"a\n\014Manufacturer\022"
  "\027\n\017manufacturer_id\030\001 \002(\r\022\031\n\021manufacturer"
  "_name\030\002 \002(\t\022\035\n\003pid\030\003 \003(\0132\020.ola.rdm.pid.P"
  "id\"k\n\010PidStore\022\035\n\003pid\030\001 \003(\0132\020.ola.rdm.pi"
  "d.Pid\022/\n\014manufacturer\030\002 \003(\0132\031.ola.rdm.pi"
  "d.Manufacturer\022\017\n\007version\030\003 \002(\004*h\n\016SubDe"
  "viceRange\022\017\n\013ROOT_DEVICE\020\001\022\031\n\025ROOT_OR_AL"
  "L_SUBDEVICE\020\002\022\025\n\021ROOT_OR_SUBDEVICE\020\003\022\023\n\017"
  "ONLY_SUBDEVICES\020\004*\213\001\n\tFieldType\022\010\n\004BOOL\020"
  "\001\022\t\n\005UINT8\020\002\022\n\n\006UINT16\020\003\022\n\n\006UINT32\020\004\022\n\n\006"
  "STRING\020\005\022\t\n\005GROUP\020\006\022\010\n\004INT8\020\007\022\t\n\005INT16\020\010"
  "\022\t\n\005INT32\020\t\022\010\n\004IPV4\020\n\022\007\n\003UID\020\013\022\007\n\003MAC\020\014"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_Pids_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_Pids_2eproto_sccs[7] = {
  &scc_info_Field_Pids_2eproto.base,
  &scc_info_FrameFormat_Pids_2eproto.base,
  &scc_info_LabeledValue_Pids_2eproto.base,
  &scc_info_Manufacturer_Pids_2eproto.base,
  &scc_info_Pid_Pids_2eproto.base,
  &scc_info_PidStore_Pids_2eproto.base,
  &scc_info_Range_Pids_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Pids_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Pids_2eproto = {
  false, false, descriptor_table_protodef_Pids_2eproto, "Pids.proto", 1359,
  &descriptor_table_Pids_2eproto_once, descriptor_table_Pids_2eproto_sccs, descriptor_table_Pids_2eproto_deps, 7, 0,
  schemas, file_default_instances, TableStruct_Pids_2eproto::offsets,
  file_level_metadata_Pids_2eproto, 7, file_level_enum_descriptors_Pids_2eproto, file_level_service_descriptors_Pids_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_Pids_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_Pids_2eproto)), true);
namespace ola {
namespace rdm {
namespace pid {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SubDeviceRange_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Pids_2eproto);
  return file_level_enum_descriptors_Pids_2eproto[0];
}
bool SubDeviceRange_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FieldType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Pids_2eproto);
  return file_level_enum_descriptors_Pids_2eproto[1];
}
bool FieldType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void LabeledValue::InitAsDefaultInstance() {
}
class LabeledValue::_Internal {
 public:
  using HasBits = decltype(std::declval<LabeledValue>()._has_bits_);
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_label(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

LabeledValue::LabeledValue(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ola.rdm.pid.LabeledValue)
}
LabeledValue::LabeledValue(const LabeledValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_label()) {
    label_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_label(),
      GetArena());
  }
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:ola.rdm.pid.LabeledValue)
}

void LabeledValue::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LabeledValue_Pids_2eproto.base);
  label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_ = PROTOBUF_LONGLONG(0);
}

LabeledValue::~LabeledValue() {
  // @@protoc_insertion_point(destructor:ola.rdm.pid.LabeledValue)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LabeledValue::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  label_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LabeledValue::ArenaDtor(void* object) {
  LabeledValue* _this = reinterpret_cast< LabeledValue* >(object);
  (void)_this;
}
void LabeledValue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LabeledValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LabeledValue& LabeledValue::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LabeledValue_Pids_2eproto.base);
  return *internal_default_instance();
}


void LabeledValue::Clear() {
// @@protoc_insertion_point(message_clear_start:ola.rdm.pid.LabeledValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    label_.ClearNonDefaultToEmpty();
  }
  value_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LabeledValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int64 value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_value(&has_bits);
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string label = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_label();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ola.rdm.pid.LabeledValue.label");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LabeledValue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ola.rdm.pid.LabeledValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 value = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_value(), target);
  }

  // required string label = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_label().data(), static_cast<int>(this->_internal_label().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ola.rdm.pid.LabeledValue.label");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_label(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ola.rdm.pid.LabeledValue)
  return target;
}

size_t LabeledValue::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ola.rdm.pid.LabeledValue)
  size_t total_size = 0;

  if (_internal_has_label()) {
    // required string label = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_label());
  }

  if (_internal_has_value()) {
    // required int64 value = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_value());
  }

  return total_size;
}
size_t LabeledValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ola.rdm.pid.LabeledValue)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string label = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_label());

    // required int64 value = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_value());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LabeledValue::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ola.rdm.pid.LabeledValue)
  GOOGLE_DCHECK_NE(&from, this);
  const LabeledValue* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LabeledValue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ola.rdm.pid.LabeledValue)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ola.rdm.pid.LabeledValue)
    MergeFrom(*source);
  }
}

void LabeledValue::MergeFrom(const LabeledValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ola.rdm.pid.LabeledValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_label(from._internal_label());
    }
    if (cached_has_bits & 0x00000002u) {
      value_ = from.value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LabeledValue::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ola.rdm.pid.LabeledValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LabeledValue::CopyFrom(const LabeledValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ola.rdm.pid.LabeledValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LabeledValue::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void LabeledValue::InternalSwap(LabeledValue* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  label_.Swap(&other->label_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LabeledValue::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Range::InitAsDefaultInstance() {
}
class Range::_Internal {
 public:
  using HasBits = decltype(std::declval<Range>()._has_bits_);
  static void set_has_min(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_max(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

Range::Range(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ola.rdm.pid.Range)
}
Range::Range(const Range& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&min_, &from.min_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_) -
    reinterpret_cast<char*>(&min_)) + sizeof(max_));
  // @@protoc_insertion_point(copy_constructor:ola.rdm.pid.Range)
}

void Range::SharedCtor() {
  ::memset(&min_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_) -
      reinterpret_cast<char*>(&min_)) + sizeof(max_));
}

Range::~Range() {
  // @@protoc_insertion_point(destructor:ola.rdm.pid.Range)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Range::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Range::ArenaDtor(void* object) {
  Range* _this = reinterpret_cast< Range* >(object);
  (void)_this;
}
void Range::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Range::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Range& Range::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Range_Pids_2eproto.base);
  return *internal_default_instance();
}


void Range::Clear() {
// @@protoc_insertion_point(message_clear_start:ola.rdm.pid.Range)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&min_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_) -
        reinterpret_cast<char*>(&min_)) + sizeof(max_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Range::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int64 min = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_min(&has_bits);
          min_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int64 max = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_max(&has_bits);
          max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Range::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ola.rdm.pid.Range)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 min = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_min(), target);
  }

  // required int64 max = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_max(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ola.rdm.pid.Range)
  return target;
}

size_t Range::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ola.rdm.pid.Range)
  size_t total_size = 0;

  if (_internal_has_min()) {
    // required int64 min = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_min());
  }

  if (_internal_has_max()) {
    // required int64 max = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_max());
  }

  return total_size;
}
size_t Range::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ola.rdm.pid.Range)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int64 min = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_min());

    // required int64 max = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_max());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Range::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ola.rdm.pid.Range)
  GOOGLE_DCHECK_NE(&from, this);
  const Range* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Range>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ola.rdm.pid.Range)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ola.rdm.pid.Range)
    MergeFrom(*source);
  }
}

void Range::MergeFrom(const Range& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ola.rdm.pid.Range)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      min_ = from.min_;
    }
    if (cached_has_bits & 0x00000002u) {
      max_ = from.max_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Range::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ola.rdm.pid.Range)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Range::CopyFrom(const Range& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ola.rdm.pid.Range)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Range::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void Range::InternalSwap(Range* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Range, max_)
      + sizeof(Range::max_)
      - PROTOBUF_FIELD_OFFSET(Range, min_)>(
          reinterpret_cast<char*>(&min_),
          reinterpret_cast<char*>(&other->min_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Range::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Field::InitAsDefaultInstance() {
}
class Field::_Internal {
 public:
  using HasBits = decltype(std::declval<Field>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_min_size(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_max_size(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_multiplier(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000011) ^ 0x00000011) != 0;
  }
};

Field::Field(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  label_(arena),
  range_(arena),
  field_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ola.rdm.pid.Field)
}
Field::Field(const Field& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      label_(from.label_),
      range_(from.range_),
      field_(from.field_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  ::memcpy(&min_size_, &from.min_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&min_size_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:ola.rdm.pid.Field)
}

void Field::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Field_Pids_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&min_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&multiplier_) -
      reinterpret_cast<char*>(&min_size_)) + sizeof(multiplier_));
  type_ = 1;
}

Field::~Field() {
  // @@protoc_insertion_point(destructor:ola.rdm.pid.Field)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Field::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Field::ArenaDtor(void* object) {
  Field* _this = reinterpret_cast< Field* >(object);
  (void)_this;
}
void Field::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Field::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Field& Field::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Field_Pids_2eproto.base);
  return *internal_default_instance();
}


void Field::Clear() {
// @@protoc_insertion_point(message_clear_start:ola.rdm.pid.Field)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  label_.Clear();
  range_.Clear();
  field_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&min_size_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&multiplier_) -
        reinterpret_cast<char*>(&min_size_)) + sizeof(multiplier_));
    type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Field::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .ola.rdm.pid.FieldType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ola::rdm::pid::FieldType_IsValid(val))) {
            _internal_set_type(static_cast<::ola::rdm::pid::FieldType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ola.rdm.pid.Field.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 min_size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_min_size(&has_bits);
          min_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 max_size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_max_size(&has_bits);
          max_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional sint32 multiplier = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_multiplier(&has_bits);
          multiplier_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ola.rdm.pid.LabeledValue label = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_label(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ola.rdm.pid.Range range = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_range(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ola.rdm.pid.Field field = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_field(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Field::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ola.rdm.pid.Field)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ola.rdm.pid.FieldType type = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // required string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ola.rdm.pid.Field.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // optional uint32 min_size = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_min_size(), target);
  }

  // optional uint32 max_size = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_max_size(), target);
  }

  // optional sint32 multiplier = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(5, this->_internal_multiplier(), target);
  }

  // repeated .ola.rdm.pid.LabeledValue label = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_label_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_label(i), target, stream);
  }

  // repeated .ola.rdm.pid.Range range = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_range_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_range(i), target, stream);
  }

  // repeated .ola.rdm.pid.Field field = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_field_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_field(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ola.rdm.pid.Field)
  return target;
}

size_t Field::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ola.rdm.pid.Field)
  size_t total_size = 0;

  if (_internal_has_name()) {
    // required string name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (_internal_has_type()) {
    // required .ola.rdm.pid.FieldType type = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  return total_size;
}
size_t Field::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ola.rdm.pid.Field)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000011) ^ 0x00000011) == 0) {  // All required fields are present.
    // required string name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());

    // required .ola.rdm.pid.FieldType type = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ola.rdm.pid.LabeledValue label = 6;
  total_size += 1UL * this->_internal_label_size();
  for (const auto& msg : this->label_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ola.rdm.pid.Range range = 7;
  total_size += 1UL * this->_internal_range_size();
  for (const auto& msg : this->range_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ola.rdm.pid.Field field = 8;
  total_size += 1UL * this->_internal_field_size();
  for (const auto& msg : this->field_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000eu) {
    // optional uint32 min_size = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_min_size());
    }

    // optional uint32 max_size = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_max_size());
    }

    // optional sint32 multiplier = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
          this->_internal_multiplier());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Field::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ola.rdm.pid.Field)
  GOOGLE_DCHECK_NE(&from, this);
  const Field* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Field>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ola.rdm.pid.Field)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ola.rdm.pid.Field)
    MergeFrom(*source);
  }
}

void Field::MergeFrom(const Field& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ola.rdm.pid.Field)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  label_.MergeFrom(from.label_);
  range_.MergeFrom(from.range_);
  field_.MergeFrom(from.field_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      min_size_ = from.min_size_;
    }
    if (cached_has_bits & 0x00000004u) {
      max_size_ = from.max_size_;
    }
    if (cached_has_bits & 0x00000008u) {
      multiplier_ = from.multiplier_;
    }
    if (cached_has_bits & 0x00000010u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Field::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ola.rdm.pid.Field)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Field::CopyFrom(const Field& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ola.rdm.pid.Field)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Field::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(label_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(range_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(field_)) return false;
  return true;
}

void Field::InternalSwap(Field* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  label_.InternalSwap(&other->label_);
  range_.InternalSwap(&other->range_);
  field_.InternalSwap(&other->field_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Field, multiplier_)
      + sizeof(Field::multiplier_)
      - PROTOBUF_FIELD_OFFSET(Field, min_size_)>(
          reinterpret_cast<char*>(&min_size_),
          reinterpret_cast<char*>(&other->min_size_));
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Field::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FrameFormat::InitAsDefaultInstance() {
}
class FrameFormat::_Internal {
 public:
};

FrameFormat::FrameFormat(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  field_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ola.rdm.pid.FrameFormat)
}
FrameFormat::FrameFormat(const FrameFormat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      field_(from.field_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ola.rdm.pid.FrameFormat)
}

void FrameFormat::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FrameFormat_Pids_2eproto.base);
}

FrameFormat::~FrameFormat() {
  // @@protoc_insertion_point(destructor:ola.rdm.pid.FrameFormat)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FrameFormat::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FrameFormat::ArenaDtor(void* object) {
  FrameFormat* _this = reinterpret_cast< FrameFormat* >(object);
  (void)_this;
}
void FrameFormat::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FrameFormat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FrameFormat& FrameFormat::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FrameFormat_Pids_2eproto.base);
  return *internal_default_instance();
}


void FrameFormat::Clear() {
// @@protoc_insertion_point(message_clear_start:ola.rdm.pid.FrameFormat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  field_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FrameFormat::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .ola.rdm.pid.Field field = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_field(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FrameFormat::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ola.rdm.pid.FrameFormat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ola.rdm.pid.Field field = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_field_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_field(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ola.rdm.pid.FrameFormat)
  return target;
}

size_t FrameFormat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ola.rdm.pid.FrameFormat)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ola.rdm.pid.Field field = 1;
  total_size += 1UL * this->_internal_field_size();
  for (const auto& msg : this->field_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FrameFormat::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ola.rdm.pid.FrameFormat)
  GOOGLE_DCHECK_NE(&from, this);
  const FrameFormat* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FrameFormat>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ola.rdm.pid.FrameFormat)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ola.rdm.pid.FrameFormat)
    MergeFrom(*source);
  }
}

void FrameFormat::MergeFrom(const FrameFormat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ola.rdm.pid.FrameFormat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  field_.MergeFrom(from.field_);
}

void FrameFormat::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ola.rdm.pid.FrameFormat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FrameFormat::CopyFrom(const FrameFormat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ola.rdm.pid.FrameFormat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrameFormat::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(field_)) return false;
  return true;
}

void FrameFormat::InternalSwap(FrameFormat* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  field_.InternalSwap(&other->field_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FrameFormat::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Pid::InitAsDefaultInstance() {
  ::ola::rdm::pid::_Pid_default_instance_._instance.get_mutable()->get_request_ = const_cast< ::ola::rdm::pid::FrameFormat*>(
      ::ola::rdm::pid::FrameFormat::internal_default_instance());
  ::ola::rdm::pid::_Pid_default_instance_._instance.get_mutable()->get_response_ = const_cast< ::ola::rdm::pid::FrameFormat*>(
      ::ola::rdm::pid::FrameFormat::internal_default_instance());
  ::ola::rdm::pid::_Pid_default_instance_._instance.get_mutable()->set_request_ = const_cast< ::ola::rdm::pid::FrameFormat*>(
      ::ola::rdm::pid::FrameFormat::internal_default_instance());
  ::ola::rdm::pid::_Pid_default_instance_._instance.get_mutable()->set_response_ = const_cast< ::ola::rdm::pid::FrameFormat*>(
      ::ola::rdm::pid::FrameFormat::internal_default_instance());
  ::ola::rdm::pid::_Pid_default_instance_._instance.get_mutable()->discovery_request_ = const_cast< ::ola::rdm::pid::FrameFormat*>(
      ::ola::rdm::pid::FrameFormat::internal_default_instance());
  ::ola::rdm::pid::_Pid_default_instance_._instance.get_mutable()->discovery_response_ = const_cast< ::ola::rdm::pid::FrameFormat*>(
      ::ola::rdm::pid::FrameFormat::internal_default_instance());
}
class Pid::_Internal {
 public:
  using HasBits = decltype(std::declval<Pid>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::ola::rdm::pid::FrameFormat& get_request(const Pid* msg);
  static void set_has_get_request(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::ola::rdm::pid::FrameFormat& get_response(const Pid* msg);
  static void set_has_get_response(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::ola::rdm::pid::FrameFormat& set_request(const Pid* msg);
  static void set_has_set_request(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::ola::rdm::pid::FrameFormat& set_response(const Pid* msg);
  static void set_has_set_response(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_get_sub_device_range(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_set_sub_device_range(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::ola::rdm::pid::FrameFormat& discovery_request(const Pid* msg);
  static void set_has_discovery_request(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::ola::rdm::pid::FrameFormat& discovery_response(const Pid* msg);
  static void set_has_discovery_response(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_discovery_sub_device_range(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000081) ^ 0x00000081) != 0;
  }
};

const ::ola::rdm::pid::FrameFormat&
Pid::_Internal::get_request(const Pid* msg) {
  return *msg->get_request_;
}
const ::ola::rdm::pid::FrameFormat&
Pid::_Internal::get_response(const Pid* msg) {
  return *msg->get_response_;
}
const ::ola::rdm::pid::FrameFormat&
Pid::_Internal::set_request(const Pid* msg) {
  return *msg->set_request_;
}
const ::ola::rdm::pid::FrameFormat&
Pid::_Internal::set_response(const Pid* msg) {
  return *msg->set_response_;
}
const ::ola::rdm::pid::FrameFormat&
Pid::_Internal::discovery_request(const Pid* msg) {
  return *msg->discovery_request_;
}
const ::ola::rdm::pid::FrameFormat&
Pid::_Internal::discovery_response(const Pid* msg) {
  return *msg->discovery_response_;
}
Pid::Pid(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ola.rdm.pid.Pid)
}
Pid::Pid(const Pid& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  if (from._internal_has_get_request()) {
    get_request_ = new ::ola::rdm::pid::FrameFormat(*from.get_request_);
  } else {
    get_request_ = nullptr;
  }
  if (from._internal_has_get_response()) {
    get_response_ = new ::ola::rdm::pid::FrameFormat(*from.get_response_);
  } else {
    get_response_ = nullptr;
  }
  if (from._internal_has_set_request()) {
    set_request_ = new ::ola::rdm::pid::FrameFormat(*from.set_request_);
  } else {
    set_request_ = nullptr;
  }
  if (from._internal_has_set_response()) {
    set_response_ = new ::ola::rdm::pid::FrameFormat(*from.set_response_);
  } else {
    set_response_ = nullptr;
  }
  if (from._internal_has_discovery_request()) {
    discovery_request_ = new ::ola::rdm::pid::FrameFormat(*from.discovery_request_);
  } else {
    discovery_request_ = nullptr;
  }
  if (from._internal_has_discovery_response()) {
    discovery_response_ = new ::ola::rdm::pid::FrameFormat(*from.discovery_response_);
  } else {
    discovery_response_ = nullptr;
  }
  ::memcpy(&value_, &from.value_,
    static_cast<size_t>(reinterpret_cast<char*>(&set_sub_device_range_) -
    reinterpret_cast<char*>(&value_)) + sizeof(set_sub_device_range_));
  // @@protoc_insertion_point(copy_constructor:ola.rdm.pid.Pid)
}

void Pid::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Pid_Pids_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&get_request_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&get_request_)) + sizeof(value_));
  discovery_sub_device_range_ = 1;
  get_sub_device_range_ = 1;
  set_sub_device_range_ = 1;
}

Pid::~Pid() {
  // @@protoc_insertion_point(destructor:ola.rdm.pid.Pid)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Pid::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete get_request_;
  if (this != internal_default_instance()) delete get_response_;
  if (this != internal_default_instance()) delete set_request_;
  if (this != internal_default_instance()) delete set_response_;
  if (this != internal_default_instance()) delete discovery_request_;
  if (this != internal_default_instance()) delete discovery_response_;
}

void Pid::ArenaDtor(void* object) {
  Pid* _this = reinterpret_cast< Pid* >(object);
  (void)_this;
}
void Pid::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Pid::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Pid& Pid::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Pid_Pids_2eproto.base);
  return *internal_default_instance();
}


void Pid::Clear() {
// @@protoc_insertion_point(message_clear_start:ola.rdm.pid.Pid)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(get_request_ != nullptr);
      get_request_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(get_response_ != nullptr);
      get_response_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(set_request_ != nullptr);
      set_request_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(set_response_ != nullptr);
      set_response_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(discovery_request_ != nullptr);
      discovery_request_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(discovery_response_ != nullptr);
      discovery_response_->Clear();
    }
  }
  value_ = 0u;
  if (cached_has_bits & 0x00000700u) {
    discovery_sub_device_range_ = 1;
    get_sub_device_range_ = 1;
    set_sub_device_range_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Pid::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ola.rdm.pid.Pid.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_value(&has_bits);
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ola.rdm.pid.FrameFormat get_request = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ola.rdm.pid.FrameFormat get_response = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ola.rdm.pid.FrameFormat set_request = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_set_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ola.rdm.pid.FrameFormat set_response = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_set_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ola.rdm.pid.SubDeviceRange get_sub_device_range = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ola::rdm::pid::SubDeviceRange_IsValid(val))) {
            _internal_set_get_sub_device_range(static_cast<::ola::rdm::pid::SubDeviceRange>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(7, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .ola.rdm.pid.SubDeviceRange set_sub_device_range = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ola::rdm::pid::SubDeviceRange_IsValid(val))) {
            _internal_set_set_sub_device_range(static_cast<::ola::rdm::pid::SubDeviceRange>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(8, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .ola.rdm.pid.FrameFormat discovery_request = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_discovery_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ola.rdm.pid.FrameFormat discovery_response = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_discovery_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ola.rdm.pid.SubDeviceRange discovery_sub_device_range = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ola::rdm::pid::SubDeviceRange_IsValid(val))) {
            _internal_set_discovery_sub_device_range(static_cast<::ola::rdm::pid::SubDeviceRange>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(11, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Pid::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ola.rdm.pid.Pid)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ola.rdm.pid.Pid.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // required uint32 value = 2;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_value(), target);
  }

  // optional .ola.rdm.pid.FrameFormat get_request = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::get_request(this), target, stream);
  }

  // optional .ola.rdm.pid.FrameFormat get_response = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::get_response(this), target, stream);
  }

  // optional .ola.rdm.pid.FrameFormat set_request = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::set_request(this), target, stream);
  }

  // optional .ola.rdm.pid.FrameFormat set_response = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::set_response(this), target, stream);
  }

  // optional .ola.rdm.pid.SubDeviceRange get_sub_device_range = 7;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_get_sub_device_range(), target);
  }

  // optional .ola.rdm.pid.SubDeviceRange set_sub_device_range = 8;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_set_sub_device_range(), target);
  }

  // optional .ola.rdm.pid.FrameFormat discovery_request = 9;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::discovery_request(this), target, stream);
  }

  // optional .ola.rdm.pid.FrameFormat discovery_response = 10;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::discovery_response(this), target, stream);
  }

  // optional .ola.rdm.pid.SubDeviceRange discovery_sub_device_range = 11;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      11, this->_internal_discovery_sub_device_range(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ola.rdm.pid.Pid)
  return target;
}

size_t Pid::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ola.rdm.pid.Pid)
  size_t total_size = 0;

  if (_internal_has_name()) {
    // required string name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (_internal_has_value()) {
    // required uint32 value = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_value());
  }

  return total_size;
}
size_t Pid::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ola.rdm.pid.Pid)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000081) ^ 0x00000081) == 0) {  // All required fields are present.
    // required string name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());

    // required uint32 value = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_value());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007eu) {
    // optional .ola.rdm.pid.FrameFormat get_request = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *get_request_);
    }

    // optional .ola.rdm.pid.FrameFormat get_response = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *get_response_);
    }

    // optional .ola.rdm.pid.FrameFormat set_request = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *set_request_);
    }

    // optional .ola.rdm.pid.FrameFormat set_response = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *set_response_);
    }

    // optional .ola.rdm.pid.FrameFormat discovery_request = 9;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *discovery_request_);
    }

    // optional .ola.rdm.pid.FrameFormat discovery_response = 10;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *discovery_response_);
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional .ola.rdm.pid.SubDeviceRange discovery_sub_device_range = 11;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_discovery_sub_device_range());
    }

    // optional .ola.rdm.pid.SubDeviceRange get_sub_device_range = 7;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_get_sub_device_range());
    }

    // optional .ola.rdm.pid.SubDeviceRange set_sub_device_range = 8;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_set_sub_device_range());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Pid::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ola.rdm.pid.Pid)
  GOOGLE_DCHECK_NE(&from, this);
  const Pid* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Pid>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ola.rdm.pid.Pid)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ola.rdm.pid.Pid)
    MergeFrom(*source);
  }
}

void Pid::MergeFrom(const Pid& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ola.rdm.pid.Pid)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_get_request()->::ola::rdm::pid::FrameFormat::MergeFrom(from._internal_get_request());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_get_response()->::ola::rdm::pid::FrameFormat::MergeFrom(from._internal_get_response());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_set_request()->::ola::rdm::pid::FrameFormat::MergeFrom(from._internal_set_request());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_set_response()->::ola::rdm::pid::FrameFormat::MergeFrom(from._internal_set_response());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_discovery_request()->::ola::rdm::pid::FrameFormat::MergeFrom(from._internal_discovery_request());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_discovery_response()->::ola::rdm::pid::FrameFormat::MergeFrom(from._internal_discovery_response());
    }
    if (cached_has_bits & 0x00000080u) {
      value_ = from.value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      discovery_sub_device_range_ = from.discovery_sub_device_range_;
    }
    if (cached_has_bits & 0x00000200u) {
      get_sub_device_range_ = from.get_sub_device_range_;
    }
    if (cached_has_bits & 0x00000400u) {
      set_sub_device_range_ = from.set_sub_device_range_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Pid::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ola.rdm.pid.Pid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pid::CopyFrom(const Pid& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ola.rdm.pid.Pid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pid::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_get_request()) {
    if (!get_request_->IsInitialized()) return false;
  }
  if (_internal_has_get_response()) {
    if (!get_response_->IsInitialized()) return false;
  }
  if (_internal_has_set_request()) {
    if (!set_request_->IsInitialized()) return false;
  }
  if (_internal_has_set_response()) {
    if (!set_response_->IsInitialized()) return false;
  }
  if (_internal_has_discovery_request()) {
    if (!discovery_request_->IsInitialized()) return false;
  }
  if (_internal_has_discovery_response()) {
    if (!discovery_response_->IsInitialized()) return false;
  }
  return true;
}

void Pid::InternalSwap(Pid* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Pid, value_)
      + sizeof(Pid::value_)
      - PROTOBUF_FIELD_OFFSET(Pid, get_request_)>(
          reinterpret_cast<char*>(&get_request_),
          reinterpret_cast<char*>(&other->get_request_));
  swap(discovery_sub_device_range_, other->discovery_sub_device_range_);
  swap(get_sub_device_range_, other->get_sub_device_range_);
  swap(set_sub_device_range_, other->set_sub_device_range_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Pid::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Manufacturer::InitAsDefaultInstance() {
}
class Manufacturer::_Internal {
 public:
  using HasBits = decltype(std::declval<Manufacturer>()._has_bits_);
  static void set_has_manufacturer_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_manufacturer_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

Manufacturer::Manufacturer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  pid_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ola.rdm.pid.Manufacturer)
}
Manufacturer::Manufacturer(const Manufacturer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      pid_(from.pid_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  manufacturer_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_manufacturer_name()) {
    manufacturer_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_manufacturer_name(),
      GetArena());
  }
  manufacturer_id_ = from.manufacturer_id_;
  // @@protoc_insertion_point(copy_constructor:ola.rdm.pid.Manufacturer)
}

void Manufacturer::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Manufacturer_Pids_2eproto.base);
  manufacturer_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  manufacturer_id_ = 0u;
}

Manufacturer::~Manufacturer() {
  // @@protoc_insertion_point(destructor:ola.rdm.pid.Manufacturer)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Manufacturer::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  manufacturer_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Manufacturer::ArenaDtor(void* object) {
  Manufacturer* _this = reinterpret_cast< Manufacturer* >(object);
  (void)_this;
}
void Manufacturer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Manufacturer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Manufacturer& Manufacturer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Manufacturer_Pids_2eproto.base);
  return *internal_default_instance();
}


void Manufacturer::Clear() {
// @@protoc_insertion_point(message_clear_start:ola.rdm.pid.Manufacturer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pid_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    manufacturer_name_.ClearNonDefaultToEmpty();
  }
  manufacturer_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Manufacturer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 manufacturer_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_manufacturer_id(&has_bits);
          manufacturer_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string manufacturer_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_manufacturer_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ola.rdm.pid.Manufacturer.manufacturer_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ola.rdm.pid.Pid pid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pid(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Manufacturer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ola.rdm.pid.Manufacturer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 manufacturer_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_manufacturer_id(), target);
  }

  // required string manufacturer_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_manufacturer_name().data(), static_cast<int>(this->_internal_manufacturer_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ola.rdm.pid.Manufacturer.manufacturer_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_manufacturer_name(), target);
  }

  // repeated .ola.rdm.pid.Pid pid = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_pid_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_pid(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ola.rdm.pid.Manufacturer)
  return target;
}

size_t Manufacturer::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ola.rdm.pid.Manufacturer)
  size_t total_size = 0;

  if (_internal_has_manufacturer_name()) {
    // required string manufacturer_name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_manufacturer_name());
  }

  if (_internal_has_manufacturer_id()) {
    // required uint32 manufacturer_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_manufacturer_id());
  }

  return total_size;
}
size_t Manufacturer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ola.rdm.pid.Manufacturer)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string manufacturer_name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_manufacturer_name());

    // required uint32 manufacturer_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_manufacturer_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ola.rdm.pid.Pid pid = 3;
  total_size += 1UL * this->_internal_pid_size();
  for (const auto& msg : this->pid_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Manufacturer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ola.rdm.pid.Manufacturer)
  GOOGLE_DCHECK_NE(&from, this);
  const Manufacturer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Manufacturer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ola.rdm.pid.Manufacturer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ola.rdm.pid.Manufacturer)
    MergeFrom(*source);
  }
}

void Manufacturer::MergeFrom(const Manufacturer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ola.rdm.pid.Manufacturer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pid_.MergeFrom(from.pid_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_manufacturer_name(from._internal_manufacturer_name());
    }
    if (cached_has_bits & 0x00000002u) {
      manufacturer_id_ = from.manufacturer_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Manufacturer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ola.rdm.pid.Manufacturer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Manufacturer::CopyFrom(const Manufacturer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ola.rdm.pid.Manufacturer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Manufacturer::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(pid_)) return false;
  return true;
}

void Manufacturer::InternalSwap(Manufacturer* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  pid_.InternalSwap(&other->pid_);
  manufacturer_name_.Swap(&other->manufacturer_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(manufacturer_id_, other->manufacturer_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Manufacturer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PidStore::InitAsDefaultInstance() {
}
class PidStore::_Internal {
 public:
  using HasBits = decltype(std::declval<PidStore>()._has_bits_);
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

PidStore::PidStore(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  pid_(arena),
  manufacturer_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ola.rdm.pid.PidStore)
}
PidStore::PidStore(const PidStore& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      pid_(from.pid_),
      manufacturer_(from.manufacturer_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  version_ = from.version_;
  // @@protoc_insertion_point(copy_constructor:ola.rdm.pid.PidStore)
}

void PidStore::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PidStore_Pids_2eproto.base);
  version_ = PROTOBUF_ULONGLONG(0);
}

PidStore::~PidStore() {
  // @@protoc_insertion_point(destructor:ola.rdm.pid.PidStore)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PidStore::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PidStore::ArenaDtor(void* object) {
  PidStore* _this = reinterpret_cast< PidStore* >(object);
  (void)_this;
}
void PidStore::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PidStore::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PidStore& PidStore::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PidStore_Pids_2eproto.base);
  return *internal_default_instance();
}


void PidStore::Clear() {
// @@protoc_insertion_point(message_clear_start:ola.rdm.pid.PidStore)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pid_.Clear();
  manufacturer_.Clear();
  version_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PidStore::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .ola.rdm.pid.Pid pid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pid(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ola.rdm.pid.Manufacturer manufacturer = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_manufacturer(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // required uint64 version = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_version(&has_bits);
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PidStore::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ola.rdm.pid.PidStore)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ola.rdm.pid.Pid pid = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_pid_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_pid(i), target, stream);
  }

  // repeated .ola.rdm.pid.Manufacturer manufacturer = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_manufacturer_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_manufacturer(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // required uint64 version = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ola.rdm.pid.PidStore)
  return target;
}

size_t PidStore::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ola.rdm.pid.PidStore)
  size_t total_size = 0;

  // required uint64 version = 3;
  if (_internal_has_version()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_version());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ola.rdm.pid.Pid pid = 1;
  total_size += 1UL * this->_internal_pid_size();
  for (const auto& msg : this->pid_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ola.rdm.pid.Manufacturer manufacturer = 2;
  total_size += 1UL * this->_internal_manufacturer_size();
  for (const auto& msg : this->manufacturer_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PidStore::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ola.rdm.pid.PidStore)
  GOOGLE_DCHECK_NE(&from, this);
  const PidStore* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PidStore>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ola.rdm.pid.PidStore)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ola.rdm.pid.PidStore)
    MergeFrom(*source);
  }
}

void PidStore::MergeFrom(const PidStore& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ola.rdm.pid.PidStore)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pid_.MergeFrom(from.pid_);
  manufacturer_.MergeFrom(from.manufacturer_);
  if (from._internal_has_version()) {
    _internal_set_version(from._internal_version());
  }
}

void PidStore::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ola.rdm.pid.PidStore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PidStore::CopyFrom(const PidStore& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ola.rdm.pid.PidStore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PidStore::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(pid_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(manufacturer_)) return false;
  return true;
}

void PidStore::InternalSwap(PidStore* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  pid_.InternalSwap(&other->pid_);
  manufacturer_.InternalSwap(&other->manufacturer_);
  swap(version_, other->version_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PidStore::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace pid
}  // namespace rdm
}  // namespace ola
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ola::rdm::pid::LabeledValue* Arena::CreateMaybeMessage< ::ola::rdm::pid::LabeledValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ola::rdm::pid::LabeledValue >(arena);
}
template<> PROTOBUF_NOINLINE ::ola::rdm::pid::Range* Arena::CreateMaybeMessage< ::ola::rdm::pid::Range >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ola::rdm::pid::Range >(arena);
}
template<> PROTOBUF_NOINLINE ::ola::rdm::pid::Field* Arena::CreateMaybeMessage< ::ola::rdm::pid::Field >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ola::rdm::pid::Field >(arena);
}
template<> PROTOBUF_NOINLINE ::ola::rdm::pid::FrameFormat* Arena::CreateMaybeMessage< ::ola::rdm::pid::FrameFormat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ola::rdm::pid::FrameFormat >(arena);
}
template<> PROTOBUF_NOINLINE ::ola::rdm::pid::Pid* Arena::CreateMaybeMessage< ::ola::rdm::pid::Pid >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ola::rdm::pid::Pid >(arena);
}
template<> PROTOBUF_NOINLINE ::ola::rdm::pid::Manufacturer* Arena::CreateMaybeMessage< ::ola::rdm::pid::Manufacturer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ola::rdm::pid::Manufacturer >(arena);
}
template<> PROTOBUF_NOINLINE ::ola::rdm::pid::PidStore* Arena::CreateMaybeMessage< ::ola::rdm::pid::PidStore >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ola::rdm::pid::PidStore >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
