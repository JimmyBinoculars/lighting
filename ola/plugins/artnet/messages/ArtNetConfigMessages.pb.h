// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ArtNetConfigMessages.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ArtNetConfigMessages_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ArtNetConfigMessages_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ArtNetConfigMessages_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ArtNetConfigMessages_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ArtNetConfigMessages_2eproto;
namespace ola {
namespace plugin {
namespace artnet {
class NodeListReply;
class NodeListReplyDefaultTypeInternal;
extern NodeListReplyDefaultTypeInternal _NodeListReply_default_instance_;
class NodeListRequest;
class NodeListRequestDefaultTypeInternal;
extern NodeListRequestDefaultTypeInternal _NodeListRequest_default_instance_;
class OptionsReply;
class OptionsReplyDefaultTypeInternal;
extern OptionsReplyDefaultTypeInternal _OptionsReply_default_instance_;
class OptionsRequest;
class OptionsRequestDefaultTypeInternal;
extern OptionsRequestDefaultTypeInternal _OptionsRequest_default_instance_;
class OutputNode;
class OutputNodeDefaultTypeInternal;
extern OutputNodeDefaultTypeInternal _OutputNode_default_instance_;
class Reply;
class ReplyDefaultTypeInternal;
extern ReplyDefaultTypeInternal _Reply_default_instance_;
class Request;
class RequestDefaultTypeInternal;
extern RequestDefaultTypeInternal _Request_default_instance_;
}  // namespace artnet
}  // namespace plugin
}  // namespace ola
PROTOBUF_NAMESPACE_OPEN
template<> ::ola::plugin::artnet::NodeListReply* Arena::CreateMaybeMessage<::ola::plugin::artnet::NodeListReply>(Arena*);
template<> ::ola::plugin::artnet::NodeListRequest* Arena::CreateMaybeMessage<::ola::plugin::artnet::NodeListRequest>(Arena*);
template<> ::ola::plugin::artnet::OptionsReply* Arena::CreateMaybeMessage<::ola::plugin::artnet::OptionsReply>(Arena*);
template<> ::ola::plugin::artnet::OptionsRequest* Arena::CreateMaybeMessage<::ola::plugin::artnet::OptionsRequest>(Arena*);
template<> ::ola::plugin::artnet::OutputNode* Arena::CreateMaybeMessage<::ola::plugin::artnet::OutputNode>(Arena*);
template<> ::ola::plugin::artnet::Reply* Arena::CreateMaybeMessage<::ola::plugin::artnet::Reply>(Arena*);
template<> ::ola::plugin::artnet::Request* Arena::CreateMaybeMessage<::ola::plugin::artnet::Request>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ola {
namespace plugin {
namespace artnet {

enum Request_RequestType : int {
  Request_RequestType_ARTNET_OPTIONS_REQUEST = 1,
  Request_RequestType_ARTNET_NODE_LIST_REQUEST = 2
};
bool Request_RequestType_IsValid(int value);
constexpr Request_RequestType Request_RequestType_RequestType_MIN = Request_RequestType_ARTNET_OPTIONS_REQUEST;
constexpr Request_RequestType Request_RequestType_RequestType_MAX = Request_RequestType_ARTNET_NODE_LIST_REQUEST;
constexpr int Request_RequestType_RequestType_ARRAYSIZE = Request_RequestType_RequestType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Request_RequestType_descriptor();
template<typename T>
inline const std::string& Request_RequestType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Request_RequestType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Request_RequestType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Request_RequestType_descriptor(), enum_t_value);
}
inline bool Request_RequestType_Parse(
    const std::string& name, Request_RequestType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Request_RequestType>(
    Request_RequestType_descriptor(), name, value);
}
enum Reply_ReplyType : int {
  Reply_ReplyType_ARTNET_OPTIONS_REPLY = 1,
  Reply_ReplyType_ARTNET_NODE_LIST_REPLY = 2
};
bool Reply_ReplyType_IsValid(int value);
constexpr Reply_ReplyType Reply_ReplyType_ReplyType_MIN = Reply_ReplyType_ARTNET_OPTIONS_REPLY;
constexpr Reply_ReplyType Reply_ReplyType_ReplyType_MAX = Reply_ReplyType_ARTNET_NODE_LIST_REPLY;
constexpr int Reply_ReplyType_ReplyType_ARRAYSIZE = Reply_ReplyType_ReplyType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Reply_ReplyType_descriptor();
template<typename T>
inline const std::string& Reply_ReplyType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Reply_ReplyType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Reply_ReplyType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Reply_ReplyType_descriptor(), enum_t_value);
}
inline bool Reply_ReplyType_Parse(
    const std::string& name, Reply_ReplyType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Reply_ReplyType>(
    Reply_ReplyType_descriptor(), name, value);
}
// ===================================================================

class OptionsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ola.plugin.artnet.OptionsRequest) */ {
 public:
  inline OptionsRequest() : OptionsRequest(nullptr) {};
  virtual ~OptionsRequest();

  OptionsRequest(const OptionsRequest& from);
  OptionsRequest(OptionsRequest&& from) noexcept
    : OptionsRequest() {
    *this = ::std::move(from);
  }

  inline OptionsRequest& operator=(const OptionsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline OptionsRequest& operator=(OptionsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OptionsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OptionsRequest* internal_default_instance() {
    return reinterpret_cast<const OptionsRequest*>(
               &_OptionsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(OptionsRequest& a, OptionsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(OptionsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OptionsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OptionsRequest* New() const final {
    return CreateMaybeMessage<OptionsRequest>(nullptr);
  }

  OptionsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OptionsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OptionsRequest& from);
  void MergeFrom(const OptionsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OptionsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ola.plugin.artnet.OptionsRequest";
  }
  protected:
  explicit OptionsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ArtNetConfigMessages_2eproto);
    return ::descriptor_table_ArtNetConfigMessages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShortNameFieldNumber = 1,
    kLongNameFieldNumber = 2,
    kSubnetFieldNumber = 3,
    kNetFieldNumber = 4,
  };
  // optional string short_name = 1;
  bool has_short_name() const;
  private:
  bool _internal_has_short_name() const;
  public:
  void clear_short_name();
  const std::string& short_name() const;
  void set_short_name(const std::string& value);
  void set_short_name(std::string&& value);
  void set_short_name(const char* value);
  void set_short_name(const char* value, size_t size);
  std::string* mutable_short_name();
  std::string* release_short_name();
  void set_allocated_short_name(std::string* short_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_short_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_short_name(
      std::string* short_name);
  private:
  const std::string& _internal_short_name() const;
  void _internal_set_short_name(const std::string& value);
  std::string* _internal_mutable_short_name();
  public:

  // optional string long_name = 2;
  bool has_long_name() const;
  private:
  bool _internal_has_long_name() const;
  public:
  void clear_long_name();
  const std::string& long_name() const;
  void set_long_name(const std::string& value);
  void set_long_name(std::string&& value);
  void set_long_name(const char* value);
  void set_long_name(const char* value, size_t size);
  std::string* mutable_long_name();
  std::string* release_long_name();
  void set_allocated_long_name(std::string* long_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_long_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_long_name(
      std::string* long_name);
  private:
  const std::string& _internal_long_name() const;
  void _internal_set_long_name(const std::string& value);
  std::string* _internal_mutable_long_name();
  public:

  // optional int32 subnet = 3;
  bool has_subnet() const;
  private:
  bool _internal_has_subnet() const;
  public:
  void clear_subnet();
  ::PROTOBUF_NAMESPACE_ID::int32 subnet() const;
  void set_subnet(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_subnet() const;
  void _internal_set_subnet(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 net = 4;
  bool has_net() const;
  private:
  bool _internal_has_net() const;
  public:
  void clear_net();
  ::PROTOBUF_NAMESPACE_ID::int32 net() const;
  void set_net(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_net() const;
  void _internal_set_net(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ola.plugin.artnet.OptionsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr short_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr long_name_;
  ::PROTOBUF_NAMESPACE_ID::int32 subnet_;
  ::PROTOBUF_NAMESPACE_ID::int32 net_;
  friend struct ::TableStruct_ArtNetConfigMessages_2eproto;
};
// -------------------------------------------------------------------

class OptionsReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ola.plugin.artnet.OptionsReply) */ {
 public:
  inline OptionsReply() : OptionsReply(nullptr) {};
  virtual ~OptionsReply();

  OptionsReply(const OptionsReply& from);
  OptionsReply(OptionsReply&& from) noexcept
    : OptionsReply() {
    *this = ::std::move(from);
  }

  inline OptionsReply& operator=(const OptionsReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline OptionsReply& operator=(OptionsReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OptionsReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OptionsReply* internal_default_instance() {
    return reinterpret_cast<const OptionsReply*>(
               &_OptionsReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(OptionsReply& a, OptionsReply& b) {
    a.Swap(&b);
  }
  inline void Swap(OptionsReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OptionsReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OptionsReply* New() const final {
    return CreateMaybeMessage<OptionsReply>(nullptr);
  }

  OptionsReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OptionsReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OptionsReply& from);
  void MergeFrom(const OptionsReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OptionsReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ola.plugin.artnet.OptionsReply";
  }
  protected:
  explicit OptionsReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ArtNetConfigMessages_2eproto);
    return ::descriptor_table_ArtNetConfigMessages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShortNameFieldNumber = 2,
    kLongNameFieldNumber = 3,
    kStatusFieldNumber = 1,
    kSubnetFieldNumber = 4,
    kNetFieldNumber = 5,
  };
  // required string short_name = 2;
  bool has_short_name() const;
  private:
  bool _internal_has_short_name() const;
  public:
  void clear_short_name();
  const std::string& short_name() const;
  void set_short_name(const std::string& value);
  void set_short_name(std::string&& value);
  void set_short_name(const char* value);
  void set_short_name(const char* value, size_t size);
  std::string* mutable_short_name();
  std::string* release_short_name();
  void set_allocated_short_name(std::string* short_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_short_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_short_name(
      std::string* short_name);
  private:
  const std::string& _internal_short_name() const;
  void _internal_set_short_name(const std::string& value);
  std::string* _internal_mutable_short_name();
  public:

  // required string long_name = 3;
  bool has_long_name() const;
  private:
  bool _internal_has_long_name() const;
  public:
  void clear_long_name();
  const std::string& long_name() const;
  void set_long_name(const std::string& value);
  void set_long_name(std::string&& value);
  void set_long_name(const char* value);
  void set_long_name(const char* value, size_t size);
  std::string* mutable_long_name();
  std::string* release_long_name();
  void set_allocated_long_name(std::string* long_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_long_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_long_name(
      std::string* long_name);
  private:
  const std::string& _internal_long_name() const;
  void _internal_set_long_name(const std::string& value);
  std::string* _internal_mutable_long_name();
  public:

  // required uint32 status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::uint32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required int32 subnet = 4;
  bool has_subnet() const;
  private:
  bool _internal_has_subnet() const;
  public:
  void clear_subnet();
  ::PROTOBUF_NAMESPACE_ID::int32 subnet() const;
  void set_subnet(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_subnet() const;
  void _internal_set_subnet(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 net = 5;
  bool has_net() const;
  private:
  bool _internal_has_net() const;
  public:
  void clear_net();
  ::PROTOBUF_NAMESPACE_ID::int32 net() const;
  void set_net(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_net() const;
  void _internal_set_net(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ola.plugin.artnet.OptionsReply)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr short_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr long_name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 status_;
  ::PROTOBUF_NAMESPACE_ID::int32 subnet_;
  ::PROTOBUF_NAMESPACE_ID::int32 net_;
  friend struct ::TableStruct_ArtNetConfigMessages_2eproto;
};
// -------------------------------------------------------------------

class NodeListRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ola.plugin.artnet.NodeListRequest) */ {
 public:
  inline NodeListRequest() : NodeListRequest(nullptr) {};
  virtual ~NodeListRequest();

  NodeListRequest(const NodeListRequest& from);
  NodeListRequest(NodeListRequest&& from) noexcept
    : NodeListRequest() {
    *this = ::std::move(from);
  }

  inline NodeListRequest& operator=(const NodeListRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline NodeListRequest& operator=(NodeListRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NodeListRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NodeListRequest* internal_default_instance() {
    return reinterpret_cast<const NodeListRequest*>(
               &_NodeListRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(NodeListRequest& a, NodeListRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(NodeListRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NodeListRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NodeListRequest* New() const final {
    return CreateMaybeMessage<NodeListRequest>(nullptr);
  }

  NodeListRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NodeListRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NodeListRequest& from);
  void MergeFrom(const NodeListRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NodeListRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ola.plugin.artnet.NodeListRequest";
  }
  protected:
  explicit NodeListRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ArtNetConfigMessages_2eproto);
    return ::descriptor_table_ArtNetConfigMessages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUniverseFieldNumber = 1,
  };
  // required int32 universe = 1;
  bool has_universe() const;
  private:
  bool _internal_has_universe() const;
  public:
  void clear_universe();
  ::PROTOBUF_NAMESPACE_ID::int32 universe() const;
  void set_universe(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_universe() const;
  void _internal_set_universe(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ola.plugin.artnet.NodeListRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 universe_;
  friend struct ::TableStruct_ArtNetConfigMessages_2eproto;
};
// -------------------------------------------------------------------

class OutputNode PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ola.plugin.artnet.OutputNode) */ {
 public:
  inline OutputNode() : OutputNode(nullptr) {};
  virtual ~OutputNode();

  OutputNode(const OutputNode& from);
  OutputNode(OutputNode&& from) noexcept
    : OutputNode() {
    *this = ::std::move(from);
  }

  inline OutputNode& operator=(const OutputNode& from) {
    CopyFrom(from);
    return *this;
  }
  inline OutputNode& operator=(OutputNode&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OutputNode& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OutputNode* internal_default_instance() {
    return reinterpret_cast<const OutputNode*>(
               &_OutputNode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(OutputNode& a, OutputNode& b) {
    a.Swap(&b);
  }
  inline void Swap(OutputNode* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OutputNode* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OutputNode* New() const final {
    return CreateMaybeMessage<OutputNode>(nullptr);
  }

  OutputNode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OutputNode>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OutputNode& from);
  void MergeFrom(const OutputNode& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OutputNode* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ola.plugin.artnet.OutputNode";
  }
  protected:
  explicit OutputNode(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ArtNetConfigMessages_2eproto);
    return ::descriptor_table_ArtNetConfigMessages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpAddressFieldNumber = 1,
  };
  // required uint32 ip_address = 1;
  bool has_ip_address() const;
  private:
  bool _internal_has_ip_address() const;
  public:
  void clear_ip_address();
  ::PROTOBUF_NAMESPACE_ID::uint32 ip_address() const;
  void set_ip_address(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ip_address() const;
  void _internal_set_ip_address(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:ola.plugin.artnet.OutputNode)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ip_address_;
  friend struct ::TableStruct_ArtNetConfigMessages_2eproto;
};
// -------------------------------------------------------------------

class NodeListReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ola.plugin.artnet.NodeListReply) */ {
 public:
  inline NodeListReply() : NodeListReply(nullptr) {};
  virtual ~NodeListReply();

  NodeListReply(const NodeListReply& from);
  NodeListReply(NodeListReply&& from) noexcept
    : NodeListReply() {
    *this = ::std::move(from);
  }

  inline NodeListReply& operator=(const NodeListReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline NodeListReply& operator=(NodeListReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NodeListReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NodeListReply* internal_default_instance() {
    return reinterpret_cast<const NodeListReply*>(
               &_NodeListReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(NodeListReply& a, NodeListReply& b) {
    a.Swap(&b);
  }
  inline void Swap(NodeListReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NodeListReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NodeListReply* New() const final {
    return CreateMaybeMessage<NodeListReply>(nullptr);
  }

  NodeListReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NodeListReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NodeListReply& from);
  void MergeFrom(const NodeListReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NodeListReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ola.plugin.artnet.NodeListReply";
  }
  protected:
  explicit NodeListReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ArtNetConfigMessages_2eproto);
    return ::descriptor_table_ArtNetConfigMessages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodeFieldNumber = 1,
  };
  // repeated .ola.plugin.artnet.OutputNode node = 1;
  int node_size() const;
  private:
  int _internal_node_size() const;
  public:
  void clear_node();
  ::ola::plugin::artnet::OutputNode* mutable_node(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ola::plugin::artnet::OutputNode >*
      mutable_node();
  private:
  const ::ola::plugin::artnet::OutputNode& _internal_node(int index) const;
  ::ola::plugin::artnet::OutputNode* _internal_add_node();
  public:
  const ::ola::plugin::artnet::OutputNode& node(int index) const;
  ::ola::plugin::artnet::OutputNode* add_node();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ola::plugin::artnet::OutputNode >&
      node() const;

  // @@protoc_insertion_point(class_scope:ola.plugin.artnet.NodeListReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ola::plugin::artnet::OutputNode > node_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ArtNetConfigMessages_2eproto;
};
// -------------------------------------------------------------------

class Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ola.plugin.artnet.Request) */ {
 public:
  inline Request() : Request(nullptr) {};
  virtual ~Request();

  Request(const Request& from);
  Request(Request&& from) noexcept
    : Request() {
    *this = ::std::move(from);
  }

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline Request& operator=(Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Request* internal_default_instance() {
    return reinterpret_cast<const Request*>(
               &_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Request& a, Request& b) {
    a.Swap(&b);
  }
  inline void Swap(Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Request* New() const final {
    return CreateMaybeMessage<Request>(nullptr);
  }

  Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ola.plugin.artnet.Request";
  }
  protected:
  explicit Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ArtNetConfigMessages_2eproto);
    return ::descriptor_table_ArtNetConfigMessages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Request_RequestType RequestType;
  static constexpr RequestType ARTNET_OPTIONS_REQUEST =
    Request_RequestType_ARTNET_OPTIONS_REQUEST;
  static constexpr RequestType ARTNET_NODE_LIST_REQUEST =
    Request_RequestType_ARTNET_NODE_LIST_REQUEST;
  static inline bool RequestType_IsValid(int value) {
    return Request_RequestType_IsValid(value);
  }
  static constexpr RequestType RequestType_MIN =
    Request_RequestType_RequestType_MIN;
  static constexpr RequestType RequestType_MAX =
    Request_RequestType_RequestType_MAX;
  static constexpr int RequestType_ARRAYSIZE =
    Request_RequestType_RequestType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  RequestType_descriptor() {
    return Request_RequestType_descriptor();
  }
  template<typename T>
  static inline const std::string& RequestType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, RequestType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function RequestType_Name.");
    return Request_RequestType_Name(enum_t_value);
  }
  static inline bool RequestType_Parse(const std::string& name,
      RequestType* value) {
    return Request_RequestType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kOptionsFieldNumber = 2,
    kNodeListFieldNumber = 3,
    kTypeFieldNumber = 1,
  };
  // optional .ola.plugin.artnet.OptionsRequest options = 2;
  bool has_options() const;
  private:
  bool _internal_has_options() const;
  public:
  void clear_options();
  const ::ola::plugin::artnet::OptionsRequest& options() const;
  ::ola::plugin::artnet::OptionsRequest* release_options();
  ::ola::plugin::artnet::OptionsRequest* mutable_options();
  void set_allocated_options(::ola::plugin::artnet::OptionsRequest* options);
  private:
  const ::ola::plugin::artnet::OptionsRequest& _internal_options() const;
  ::ola::plugin::artnet::OptionsRequest* _internal_mutable_options();
  public:
  void unsafe_arena_set_allocated_options(
      ::ola::plugin::artnet::OptionsRequest* options);
  ::ola::plugin::artnet::OptionsRequest* unsafe_arena_release_options();

  // optional .ola.plugin.artnet.NodeListRequest node_list = 3;
  bool has_node_list() const;
  private:
  bool _internal_has_node_list() const;
  public:
  void clear_node_list();
  const ::ola::plugin::artnet::NodeListRequest& node_list() const;
  ::ola::plugin::artnet::NodeListRequest* release_node_list();
  ::ola::plugin::artnet::NodeListRequest* mutable_node_list();
  void set_allocated_node_list(::ola::plugin::artnet::NodeListRequest* node_list);
  private:
  const ::ola::plugin::artnet::NodeListRequest& _internal_node_list() const;
  ::ola::plugin::artnet::NodeListRequest* _internal_mutable_node_list();
  public:
  void unsafe_arena_set_allocated_node_list(
      ::ola::plugin::artnet::NodeListRequest* node_list);
  ::ola::plugin::artnet::NodeListRequest* unsafe_arena_release_node_list();

  // required .ola.plugin.artnet.Request.RequestType type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::ola::plugin::artnet::Request_RequestType type() const;
  void set_type(::ola::plugin::artnet::Request_RequestType value);
  private:
  ::ola::plugin::artnet::Request_RequestType _internal_type() const;
  void _internal_set_type(::ola::plugin::artnet::Request_RequestType value);
  public:

  // @@protoc_insertion_point(class_scope:ola.plugin.artnet.Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::ola::plugin::artnet::OptionsRequest* options_;
  ::ola::plugin::artnet::NodeListRequest* node_list_;
  int type_;
  friend struct ::TableStruct_ArtNetConfigMessages_2eproto;
};
// -------------------------------------------------------------------

class Reply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ola.plugin.artnet.Reply) */ {
 public:
  inline Reply() : Reply(nullptr) {};
  virtual ~Reply();

  Reply(const Reply& from);
  Reply(Reply&& from) noexcept
    : Reply() {
    *this = ::std::move(from);
  }

  inline Reply& operator=(const Reply& from) {
    CopyFrom(from);
    return *this;
  }
  inline Reply& operator=(Reply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Reply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Reply* internal_default_instance() {
    return reinterpret_cast<const Reply*>(
               &_Reply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Reply& a, Reply& b) {
    a.Swap(&b);
  }
  inline void Swap(Reply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Reply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Reply* New() const final {
    return CreateMaybeMessage<Reply>(nullptr);
  }

  Reply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Reply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Reply& from);
  void MergeFrom(const Reply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Reply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ola.plugin.artnet.Reply";
  }
  protected:
  explicit Reply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ArtNetConfigMessages_2eproto);
    return ::descriptor_table_ArtNetConfigMessages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Reply_ReplyType ReplyType;
  static constexpr ReplyType ARTNET_OPTIONS_REPLY =
    Reply_ReplyType_ARTNET_OPTIONS_REPLY;
  static constexpr ReplyType ARTNET_NODE_LIST_REPLY =
    Reply_ReplyType_ARTNET_NODE_LIST_REPLY;
  static inline bool ReplyType_IsValid(int value) {
    return Reply_ReplyType_IsValid(value);
  }
  static constexpr ReplyType ReplyType_MIN =
    Reply_ReplyType_ReplyType_MIN;
  static constexpr ReplyType ReplyType_MAX =
    Reply_ReplyType_ReplyType_MAX;
  static constexpr int ReplyType_ARRAYSIZE =
    Reply_ReplyType_ReplyType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ReplyType_descriptor() {
    return Reply_ReplyType_descriptor();
  }
  template<typename T>
  static inline const std::string& ReplyType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ReplyType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ReplyType_Name.");
    return Reply_ReplyType_Name(enum_t_value);
  }
  static inline bool ReplyType_Parse(const std::string& name,
      ReplyType* value) {
    return Reply_ReplyType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kOptionsFieldNumber = 2,
    kNodeListFieldNumber = 3,
    kTypeFieldNumber = 1,
  };
  // optional .ola.plugin.artnet.OptionsReply options = 2;
  bool has_options() const;
  private:
  bool _internal_has_options() const;
  public:
  void clear_options();
  const ::ola::plugin::artnet::OptionsReply& options() const;
  ::ola::plugin::artnet::OptionsReply* release_options();
  ::ola::plugin::artnet::OptionsReply* mutable_options();
  void set_allocated_options(::ola::plugin::artnet::OptionsReply* options);
  private:
  const ::ola::plugin::artnet::OptionsReply& _internal_options() const;
  ::ola::plugin::artnet::OptionsReply* _internal_mutable_options();
  public:
  void unsafe_arena_set_allocated_options(
      ::ola::plugin::artnet::OptionsReply* options);
  ::ola::plugin::artnet::OptionsReply* unsafe_arena_release_options();

  // optional .ola.plugin.artnet.NodeListReply node_list = 3;
  bool has_node_list() const;
  private:
  bool _internal_has_node_list() const;
  public:
  void clear_node_list();
  const ::ola::plugin::artnet::NodeListReply& node_list() const;
  ::ola::plugin::artnet::NodeListReply* release_node_list();
  ::ola::plugin::artnet::NodeListReply* mutable_node_list();
  void set_allocated_node_list(::ola::plugin::artnet::NodeListReply* node_list);
  private:
  const ::ola::plugin::artnet::NodeListReply& _internal_node_list() const;
  ::ola::plugin::artnet::NodeListReply* _internal_mutable_node_list();
  public:
  void unsafe_arena_set_allocated_node_list(
      ::ola::plugin::artnet::NodeListReply* node_list);
  ::ola::plugin::artnet::NodeListReply* unsafe_arena_release_node_list();

  // required .ola.plugin.artnet.Reply.ReplyType type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::ola::plugin::artnet::Reply_ReplyType type() const;
  void set_type(::ola::plugin::artnet::Reply_ReplyType value);
  private:
  ::ola::plugin::artnet::Reply_ReplyType _internal_type() const;
  void _internal_set_type(::ola::plugin::artnet::Reply_ReplyType value);
  public:

  // @@protoc_insertion_point(class_scope:ola.plugin.artnet.Reply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::ola::plugin::artnet::OptionsReply* options_;
  ::ola::plugin::artnet::NodeListReply* node_list_;
  int type_;
  friend struct ::TableStruct_ArtNetConfigMessages_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// OptionsRequest

// optional string short_name = 1;
inline bool OptionsRequest::_internal_has_short_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool OptionsRequest::has_short_name() const {
  return _internal_has_short_name();
}
inline void OptionsRequest::clear_short_name() {
  short_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& OptionsRequest::short_name() const {
  // @@protoc_insertion_point(field_get:ola.plugin.artnet.OptionsRequest.short_name)
  return _internal_short_name();
}
inline void OptionsRequest::set_short_name(const std::string& value) {
  _internal_set_short_name(value);
  // @@protoc_insertion_point(field_set:ola.plugin.artnet.OptionsRequest.short_name)
}
inline std::string* OptionsRequest::mutable_short_name() {
  // @@protoc_insertion_point(field_mutable:ola.plugin.artnet.OptionsRequest.short_name)
  return _internal_mutable_short_name();
}
inline const std::string& OptionsRequest::_internal_short_name() const {
  return short_name_.Get();
}
inline void OptionsRequest::_internal_set_short_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  short_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OptionsRequest::set_short_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  short_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ola.plugin.artnet.OptionsRequest.short_name)
}
inline void OptionsRequest::set_short_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  short_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ola.plugin.artnet.OptionsRequest.short_name)
}
inline void OptionsRequest::set_short_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  short_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ola.plugin.artnet.OptionsRequest.short_name)
}
inline std::string* OptionsRequest::_internal_mutable_short_name() {
  _has_bits_[0] |= 0x00000001u;
  return short_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OptionsRequest::release_short_name() {
  // @@protoc_insertion_point(field_release:ola.plugin.artnet.OptionsRequest.short_name)
  if (!_internal_has_short_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return short_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OptionsRequest::set_allocated_short_name(std::string* short_name) {
  if (short_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  short_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), short_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ola.plugin.artnet.OptionsRequest.short_name)
}
inline std::string* OptionsRequest::unsafe_arena_release_short_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ola.plugin.artnet.OptionsRequest.short_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return short_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void OptionsRequest::unsafe_arena_set_allocated_short_name(
    std::string* short_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (short_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  short_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      short_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ola.plugin.artnet.OptionsRequest.short_name)
}

// optional string long_name = 2;
inline bool OptionsRequest::_internal_has_long_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool OptionsRequest::has_long_name() const {
  return _internal_has_long_name();
}
inline void OptionsRequest::clear_long_name() {
  long_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& OptionsRequest::long_name() const {
  // @@protoc_insertion_point(field_get:ola.plugin.artnet.OptionsRequest.long_name)
  return _internal_long_name();
}
inline void OptionsRequest::set_long_name(const std::string& value) {
  _internal_set_long_name(value);
  // @@protoc_insertion_point(field_set:ola.plugin.artnet.OptionsRequest.long_name)
}
inline std::string* OptionsRequest::mutable_long_name() {
  // @@protoc_insertion_point(field_mutable:ola.plugin.artnet.OptionsRequest.long_name)
  return _internal_mutable_long_name();
}
inline const std::string& OptionsRequest::_internal_long_name() const {
  return long_name_.Get();
}
inline void OptionsRequest::_internal_set_long_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  long_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OptionsRequest::set_long_name(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  long_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ola.plugin.artnet.OptionsRequest.long_name)
}
inline void OptionsRequest::set_long_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  long_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ola.plugin.artnet.OptionsRequest.long_name)
}
inline void OptionsRequest::set_long_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  long_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ola.plugin.artnet.OptionsRequest.long_name)
}
inline std::string* OptionsRequest::_internal_mutable_long_name() {
  _has_bits_[0] |= 0x00000002u;
  return long_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OptionsRequest::release_long_name() {
  // @@protoc_insertion_point(field_release:ola.plugin.artnet.OptionsRequest.long_name)
  if (!_internal_has_long_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return long_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OptionsRequest::set_allocated_long_name(std::string* long_name) {
  if (long_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  long_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), long_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ola.plugin.artnet.OptionsRequest.long_name)
}
inline std::string* OptionsRequest::unsafe_arena_release_long_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ola.plugin.artnet.OptionsRequest.long_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return long_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void OptionsRequest::unsafe_arena_set_allocated_long_name(
    std::string* long_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (long_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  long_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      long_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ola.plugin.artnet.OptionsRequest.long_name)
}

// optional int32 subnet = 3;
inline bool OptionsRequest::_internal_has_subnet() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool OptionsRequest::has_subnet() const {
  return _internal_has_subnet();
}
inline void OptionsRequest::clear_subnet() {
  subnet_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OptionsRequest::_internal_subnet() const {
  return subnet_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OptionsRequest::subnet() const {
  // @@protoc_insertion_point(field_get:ola.plugin.artnet.OptionsRequest.subnet)
  return _internal_subnet();
}
inline void OptionsRequest::_internal_set_subnet(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  subnet_ = value;
}
inline void OptionsRequest::set_subnet(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_subnet(value);
  // @@protoc_insertion_point(field_set:ola.plugin.artnet.OptionsRequest.subnet)
}

// optional int32 net = 4;
inline bool OptionsRequest::_internal_has_net() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool OptionsRequest::has_net() const {
  return _internal_has_net();
}
inline void OptionsRequest::clear_net() {
  net_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OptionsRequest::_internal_net() const {
  return net_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OptionsRequest::net() const {
  // @@protoc_insertion_point(field_get:ola.plugin.artnet.OptionsRequest.net)
  return _internal_net();
}
inline void OptionsRequest::_internal_set_net(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  net_ = value;
}
inline void OptionsRequest::set_net(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_net(value);
  // @@protoc_insertion_point(field_set:ola.plugin.artnet.OptionsRequest.net)
}

// -------------------------------------------------------------------

// OptionsReply

// required uint32 status = 1;
inline bool OptionsReply::_internal_has_status() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool OptionsReply::has_status() const {
  return _internal_has_status();
}
inline void OptionsReply::clear_status() {
  status_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OptionsReply::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OptionsReply::status() const {
  // @@protoc_insertion_point(field_get:ola.plugin.artnet.OptionsReply.status)
  return _internal_status();
}
inline void OptionsReply::_internal_set_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  status_ = value;
}
inline void OptionsReply::set_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:ola.plugin.artnet.OptionsReply.status)
}

// required string short_name = 2;
inline bool OptionsReply::_internal_has_short_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool OptionsReply::has_short_name() const {
  return _internal_has_short_name();
}
inline void OptionsReply::clear_short_name() {
  short_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& OptionsReply::short_name() const {
  // @@protoc_insertion_point(field_get:ola.plugin.artnet.OptionsReply.short_name)
  return _internal_short_name();
}
inline void OptionsReply::set_short_name(const std::string& value) {
  _internal_set_short_name(value);
  // @@protoc_insertion_point(field_set:ola.plugin.artnet.OptionsReply.short_name)
}
inline std::string* OptionsReply::mutable_short_name() {
  // @@protoc_insertion_point(field_mutable:ola.plugin.artnet.OptionsReply.short_name)
  return _internal_mutable_short_name();
}
inline const std::string& OptionsReply::_internal_short_name() const {
  return short_name_.Get();
}
inline void OptionsReply::_internal_set_short_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  short_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OptionsReply::set_short_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  short_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ola.plugin.artnet.OptionsReply.short_name)
}
inline void OptionsReply::set_short_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  short_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ola.plugin.artnet.OptionsReply.short_name)
}
inline void OptionsReply::set_short_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  short_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ola.plugin.artnet.OptionsReply.short_name)
}
inline std::string* OptionsReply::_internal_mutable_short_name() {
  _has_bits_[0] |= 0x00000001u;
  return short_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OptionsReply::release_short_name() {
  // @@protoc_insertion_point(field_release:ola.plugin.artnet.OptionsReply.short_name)
  if (!_internal_has_short_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return short_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OptionsReply::set_allocated_short_name(std::string* short_name) {
  if (short_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  short_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), short_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ola.plugin.artnet.OptionsReply.short_name)
}
inline std::string* OptionsReply::unsafe_arena_release_short_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ola.plugin.artnet.OptionsReply.short_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return short_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void OptionsReply::unsafe_arena_set_allocated_short_name(
    std::string* short_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (short_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  short_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      short_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ola.plugin.artnet.OptionsReply.short_name)
}

// required string long_name = 3;
inline bool OptionsReply::_internal_has_long_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool OptionsReply::has_long_name() const {
  return _internal_has_long_name();
}
inline void OptionsReply::clear_long_name() {
  long_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& OptionsReply::long_name() const {
  // @@protoc_insertion_point(field_get:ola.plugin.artnet.OptionsReply.long_name)
  return _internal_long_name();
}
inline void OptionsReply::set_long_name(const std::string& value) {
  _internal_set_long_name(value);
  // @@protoc_insertion_point(field_set:ola.plugin.artnet.OptionsReply.long_name)
}
inline std::string* OptionsReply::mutable_long_name() {
  // @@protoc_insertion_point(field_mutable:ola.plugin.artnet.OptionsReply.long_name)
  return _internal_mutable_long_name();
}
inline const std::string& OptionsReply::_internal_long_name() const {
  return long_name_.Get();
}
inline void OptionsReply::_internal_set_long_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  long_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OptionsReply::set_long_name(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  long_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ola.plugin.artnet.OptionsReply.long_name)
}
inline void OptionsReply::set_long_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  long_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ola.plugin.artnet.OptionsReply.long_name)
}
inline void OptionsReply::set_long_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  long_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ola.plugin.artnet.OptionsReply.long_name)
}
inline std::string* OptionsReply::_internal_mutable_long_name() {
  _has_bits_[0] |= 0x00000002u;
  return long_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OptionsReply::release_long_name() {
  // @@protoc_insertion_point(field_release:ola.plugin.artnet.OptionsReply.long_name)
  if (!_internal_has_long_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return long_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OptionsReply::set_allocated_long_name(std::string* long_name) {
  if (long_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  long_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), long_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ola.plugin.artnet.OptionsReply.long_name)
}
inline std::string* OptionsReply::unsafe_arena_release_long_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ola.plugin.artnet.OptionsReply.long_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return long_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void OptionsReply::unsafe_arena_set_allocated_long_name(
    std::string* long_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (long_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  long_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      long_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ola.plugin.artnet.OptionsReply.long_name)
}

// required int32 subnet = 4;
inline bool OptionsReply::_internal_has_subnet() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool OptionsReply::has_subnet() const {
  return _internal_has_subnet();
}
inline void OptionsReply::clear_subnet() {
  subnet_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OptionsReply::_internal_subnet() const {
  return subnet_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OptionsReply::subnet() const {
  // @@protoc_insertion_point(field_get:ola.plugin.artnet.OptionsReply.subnet)
  return _internal_subnet();
}
inline void OptionsReply::_internal_set_subnet(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  subnet_ = value;
}
inline void OptionsReply::set_subnet(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_subnet(value);
  // @@protoc_insertion_point(field_set:ola.plugin.artnet.OptionsReply.subnet)
}

// required int32 net = 5;
inline bool OptionsReply::_internal_has_net() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool OptionsReply::has_net() const {
  return _internal_has_net();
}
inline void OptionsReply::clear_net() {
  net_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OptionsReply::_internal_net() const {
  return net_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OptionsReply::net() const {
  // @@protoc_insertion_point(field_get:ola.plugin.artnet.OptionsReply.net)
  return _internal_net();
}
inline void OptionsReply::_internal_set_net(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  net_ = value;
}
inline void OptionsReply::set_net(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_net(value);
  // @@protoc_insertion_point(field_set:ola.plugin.artnet.OptionsReply.net)
}

// -------------------------------------------------------------------

// NodeListRequest

// required int32 universe = 1;
inline bool NodeListRequest::_internal_has_universe() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool NodeListRequest::has_universe() const {
  return _internal_has_universe();
}
inline void NodeListRequest::clear_universe() {
  universe_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NodeListRequest::_internal_universe() const {
  return universe_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NodeListRequest::universe() const {
  // @@protoc_insertion_point(field_get:ola.plugin.artnet.NodeListRequest.universe)
  return _internal_universe();
}
inline void NodeListRequest::_internal_set_universe(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  universe_ = value;
}
inline void NodeListRequest::set_universe(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_universe(value);
  // @@protoc_insertion_point(field_set:ola.plugin.artnet.NodeListRequest.universe)
}

// -------------------------------------------------------------------

// OutputNode

// required uint32 ip_address = 1;
inline bool OutputNode::_internal_has_ip_address() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool OutputNode::has_ip_address() const {
  return _internal_has_ip_address();
}
inline void OutputNode::clear_ip_address() {
  ip_address_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OutputNode::_internal_ip_address() const {
  return ip_address_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OutputNode::ip_address() const {
  // @@protoc_insertion_point(field_get:ola.plugin.artnet.OutputNode.ip_address)
  return _internal_ip_address();
}
inline void OutputNode::_internal_set_ip_address(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  ip_address_ = value;
}
inline void OutputNode::set_ip_address(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ip_address(value);
  // @@protoc_insertion_point(field_set:ola.plugin.artnet.OutputNode.ip_address)
}

// -------------------------------------------------------------------

// NodeListReply

// repeated .ola.plugin.artnet.OutputNode node = 1;
inline int NodeListReply::_internal_node_size() const {
  return node_.size();
}
inline int NodeListReply::node_size() const {
  return _internal_node_size();
}
inline void NodeListReply::clear_node() {
  node_.Clear();
}
inline ::ola::plugin::artnet::OutputNode* NodeListReply::mutable_node(int index) {
  // @@protoc_insertion_point(field_mutable:ola.plugin.artnet.NodeListReply.node)
  return node_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ola::plugin::artnet::OutputNode >*
NodeListReply::mutable_node() {
  // @@protoc_insertion_point(field_mutable_list:ola.plugin.artnet.NodeListReply.node)
  return &node_;
}
inline const ::ola::plugin::artnet::OutputNode& NodeListReply::_internal_node(int index) const {
  return node_.Get(index);
}
inline const ::ola::plugin::artnet::OutputNode& NodeListReply::node(int index) const {
  // @@protoc_insertion_point(field_get:ola.plugin.artnet.NodeListReply.node)
  return _internal_node(index);
}
inline ::ola::plugin::artnet::OutputNode* NodeListReply::_internal_add_node() {
  return node_.Add();
}
inline ::ola::plugin::artnet::OutputNode* NodeListReply::add_node() {
  // @@protoc_insertion_point(field_add:ola.plugin.artnet.NodeListReply.node)
  return _internal_add_node();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ola::plugin::artnet::OutputNode >&
NodeListReply::node() const {
  // @@protoc_insertion_point(field_list:ola.plugin.artnet.NodeListReply.node)
  return node_;
}

// -------------------------------------------------------------------

// Request

// required .ola.plugin.artnet.Request.RequestType type = 1;
inline bool Request::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Request::has_type() const {
  return _internal_has_type();
}
inline void Request::clear_type() {
  type_ = 1;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::ola::plugin::artnet::Request_RequestType Request::_internal_type() const {
  return static_cast< ::ola::plugin::artnet::Request_RequestType >(type_);
}
inline ::ola::plugin::artnet::Request_RequestType Request::type() const {
  // @@protoc_insertion_point(field_get:ola.plugin.artnet.Request.type)
  return _internal_type();
}
inline void Request::_internal_set_type(::ola::plugin::artnet::Request_RequestType value) {
  assert(::ola::plugin::artnet::Request_RequestType_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  type_ = value;
}
inline void Request::set_type(::ola::plugin::artnet::Request_RequestType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:ola.plugin.artnet.Request.type)
}

// optional .ola.plugin.artnet.OptionsRequest options = 2;
inline bool Request::_internal_has_options() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || options_ != nullptr);
  return value;
}
inline bool Request::has_options() const {
  return _internal_has_options();
}
inline void Request::clear_options() {
  if (options_ != nullptr) options_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::ola::plugin::artnet::OptionsRequest& Request::_internal_options() const {
  const ::ola::plugin::artnet::OptionsRequest* p = options_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ola::plugin::artnet::OptionsRequest*>(
      &::ola::plugin::artnet::_OptionsRequest_default_instance_);
}
inline const ::ola::plugin::artnet::OptionsRequest& Request::options() const {
  // @@protoc_insertion_point(field_get:ola.plugin.artnet.Request.options)
  return _internal_options();
}
inline void Request::unsafe_arena_set_allocated_options(
    ::ola::plugin::artnet::OptionsRequest* options) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(options_);
  }
  options_ = options;
  if (options) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ola.plugin.artnet.Request.options)
}
inline ::ola::plugin::artnet::OptionsRequest* Request::release_options() {
  auto temp = unsafe_arena_release_options();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ola::plugin::artnet::OptionsRequest* Request::unsafe_arena_release_options() {
  // @@protoc_insertion_point(field_release:ola.plugin.artnet.Request.options)
  _has_bits_[0] &= ~0x00000001u;
  ::ola::plugin::artnet::OptionsRequest* temp = options_;
  options_ = nullptr;
  return temp;
}
inline ::ola::plugin::artnet::OptionsRequest* Request::_internal_mutable_options() {
  _has_bits_[0] |= 0x00000001u;
  if (options_ == nullptr) {
    auto* p = CreateMaybeMessage<::ola::plugin::artnet::OptionsRequest>(GetArena());
    options_ = p;
  }
  return options_;
}
inline ::ola::plugin::artnet::OptionsRequest* Request::mutable_options() {
  // @@protoc_insertion_point(field_mutable:ola.plugin.artnet.Request.options)
  return _internal_mutable_options();
}
inline void Request::set_allocated_options(::ola::plugin::artnet::OptionsRequest* options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete options_;
  }
  if (options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(options);
    if (message_arena != submessage_arena) {
      options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, options, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  options_ = options;
  // @@protoc_insertion_point(field_set_allocated:ola.plugin.artnet.Request.options)
}

// optional .ola.plugin.artnet.NodeListRequest node_list = 3;
inline bool Request::_internal_has_node_list() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || node_list_ != nullptr);
  return value;
}
inline bool Request::has_node_list() const {
  return _internal_has_node_list();
}
inline void Request::clear_node_list() {
  if (node_list_ != nullptr) node_list_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::ola::plugin::artnet::NodeListRequest& Request::_internal_node_list() const {
  const ::ola::plugin::artnet::NodeListRequest* p = node_list_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ola::plugin::artnet::NodeListRequest*>(
      &::ola::plugin::artnet::_NodeListRequest_default_instance_);
}
inline const ::ola::plugin::artnet::NodeListRequest& Request::node_list() const {
  // @@protoc_insertion_point(field_get:ola.plugin.artnet.Request.node_list)
  return _internal_node_list();
}
inline void Request::unsafe_arena_set_allocated_node_list(
    ::ola::plugin::artnet::NodeListRequest* node_list) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(node_list_);
  }
  node_list_ = node_list;
  if (node_list) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ola.plugin.artnet.Request.node_list)
}
inline ::ola::plugin::artnet::NodeListRequest* Request::release_node_list() {
  auto temp = unsafe_arena_release_node_list();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ola::plugin::artnet::NodeListRequest* Request::unsafe_arena_release_node_list() {
  // @@protoc_insertion_point(field_release:ola.plugin.artnet.Request.node_list)
  _has_bits_[0] &= ~0x00000002u;
  ::ola::plugin::artnet::NodeListRequest* temp = node_list_;
  node_list_ = nullptr;
  return temp;
}
inline ::ola::plugin::artnet::NodeListRequest* Request::_internal_mutable_node_list() {
  _has_bits_[0] |= 0x00000002u;
  if (node_list_ == nullptr) {
    auto* p = CreateMaybeMessage<::ola::plugin::artnet::NodeListRequest>(GetArena());
    node_list_ = p;
  }
  return node_list_;
}
inline ::ola::plugin::artnet::NodeListRequest* Request::mutable_node_list() {
  // @@protoc_insertion_point(field_mutable:ola.plugin.artnet.Request.node_list)
  return _internal_mutable_node_list();
}
inline void Request::set_allocated_node_list(::ola::plugin::artnet::NodeListRequest* node_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete node_list_;
  }
  if (node_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(node_list);
    if (message_arena != submessage_arena) {
      node_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, node_list, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  node_list_ = node_list;
  // @@protoc_insertion_point(field_set_allocated:ola.plugin.artnet.Request.node_list)
}

// -------------------------------------------------------------------

// Reply

// required .ola.plugin.artnet.Reply.ReplyType type = 1;
inline bool Reply::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Reply::has_type() const {
  return _internal_has_type();
}
inline void Reply::clear_type() {
  type_ = 1;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::ola::plugin::artnet::Reply_ReplyType Reply::_internal_type() const {
  return static_cast< ::ola::plugin::artnet::Reply_ReplyType >(type_);
}
inline ::ola::plugin::artnet::Reply_ReplyType Reply::type() const {
  // @@protoc_insertion_point(field_get:ola.plugin.artnet.Reply.type)
  return _internal_type();
}
inline void Reply::_internal_set_type(::ola::plugin::artnet::Reply_ReplyType value) {
  assert(::ola::plugin::artnet::Reply_ReplyType_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  type_ = value;
}
inline void Reply::set_type(::ola::plugin::artnet::Reply_ReplyType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:ola.plugin.artnet.Reply.type)
}

// optional .ola.plugin.artnet.OptionsReply options = 2;
inline bool Reply::_internal_has_options() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || options_ != nullptr);
  return value;
}
inline bool Reply::has_options() const {
  return _internal_has_options();
}
inline void Reply::clear_options() {
  if (options_ != nullptr) options_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::ola::plugin::artnet::OptionsReply& Reply::_internal_options() const {
  const ::ola::plugin::artnet::OptionsReply* p = options_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ola::plugin::artnet::OptionsReply*>(
      &::ola::plugin::artnet::_OptionsReply_default_instance_);
}
inline const ::ola::plugin::artnet::OptionsReply& Reply::options() const {
  // @@protoc_insertion_point(field_get:ola.plugin.artnet.Reply.options)
  return _internal_options();
}
inline void Reply::unsafe_arena_set_allocated_options(
    ::ola::plugin::artnet::OptionsReply* options) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(options_);
  }
  options_ = options;
  if (options) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ola.plugin.artnet.Reply.options)
}
inline ::ola::plugin::artnet::OptionsReply* Reply::release_options() {
  auto temp = unsafe_arena_release_options();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ola::plugin::artnet::OptionsReply* Reply::unsafe_arena_release_options() {
  // @@protoc_insertion_point(field_release:ola.plugin.artnet.Reply.options)
  _has_bits_[0] &= ~0x00000001u;
  ::ola::plugin::artnet::OptionsReply* temp = options_;
  options_ = nullptr;
  return temp;
}
inline ::ola::plugin::artnet::OptionsReply* Reply::_internal_mutable_options() {
  _has_bits_[0] |= 0x00000001u;
  if (options_ == nullptr) {
    auto* p = CreateMaybeMessage<::ola::plugin::artnet::OptionsReply>(GetArena());
    options_ = p;
  }
  return options_;
}
inline ::ola::plugin::artnet::OptionsReply* Reply::mutable_options() {
  // @@protoc_insertion_point(field_mutable:ola.plugin.artnet.Reply.options)
  return _internal_mutable_options();
}
inline void Reply::set_allocated_options(::ola::plugin::artnet::OptionsReply* options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete options_;
  }
  if (options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(options);
    if (message_arena != submessage_arena) {
      options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, options, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  options_ = options;
  // @@protoc_insertion_point(field_set_allocated:ola.plugin.artnet.Reply.options)
}

// optional .ola.plugin.artnet.NodeListReply node_list = 3;
inline bool Reply::_internal_has_node_list() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || node_list_ != nullptr);
  return value;
}
inline bool Reply::has_node_list() const {
  return _internal_has_node_list();
}
inline void Reply::clear_node_list() {
  if (node_list_ != nullptr) node_list_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::ola::plugin::artnet::NodeListReply& Reply::_internal_node_list() const {
  const ::ola::plugin::artnet::NodeListReply* p = node_list_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ola::plugin::artnet::NodeListReply*>(
      &::ola::plugin::artnet::_NodeListReply_default_instance_);
}
inline const ::ola::plugin::artnet::NodeListReply& Reply::node_list() const {
  // @@protoc_insertion_point(field_get:ola.plugin.artnet.Reply.node_list)
  return _internal_node_list();
}
inline void Reply::unsafe_arena_set_allocated_node_list(
    ::ola::plugin::artnet::NodeListReply* node_list) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(node_list_);
  }
  node_list_ = node_list;
  if (node_list) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ola.plugin.artnet.Reply.node_list)
}
inline ::ola::plugin::artnet::NodeListReply* Reply::release_node_list() {
  auto temp = unsafe_arena_release_node_list();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ola::plugin::artnet::NodeListReply* Reply::unsafe_arena_release_node_list() {
  // @@protoc_insertion_point(field_release:ola.plugin.artnet.Reply.node_list)
  _has_bits_[0] &= ~0x00000002u;
  ::ola::plugin::artnet::NodeListReply* temp = node_list_;
  node_list_ = nullptr;
  return temp;
}
inline ::ola::plugin::artnet::NodeListReply* Reply::_internal_mutable_node_list() {
  _has_bits_[0] |= 0x00000002u;
  if (node_list_ == nullptr) {
    auto* p = CreateMaybeMessage<::ola::plugin::artnet::NodeListReply>(GetArena());
    node_list_ = p;
  }
  return node_list_;
}
inline ::ola::plugin::artnet::NodeListReply* Reply::mutable_node_list() {
  // @@protoc_insertion_point(field_mutable:ola.plugin.artnet.Reply.node_list)
  return _internal_mutable_node_list();
}
inline void Reply::set_allocated_node_list(::ola::plugin::artnet::NodeListReply* node_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete node_list_;
  }
  if (node_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(node_list);
    if (message_arena != submessage_arena) {
      node_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, node_list, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  node_list_ = node_list;
  // @@protoc_insertion_point(field_set_allocated:ola.plugin.artnet.Reply.node_list)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace artnet
}  // namespace plugin
}  // namespace ola

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::ola::plugin::artnet::Request_RequestType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ola::plugin::artnet::Request_RequestType>() {
  return ::ola::plugin::artnet::Request_RequestType_descriptor();
}
template <> struct is_proto_enum< ::ola::plugin::artnet::Reply_ReplyType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ola::plugin::artnet::Reply_ReplyType>() {
  return ::ola::plugin::artnet::Reply_ReplyType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ArtNetConfigMessages_2eproto
