// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TestService.proto

#include "TestServiceService.pb.h"

#include <google/protobuf/descriptor.h>  // NOLINT(build/include)
#include <google/protobuf/stubs/once.h>

#include "common/rpc/RpcChannel.h"
#include "common/rpc/RpcController.h"


namespace ola {
namespace rpc {

namespace {

const ::google::protobuf::ServiceDescriptor* TestService_descriptor_ =
    NULL;

}  // namespace


void protobuf_AssignDesc_TestServiceService() {
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "TestService.proto");
  GOOGLE_CHECK(file != NULL);
  TestService_descriptor_ = file->service(0);
}

namespace {

inline void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once,
    &protobuf_AssignDesc_TestServiceService);
}

}  // namespace

// ===================================================================

TestService::~TestService() {}

const ::google::protobuf::ServiceDescriptor* TestService::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TestService_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* TestService::GetDescriptor() {
  protobuf_AssignDescriptorsOnce();
  return TestService_descriptor_;
}

void TestService::Echo(
    ola::rpc::RpcController* controller,
    const ::ola::rpc::EchoRequest*,
    ::ola::rpc::EchoReply*,
    ola::rpc::RpcService::CompletionCallback* done) {
  controller->SetFailed("Method Echo() not implemented.");
  done->Run();
}

void TestService::FailedEcho(
    ola::rpc::RpcController* controller,
    const ::ola::rpc::EchoRequest*,
    ::ola::rpc::EchoReply*,
    ola::rpc::RpcService::CompletionCallback* done) {
  controller->SetFailed("Method FailedEcho() not implemented.");
  done->Run();
}

void TestService::Stream(
    ola::rpc::RpcController* controller,
    const ::ola::rpc::EchoRequest*,
    ::ola::rpc::STREAMING_NO_RESPONSE*,
    ola::rpc::RpcService::CompletionCallback* done) {
  controller->SetFailed("Method Stream() not implemented.");
  done->Run();
}

void TestService::CallMethod(
    const ::google::protobuf::MethodDescriptor* method,
    ola::rpc::RpcController* controller,
    const ::google::protobuf::Message* request,
    ::google::protobuf::Message* response,
    ola::rpc::RpcService::CompletionCallback* done) {
  GOOGLE_DCHECK_EQ(method->service(), TestService_descriptor_);
  switch (method->index()) {
    case 0:
      Echo(
          controller,
          ::google::protobuf::down_cast<
              const ::ola::rpc::EchoRequest*>(request),
          ::google::protobuf::down_cast<
              ::ola::rpc::EchoReply*>(response),
          done);
      break;
    case 1:
      FailedEcho(
          controller,
          ::google::protobuf::down_cast<
              const ::ola::rpc::EchoRequest*>(request),
          ::google::protobuf::down_cast<
              ::ola::rpc::EchoReply*>(response),
          done);
      break;
    case 2:
      Stream(
          controller,
          ::google::protobuf::down_cast<
              const ::ola::rpc::EchoRequest*>(request),
          ::google::protobuf::down_cast<
              ::ola::rpc::STREAMING_NO_RESPONSE*>(response),
          done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& TestService::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch (method->index()) {
    case 0:
      return ::ola::rpc::EchoRequest::default_instance();
    case 1:
      return ::ola::rpc::EchoRequest::default_instance();
    case 2:
      return ::ola::rpc::EchoRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *static_cast< ::google::protobuf::Message*>(NULL);
  }
}

const ::google::protobuf::Message& TestService::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch (method->index()) {
    case 0:
      return ::ola::rpc::EchoReply::default_instance();
    case 1:
      return ::ola::rpc::EchoReply::default_instance();
    case 2:
      return ::ola::rpc::STREAMING_NO_RESPONSE::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *static_cast< ::google::protobuf::Message*>(NULL);
  }
}

TestService_Stub::TestService_Stub(ola::rpc::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}

TestService_Stub::TestService_Stub(
    ola::rpc::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership ==
                  ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}

TestService_Stub::~TestService_Stub() {
  if (owns_channel_) {
    delete channel_;
  }
}

void TestService_Stub::Echo(
    ola::rpc::RpcController* controller,
    const ::ola::rpc::EchoRequest* request,
    ::ola::rpc::EchoReply* response,
    ola::rpc::RpcService::CompletionCallback* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void TestService_Stub::FailedEcho(
    ola::rpc::RpcController* controller,
    const ::ola::rpc::EchoRequest* request,
    ::ola::rpc::EchoReply* response,
    ola::rpc::RpcService::CompletionCallback* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void TestService_Stub::Stream(
    ola::rpc::RpcController* controller,
    const ::ola::rpc::EchoRequest* request,
    ::ola::rpc::STREAMING_NO_RESPONSE* response,
    ola::rpc::RpcService::CompletionCallback* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}

}  // namespace rpc
}  // namespace ola
