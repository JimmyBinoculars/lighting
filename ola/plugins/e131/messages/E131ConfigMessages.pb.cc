// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: E131ConfigMessages.proto

#include "E131ConfigMessages.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_E131ConfigMessages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InputPortInfo_E131ConfigMessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_E131ConfigMessages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OutputPortInfo_E131ConfigMessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_E131ConfigMessages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PortInfoReply_E131ConfigMessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_E131ConfigMessages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PreviewModeRequest_E131ConfigMessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_E131ConfigMessages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SourceEntry_E131ConfigMessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_E131ConfigMessages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SourceListReply_E131ConfigMessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_E131ConfigMessages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SourceListRequest_E131ConfigMessages_2eproto;
namespace ola {
namespace plugin {
namespace e131 {
class PreviewModeRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PreviewModeRequest> _instance;
} _PreviewModeRequest_default_instance_;
class InputPortInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InputPortInfo> _instance;
} _InputPortInfo_default_instance_;
class OutputPortInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OutputPortInfo> _instance;
} _OutputPortInfo_default_instance_;
class PortInfoReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PortInfoReply> _instance;
} _PortInfoReply_default_instance_;
class SourceListRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SourceListRequest> _instance;
} _SourceListRequest_default_instance_;
class SourceEntryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SourceEntry> _instance;
} _SourceEntry_default_instance_;
class SourceListReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SourceListReply> _instance;
} _SourceListReply_default_instance_;
class RequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Request> _instance;
} _Request_default_instance_;
class ReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Reply> _instance;
} _Reply_default_instance_;
}  // namespace e131
}  // namespace plugin
}  // namespace ola
static void InitDefaultsscc_info_InputPortInfo_E131ConfigMessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ola::plugin::e131::_InputPortInfo_default_instance_;
    new (ptr) ::ola::plugin::e131::InputPortInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ola::plugin::e131::InputPortInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InputPortInfo_E131ConfigMessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_InputPortInfo_E131ConfigMessages_2eproto}, {}};

static void InitDefaultsscc_info_OutputPortInfo_E131ConfigMessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ola::plugin::e131::_OutputPortInfo_default_instance_;
    new (ptr) ::ola::plugin::e131::OutputPortInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ola::plugin::e131::OutputPortInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OutputPortInfo_E131ConfigMessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OutputPortInfo_E131ConfigMessages_2eproto}, {}};

static void InitDefaultsscc_info_PortInfoReply_E131ConfigMessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ola::plugin::e131::_PortInfoReply_default_instance_;
    new (ptr) ::ola::plugin::e131::PortInfoReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ola::plugin::e131::PortInfoReply::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PortInfoReply_E131ConfigMessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PortInfoReply_E131ConfigMessages_2eproto}, {
      &scc_info_InputPortInfo_E131ConfigMessages_2eproto.base,
      &scc_info_OutputPortInfo_E131ConfigMessages_2eproto.base,}};

static void InitDefaultsscc_info_PreviewModeRequest_E131ConfigMessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ola::plugin::e131::_PreviewModeRequest_default_instance_;
    new (ptr) ::ola::plugin::e131::PreviewModeRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ola::plugin::e131::PreviewModeRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PreviewModeRequest_E131ConfigMessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PreviewModeRequest_E131ConfigMessages_2eproto}, {}};

static void InitDefaultsscc_info_Reply_E131ConfigMessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ola::plugin::e131::_Reply_default_instance_;
    new (ptr) ::ola::plugin::e131::Reply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ola::plugin::e131::Reply::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Reply_E131ConfigMessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Reply_E131ConfigMessages_2eproto}, {
      &scc_info_PortInfoReply_E131ConfigMessages_2eproto.base,
      &scc_info_SourceListReply_E131ConfigMessages_2eproto.base,}};

static void InitDefaultsscc_info_Request_E131ConfigMessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ola::plugin::e131::_Request_default_instance_;
    new (ptr) ::ola::plugin::e131::Request();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ola::plugin::e131::Request::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Request_E131ConfigMessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Request_E131ConfigMessages_2eproto}, {
      &scc_info_PreviewModeRequest_E131ConfigMessages_2eproto.base,
      &scc_info_SourceListRequest_E131ConfigMessages_2eproto.base,}};

static void InitDefaultsscc_info_SourceEntry_E131ConfigMessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ola::plugin::e131::_SourceEntry_default_instance_;
    new (ptr) ::ola::plugin::e131::SourceEntry();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ola::plugin::e131::SourceEntry::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SourceEntry_E131ConfigMessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SourceEntry_E131ConfigMessages_2eproto}, {}};

static void InitDefaultsscc_info_SourceListReply_E131ConfigMessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ola::plugin::e131::_SourceListReply_default_instance_;
    new (ptr) ::ola::plugin::e131::SourceListReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ola::plugin::e131::SourceListReply::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SourceListReply_E131ConfigMessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SourceListReply_E131ConfigMessages_2eproto}, {
      &scc_info_SourceEntry_E131ConfigMessages_2eproto.base,}};

static void InitDefaultsscc_info_SourceListRequest_E131ConfigMessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ola::plugin::e131::_SourceListRequest_default_instance_;
    new (ptr) ::ola::plugin::e131::SourceListRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ola::plugin::e131::SourceListRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SourceListRequest_E131ConfigMessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SourceListRequest_E131ConfigMessages_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_E131ConfigMessages_2eproto[9];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_E131ConfigMessages_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_E131ConfigMessages_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_E131ConfigMessages_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::ola::plugin::e131::PreviewModeRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ola::plugin::e131::PreviewModeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ola::plugin::e131::PreviewModeRequest, port_id_),
  PROTOBUF_FIELD_OFFSET(::ola::plugin::e131::PreviewModeRequest, preview_mode_),
  PROTOBUF_FIELD_OFFSET(::ola::plugin::e131::PreviewModeRequest, input_port_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::ola::plugin::e131::InputPortInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ola::plugin::e131::InputPortInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ola::plugin::e131::InputPortInfo, port_id_),
  PROTOBUF_FIELD_OFFSET(::ola::plugin::e131::InputPortInfo, preview_mode_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ola::plugin::e131::OutputPortInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ola::plugin::e131::OutputPortInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ola::plugin::e131::OutputPortInfo, port_id_),
  PROTOBUF_FIELD_OFFSET(::ola::plugin::e131::OutputPortInfo, preview_mode_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ola::plugin::e131::PortInfoReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ola::plugin::e131::PortInfoReply, input_port_),
  PROTOBUF_FIELD_OFFSET(::ola::plugin::e131::PortInfoReply, output_port_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ola::plugin::e131::SourceListRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ola::plugin::e131::SourceEntry, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ola::plugin::e131::SourceEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ola::plugin::e131::SourceEntry, cid_),
  PROTOBUF_FIELD_OFFSET(::ola::plugin::e131::SourceEntry, ip_address_),
  PROTOBUF_FIELD_OFFSET(::ola::plugin::e131::SourceEntry, source_name_),
  PROTOBUF_FIELD_OFFSET(::ola::plugin::e131::SourceEntry, universe_),
  0,
  1,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::ola::plugin::e131::SourceListReply, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ola::plugin::e131::SourceListReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ola::plugin::e131::SourceListReply, unsupported_),
  PROTOBUF_FIELD_OFFSET(::ola::plugin::e131::SourceListReply, source_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::ola::plugin::e131::Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ola::plugin::e131::Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ola::plugin::e131::Request, type_),
  PROTOBUF_FIELD_OFFSET(::ola::plugin::e131::Request, preview_mode_),
  PROTOBUF_FIELD_OFFSET(::ola::plugin::e131::Request, source_list_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ola::plugin::e131::Reply, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ola::plugin::e131::Reply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ola::plugin::e131::Reply, type_),
  PROTOBUF_FIELD_OFFSET(::ola::plugin::e131::Reply, port_info_),
  PROTOBUF_FIELD_OFFSET(::ola::plugin::e131::Reply, source_list_),
  2,
  0,
  1,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::ola::plugin::e131::PreviewModeRequest)},
  { 11, 18, sizeof(::ola::plugin::e131::InputPortInfo)},
  { 20, 27, sizeof(::ola::plugin::e131::OutputPortInfo)},
  { 29, -1, sizeof(::ola::plugin::e131::PortInfoReply)},
  { 36, -1, sizeof(::ola::plugin::e131::SourceListRequest)},
  { 41, 50, sizeof(::ola::plugin::e131::SourceEntry)},
  { 54, 61, sizeof(::ola::plugin::e131::SourceListReply)},
  { 63, 71, sizeof(::ola::plugin::e131::Request)},
  { 74, 82, sizeof(::ola::plugin::e131::Reply)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ola::plugin::e131::_PreviewModeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ola::plugin::e131::_InputPortInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ola::plugin::e131::_OutputPortInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ola::plugin::e131::_PortInfoReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ola::plugin::e131::_SourceListRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ola::plugin::e131::_SourceEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ola::plugin::e131::_SourceListReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ola::plugin::e131::_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ola::plugin::e131::_Reply_default_instance_),
};

const char descriptor_table_protodef_E131ConfigMessages_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\030E131ConfigMessages.proto\022\017ola.plugin.e"
  "131\"O\n\022PreviewModeRequest\022\017\n\007port_id\030\001 \002"
  "(\005\022\024\n\014preview_mode\030\002 \002(\010\022\022\n\ninput_port\030\003"
  " \002(\010\"6\n\rInputPortInfo\022\017\n\007port_id\030\001 \002(\005\022\024"
  "\n\014preview_mode\030\002 \002(\010\"7\n\016OutputPortInfo\022\017"
  "\n\007port_id\030\001 \002(\005\022\024\n\014preview_mode\030\002 \002(\010\"y\n"
  "\rPortInfoReply\0222\n\ninput_port\030\001 \003(\0132\036.ola"
  ".plugin.e131.InputPortInfo\0224\n\013output_por"
  "t\030\002 \003(\0132\037.ola.plugin.e131.OutputPortInfo"
  "\"\023\n\021SourceListRequest\"U\n\013SourceEntry\022\013\n\003"
  "cid\030\001 \002(\t\022\022\n\nip_address\030\002 \002(\t\022\023\n\013source_"
  "name\030\003 \001(\t\022\020\n\010universe\030\004 \003(\005\"Z\n\017SourceLi"
  "stReply\022\031\n\013unsupported\030\001 \001(\010:\004true\022,\n\006so"
  "urce\030\002 \003(\0132\034.ola.plugin.e131.SourceEntry"
  "\"\202\002\n\007Request\0222\n\004type\030\001 \002(\0162$.ola.plugin."
  "e131.Request.RequestType\0229\n\014preview_mode"
  "\030\002 \001(\0132#.ola.plugin.e131.PreviewModeRequ"
  "est\0227\n\013source_list\030\003 \001(\0132\".ola.plugin.e1"
  "31.SourceListRequest\"O\n\013RequestType\022\022\n\016E"
  "131_PORT_INFO\020\001\022\025\n\021E131_PREVIEW_MODE\020\002\022\025"
  "\n\021E131_SOURCES_LIST\020\003\"\331\001\n\005Reply\022.\n\004type\030"
  "\001 \002(\0162 .ola.plugin.e131.Reply.ReplyType\022"
  "1\n\tport_info\030\002 \001(\0132\036.ola.plugin.e131.Por"
  "tInfoReply\0225\n\013source_list\030\003 \001(\0132 .ola.pl"
  "ugin.e131.SourceListReply\"6\n\tReplyType\022\022"
  "\n\016E131_PORT_INFO\020\001\022\025\n\021E131_SOURCES_LIST\020"
  "\002"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_E131ConfigMessages_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_E131ConfigMessages_2eproto_sccs[9] = {
  &scc_info_InputPortInfo_E131ConfigMessages_2eproto.base,
  &scc_info_OutputPortInfo_E131ConfigMessages_2eproto.base,
  &scc_info_PortInfoReply_E131ConfigMessages_2eproto.base,
  &scc_info_PreviewModeRequest_E131ConfigMessages_2eproto.base,
  &scc_info_Reply_E131ConfigMessages_2eproto.base,
  &scc_info_Request_E131ConfigMessages_2eproto.base,
  &scc_info_SourceEntry_E131ConfigMessages_2eproto.base,
  &scc_info_SourceListReply_E131ConfigMessages_2eproto.base,
  &scc_info_SourceListRequest_E131ConfigMessages_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_E131ConfigMessages_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_E131ConfigMessages_2eproto = {
  false, false, descriptor_table_protodef_E131ConfigMessages_2eproto, "E131ConfigMessages.proto", 1041,
  &descriptor_table_E131ConfigMessages_2eproto_once, descriptor_table_E131ConfigMessages_2eproto_sccs, descriptor_table_E131ConfigMessages_2eproto_deps, 9, 0,
  schemas, file_default_instances, TableStruct_E131ConfigMessages_2eproto::offsets,
  file_level_metadata_E131ConfigMessages_2eproto, 9, file_level_enum_descriptors_E131ConfigMessages_2eproto, file_level_service_descriptors_E131ConfigMessages_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_E131ConfigMessages_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_E131ConfigMessages_2eproto)), true);
namespace ola {
namespace plugin {
namespace e131 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Request_RequestType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_E131ConfigMessages_2eproto);
  return file_level_enum_descriptors_E131ConfigMessages_2eproto[0];
}
bool Request_RequestType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Request_RequestType Request::E131_PORT_INFO;
constexpr Request_RequestType Request::E131_PREVIEW_MODE;
constexpr Request_RequestType Request::E131_SOURCES_LIST;
constexpr Request_RequestType Request::RequestType_MIN;
constexpr Request_RequestType Request::RequestType_MAX;
constexpr int Request::RequestType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Reply_ReplyType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_E131ConfigMessages_2eproto);
  return file_level_enum_descriptors_E131ConfigMessages_2eproto[1];
}
bool Reply_ReplyType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Reply_ReplyType Reply::E131_PORT_INFO;
constexpr Reply_ReplyType Reply::E131_SOURCES_LIST;
constexpr Reply_ReplyType Reply::ReplyType_MIN;
constexpr Reply_ReplyType Reply::ReplyType_MAX;
constexpr int Reply::ReplyType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void PreviewModeRequest::InitAsDefaultInstance() {
}
class PreviewModeRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<PreviewModeRequest>()._has_bits_);
  static void set_has_port_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_preview_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_input_port(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

PreviewModeRequest::PreviewModeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ola.plugin.e131.PreviewModeRequest)
}
PreviewModeRequest::PreviewModeRequest(const PreviewModeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&port_id_, &from.port_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&input_port_) -
    reinterpret_cast<char*>(&port_id_)) + sizeof(input_port_));
  // @@protoc_insertion_point(copy_constructor:ola.plugin.e131.PreviewModeRequest)
}

void PreviewModeRequest::SharedCtor() {
  ::memset(&port_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&input_port_) -
      reinterpret_cast<char*>(&port_id_)) + sizeof(input_port_));
}

PreviewModeRequest::~PreviewModeRequest() {
  // @@protoc_insertion_point(destructor:ola.plugin.e131.PreviewModeRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PreviewModeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PreviewModeRequest::ArenaDtor(void* object) {
  PreviewModeRequest* _this = reinterpret_cast< PreviewModeRequest* >(object);
  (void)_this;
}
void PreviewModeRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PreviewModeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PreviewModeRequest& PreviewModeRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PreviewModeRequest_E131ConfigMessages_2eproto.base);
  return *internal_default_instance();
}


void PreviewModeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ola.plugin.e131.PreviewModeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&port_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&input_port_) -
        reinterpret_cast<char*>(&port_id_)) + sizeof(input_port_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PreviewModeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 port_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_port_id(&has_bits);
          port_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool preview_mode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_preview_mode(&has_bits);
          preview_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool input_port = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_input_port(&has_bits);
          input_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PreviewModeRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ola.plugin.e131.PreviewModeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 port_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_port_id(), target);
  }

  // required bool preview_mode = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_preview_mode(), target);
  }

  // required bool input_port = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_input_port(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ola.plugin.e131.PreviewModeRequest)
  return target;
}

size_t PreviewModeRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ola.plugin.e131.PreviewModeRequest)
  size_t total_size = 0;

  if (_internal_has_port_id()) {
    // required int32 port_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_port_id());
  }

  if (_internal_has_preview_mode()) {
    // required bool preview_mode = 2;
    total_size += 1 + 1;
  }

  if (_internal_has_input_port()) {
    // required bool input_port = 3;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t PreviewModeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ola.plugin.e131.PreviewModeRequest)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int32 port_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_port_id());

    // required bool preview_mode = 2;
    total_size += 1 + 1;

    // required bool input_port = 3;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PreviewModeRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ola.plugin.e131.PreviewModeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PreviewModeRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PreviewModeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ola.plugin.e131.PreviewModeRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ola.plugin.e131.PreviewModeRequest)
    MergeFrom(*source);
  }
}

void PreviewModeRequest::MergeFrom(const PreviewModeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ola.plugin.e131.PreviewModeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      port_id_ = from.port_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      preview_mode_ = from.preview_mode_;
    }
    if (cached_has_bits & 0x00000004u) {
      input_port_ = from.input_port_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PreviewModeRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ola.plugin.e131.PreviewModeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PreviewModeRequest::CopyFrom(const PreviewModeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ola.plugin.e131.PreviewModeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PreviewModeRequest::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void PreviewModeRequest::InternalSwap(PreviewModeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PreviewModeRequest, input_port_)
      + sizeof(PreviewModeRequest::input_port_)
      - PROTOBUF_FIELD_OFFSET(PreviewModeRequest, port_id_)>(
          reinterpret_cast<char*>(&port_id_),
          reinterpret_cast<char*>(&other->port_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PreviewModeRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void InputPortInfo::InitAsDefaultInstance() {
}
class InputPortInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<InputPortInfo>()._has_bits_);
  static void set_has_port_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_preview_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

InputPortInfo::InputPortInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ola.plugin.e131.InputPortInfo)
}
InputPortInfo::InputPortInfo(const InputPortInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&port_id_, &from.port_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&preview_mode_) -
    reinterpret_cast<char*>(&port_id_)) + sizeof(preview_mode_));
  // @@protoc_insertion_point(copy_constructor:ola.plugin.e131.InputPortInfo)
}

void InputPortInfo::SharedCtor() {
  ::memset(&port_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&preview_mode_) -
      reinterpret_cast<char*>(&port_id_)) + sizeof(preview_mode_));
}

InputPortInfo::~InputPortInfo() {
  // @@protoc_insertion_point(destructor:ola.plugin.e131.InputPortInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InputPortInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void InputPortInfo::ArenaDtor(void* object) {
  InputPortInfo* _this = reinterpret_cast< InputPortInfo* >(object);
  (void)_this;
}
void InputPortInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InputPortInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InputPortInfo& InputPortInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InputPortInfo_E131ConfigMessages_2eproto.base);
  return *internal_default_instance();
}


void InputPortInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ola.plugin.e131.InputPortInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&port_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&preview_mode_) -
        reinterpret_cast<char*>(&port_id_)) + sizeof(preview_mode_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InputPortInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 port_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_port_id(&has_bits);
          port_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool preview_mode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_preview_mode(&has_bits);
          preview_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InputPortInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ola.plugin.e131.InputPortInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 port_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_port_id(), target);
  }

  // required bool preview_mode = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_preview_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ola.plugin.e131.InputPortInfo)
  return target;
}

size_t InputPortInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ola.plugin.e131.InputPortInfo)
  size_t total_size = 0;

  if (_internal_has_port_id()) {
    // required int32 port_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_port_id());
  }

  if (_internal_has_preview_mode()) {
    // required bool preview_mode = 2;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t InputPortInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ola.plugin.e131.InputPortInfo)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 port_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_port_id());

    // required bool preview_mode = 2;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InputPortInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ola.plugin.e131.InputPortInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const InputPortInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InputPortInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ola.plugin.e131.InputPortInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ola.plugin.e131.InputPortInfo)
    MergeFrom(*source);
  }
}

void InputPortInfo::MergeFrom(const InputPortInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ola.plugin.e131.InputPortInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      port_id_ = from.port_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      preview_mode_ = from.preview_mode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void InputPortInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ola.plugin.e131.InputPortInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InputPortInfo::CopyFrom(const InputPortInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ola.plugin.e131.InputPortInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InputPortInfo::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void InputPortInfo::InternalSwap(InputPortInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InputPortInfo, preview_mode_)
      + sizeof(InputPortInfo::preview_mode_)
      - PROTOBUF_FIELD_OFFSET(InputPortInfo, port_id_)>(
          reinterpret_cast<char*>(&port_id_),
          reinterpret_cast<char*>(&other->port_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InputPortInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OutputPortInfo::InitAsDefaultInstance() {
}
class OutputPortInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<OutputPortInfo>()._has_bits_);
  static void set_has_port_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_preview_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

OutputPortInfo::OutputPortInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ola.plugin.e131.OutputPortInfo)
}
OutputPortInfo::OutputPortInfo(const OutputPortInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&port_id_, &from.port_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&preview_mode_) -
    reinterpret_cast<char*>(&port_id_)) + sizeof(preview_mode_));
  // @@protoc_insertion_point(copy_constructor:ola.plugin.e131.OutputPortInfo)
}

void OutputPortInfo::SharedCtor() {
  ::memset(&port_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&preview_mode_) -
      reinterpret_cast<char*>(&port_id_)) + sizeof(preview_mode_));
}

OutputPortInfo::~OutputPortInfo() {
  // @@protoc_insertion_point(destructor:ola.plugin.e131.OutputPortInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OutputPortInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void OutputPortInfo::ArenaDtor(void* object) {
  OutputPortInfo* _this = reinterpret_cast< OutputPortInfo* >(object);
  (void)_this;
}
void OutputPortInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OutputPortInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OutputPortInfo& OutputPortInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OutputPortInfo_E131ConfigMessages_2eproto.base);
  return *internal_default_instance();
}


void OutputPortInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ola.plugin.e131.OutputPortInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&port_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&preview_mode_) -
        reinterpret_cast<char*>(&port_id_)) + sizeof(preview_mode_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OutputPortInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 port_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_port_id(&has_bits);
          port_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool preview_mode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_preview_mode(&has_bits);
          preview_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OutputPortInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ola.plugin.e131.OutputPortInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 port_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_port_id(), target);
  }

  // required bool preview_mode = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_preview_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ola.plugin.e131.OutputPortInfo)
  return target;
}

size_t OutputPortInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ola.plugin.e131.OutputPortInfo)
  size_t total_size = 0;

  if (_internal_has_port_id()) {
    // required int32 port_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_port_id());
  }

  if (_internal_has_preview_mode()) {
    // required bool preview_mode = 2;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t OutputPortInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ola.plugin.e131.OutputPortInfo)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 port_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_port_id());

    // required bool preview_mode = 2;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OutputPortInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ola.plugin.e131.OutputPortInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const OutputPortInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OutputPortInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ola.plugin.e131.OutputPortInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ola.plugin.e131.OutputPortInfo)
    MergeFrom(*source);
  }
}

void OutputPortInfo::MergeFrom(const OutputPortInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ola.plugin.e131.OutputPortInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      port_id_ = from.port_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      preview_mode_ = from.preview_mode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void OutputPortInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ola.plugin.e131.OutputPortInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OutputPortInfo::CopyFrom(const OutputPortInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ola.plugin.e131.OutputPortInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OutputPortInfo::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void OutputPortInfo::InternalSwap(OutputPortInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OutputPortInfo, preview_mode_)
      + sizeof(OutputPortInfo::preview_mode_)
      - PROTOBUF_FIELD_OFFSET(OutputPortInfo, port_id_)>(
          reinterpret_cast<char*>(&port_id_),
          reinterpret_cast<char*>(&other->port_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OutputPortInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PortInfoReply::InitAsDefaultInstance() {
}
class PortInfoReply::_Internal {
 public:
};

PortInfoReply::PortInfoReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  input_port_(arena),
  output_port_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ola.plugin.e131.PortInfoReply)
}
PortInfoReply::PortInfoReply(const PortInfoReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      input_port_(from.input_port_),
      output_port_(from.output_port_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ola.plugin.e131.PortInfoReply)
}

void PortInfoReply::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PortInfoReply_E131ConfigMessages_2eproto.base);
}

PortInfoReply::~PortInfoReply() {
  // @@protoc_insertion_point(destructor:ola.plugin.e131.PortInfoReply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PortInfoReply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PortInfoReply::ArenaDtor(void* object) {
  PortInfoReply* _this = reinterpret_cast< PortInfoReply* >(object);
  (void)_this;
}
void PortInfoReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PortInfoReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PortInfoReply& PortInfoReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PortInfoReply_E131ConfigMessages_2eproto.base);
  return *internal_default_instance();
}


void PortInfoReply::Clear() {
// @@protoc_insertion_point(message_clear_start:ola.plugin.e131.PortInfoReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  input_port_.Clear();
  output_port_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PortInfoReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .ola.plugin.e131.InputPortInfo input_port = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_input_port(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ola.plugin.e131.OutputPortInfo output_port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_output_port(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PortInfoReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ola.plugin.e131.PortInfoReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ola.plugin.e131.InputPortInfo input_port = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_input_port_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_input_port(i), target, stream);
  }

  // repeated .ola.plugin.e131.OutputPortInfo output_port = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_output_port_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_output_port(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ola.plugin.e131.PortInfoReply)
  return target;
}

size_t PortInfoReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ola.plugin.e131.PortInfoReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ola.plugin.e131.InputPortInfo input_port = 1;
  total_size += 1UL * this->_internal_input_port_size();
  for (const auto& msg : this->input_port_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ola.plugin.e131.OutputPortInfo output_port = 2;
  total_size += 1UL * this->_internal_output_port_size();
  for (const auto& msg : this->output_port_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PortInfoReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ola.plugin.e131.PortInfoReply)
  GOOGLE_DCHECK_NE(&from, this);
  const PortInfoReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PortInfoReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ola.plugin.e131.PortInfoReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ola.plugin.e131.PortInfoReply)
    MergeFrom(*source);
  }
}

void PortInfoReply::MergeFrom(const PortInfoReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ola.plugin.e131.PortInfoReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  input_port_.MergeFrom(from.input_port_);
  output_port_.MergeFrom(from.output_port_);
}

void PortInfoReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ola.plugin.e131.PortInfoReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PortInfoReply::CopyFrom(const PortInfoReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ola.plugin.e131.PortInfoReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PortInfoReply::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(input_port_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(output_port_)) return false;
  return true;
}

void PortInfoReply::InternalSwap(PortInfoReply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  input_port_.InternalSwap(&other->input_port_);
  output_port_.InternalSwap(&other->output_port_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PortInfoReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SourceListRequest::InitAsDefaultInstance() {
}
class SourceListRequest::_Internal {
 public:
};

SourceListRequest::SourceListRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ola.plugin.e131.SourceListRequest)
}
SourceListRequest::SourceListRequest(const SourceListRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ola.plugin.e131.SourceListRequest)
}

void SourceListRequest::SharedCtor() {
}

SourceListRequest::~SourceListRequest() {
  // @@protoc_insertion_point(destructor:ola.plugin.e131.SourceListRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SourceListRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SourceListRequest::ArenaDtor(void* object) {
  SourceListRequest* _this = reinterpret_cast< SourceListRequest* >(object);
  (void)_this;
}
void SourceListRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SourceListRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SourceListRequest& SourceListRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SourceListRequest_E131ConfigMessages_2eproto.base);
  return *internal_default_instance();
}


void SourceListRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ola.plugin.e131.SourceListRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SourceListRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SourceListRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ola.plugin.e131.SourceListRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ola.plugin.e131.SourceListRequest)
  return target;
}

size_t SourceListRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ola.plugin.e131.SourceListRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SourceListRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ola.plugin.e131.SourceListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SourceListRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SourceListRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ola.plugin.e131.SourceListRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ola.plugin.e131.SourceListRequest)
    MergeFrom(*source);
  }
}

void SourceListRequest::MergeFrom(const SourceListRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ola.plugin.e131.SourceListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SourceListRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ola.plugin.e131.SourceListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SourceListRequest::CopyFrom(const SourceListRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ola.plugin.e131.SourceListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SourceListRequest::IsInitialized() const {
  return true;
}

void SourceListRequest::InternalSwap(SourceListRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SourceListRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SourceEntry::InitAsDefaultInstance() {
}
class SourceEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<SourceEntry>()._has_bits_);
  static void set_has_cid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ip_address(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_source_name(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

SourceEntry::SourceEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  universe_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ola.plugin.e131.SourceEntry)
}
SourceEntry::SourceEntry(const SourceEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      universe_(from.universe_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  cid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_cid()) {
    cid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_cid(),
      GetArena());
  }
  ip_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ip_address()) {
    ip_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ip_address(),
      GetArena());
  }
  source_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_source_name()) {
    source_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_source_name(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:ola.plugin.e131.SourceEntry)
}

void SourceEntry::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SourceEntry_E131ConfigMessages_2eproto.base);
  cid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ip_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  source_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SourceEntry::~SourceEntry() {
  // @@protoc_insertion_point(destructor:ola.plugin.e131.SourceEntry)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SourceEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  cid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ip_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  source_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SourceEntry::ArenaDtor(void* object) {
  SourceEntry* _this = reinterpret_cast< SourceEntry* >(object);
  (void)_this;
}
void SourceEntry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SourceEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SourceEntry& SourceEntry::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SourceEntry_E131ConfigMessages_2eproto.base);
  return *internal_default_instance();
}


void SourceEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:ola.plugin.e131.SourceEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  universe_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      cid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      ip_address_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      source_name_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SourceEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string cid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_cid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ola.plugin.e131.SourceEntry.cid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string ip_address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_ip_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ola.plugin.e131.SourceEntry.ip_address");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string source_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_source_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ola.plugin.e131.SourceEntry.source_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 universe = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_universe(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<32>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_universe(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SourceEntry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ola.plugin.e131.SourceEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string cid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_cid().data(), static_cast<int>(this->_internal_cid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ola.plugin.e131.SourceEntry.cid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_cid(), target);
  }

  // required string ip_address = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ip_address().data(), static_cast<int>(this->_internal_ip_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ola.plugin.e131.SourceEntry.ip_address");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_ip_address(), target);
  }

  // optional string source_name = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_source_name().data(), static_cast<int>(this->_internal_source_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ola.plugin.e131.SourceEntry.source_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_source_name(), target);
  }

  // repeated int32 universe = 4;
  for (int i = 0, n = this->_internal_universe_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_universe(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ola.plugin.e131.SourceEntry)
  return target;
}

size_t SourceEntry::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ola.plugin.e131.SourceEntry)
  size_t total_size = 0;

  if (_internal_has_cid()) {
    // required string cid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cid());
  }

  if (_internal_has_ip_address()) {
    // required string ip_address = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip_address());
  }

  return total_size;
}
size_t SourceEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ola.plugin.e131.SourceEntry)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string cid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cid());

    // required string ip_address = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip_address());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 universe = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->universe_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_universe_size());
    total_size += data_size;
  }

  // optional string source_name = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_source_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SourceEntry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ola.plugin.e131.SourceEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const SourceEntry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SourceEntry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ola.plugin.e131.SourceEntry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ola.plugin.e131.SourceEntry)
    MergeFrom(*source);
  }
}

void SourceEntry::MergeFrom(const SourceEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ola.plugin.e131.SourceEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  universe_.MergeFrom(from.universe_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_cid(from._internal_cid());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_ip_address(from._internal_ip_address());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_source_name(from._internal_source_name());
    }
  }
}

void SourceEntry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ola.plugin.e131.SourceEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SourceEntry::CopyFrom(const SourceEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ola.plugin.e131.SourceEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SourceEntry::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void SourceEntry::InternalSwap(SourceEntry* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  universe_.InternalSwap(&other->universe_);
  cid_.Swap(&other->cid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ip_address_.Swap(&other->ip_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  source_name_.Swap(&other->source_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata SourceEntry::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SourceListReply::InitAsDefaultInstance() {
}
class SourceListReply::_Internal {
 public:
  using HasBits = decltype(std::declval<SourceListReply>()._has_bits_);
  static void set_has_unsupported(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SourceListReply::SourceListReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  source_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ola.plugin.e131.SourceListReply)
}
SourceListReply::SourceListReply(const SourceListReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      source_(from.source_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  unsupported_ = from.unsupported_;
  // @@protoc_insertion_point(copy_constructor:ola.plugin.e131.SourceListReply)
}

void SourceListReply::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SourceListReply_E131ConfigMessages_2eproto.base);
  unsupported_ = true;
}

SourceListReply::~SourceListReply() {
  // @@protoc_insertion_point(destructor:ola.plugin.e131.SourceListReply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SourceListReply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SourceListReply::ArenaDtor(void* object) {
  SourceListReply* _this = reinterpret_cast< SourceListReply* >(object);
  (void)_this;
}
void SourceListReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SourceListReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SourceListReply& SourceListReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SourceListReply_E131ConfigMessages_2eproto.base);
  return *internal_default_instance();
}


void SourceListReply::Clear() {
// @@protoc_insertion_point(message_clear_start:ola.plugin.e131.SourceListReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  source_.Clear();
  unsupported_ = true;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SourceListReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool unsupported = 1 [default = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_unsupported(&has_bits);
          unsupported_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ola.plugin.e131.SourceEntry source = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_source(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SourceListReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ola.plugin.e131.SourceListReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool unsupported = 1 [default = true];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_unsupported(), target);
  }

  // repeated .ola.plugin.e131.SourceEntry source = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_source_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_source(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ola.plugin.e131.SourceListReply)
  return target;
}

size_t SourceListReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ola.plugin.e131.SourceListReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ola.plugin.e131.SourceEntry source = 2;
  total_size += 1UL * this->_internal_source_size();
  for (const auto& msg : this->source_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional bool unsupported = 1 [default = true];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SourceListReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ola.plugin.e131.SourceListReply)
  GOOGLE_DCHECK_NE(&from, this);
  const SourceListReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SourceListReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ola.plugin.e131.SourceListReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ola.plugin.e131.SourceListReply)
    MergeFrom(*source);
  }
}

void SourceListReply::MergeFrom(const SourceListReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ola.plugin.e131.SourceListReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  source_.MergeFrom(from.source_);
  if (from._internal_has_unsupported()) {
    _internal_set_unsupported(from._internal_unsupported());
  }
}

void SourceListReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ola.plugin.e131.SourceListReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SourceListReply::CopyFrom(const SourceListReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ola.plugin.e131.SourceListReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SourceListReply::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(source_)) return false;
  return true;
}

void SourceListReply::InternalSwap(SourceListReply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  source_.InternalSwap(&other->source_);
  swap(unsupported_, other->unsupported_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SourceListReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Request::InitAsDefaultInstance() {
  ::ola::plugin::e131::_Request_default_instance_._instance.get_mutable()->preview_mode_ = const_cast< ::ola::plugin::e131::PreviewModeRequest*>(
      ::ola::plugin::e131::PreviewModeRequest::internal_default_instance());
  ::ola::plugin::e131::_Request_default_instance_._instance.get_mutable()->source_list_ = const_cast< ::ola::plugin::e131::SourceListRequest*>(
      ::ola::plugin::e131::SourceListRequest::internal_default_instance());
}
class Request::_Internal {
 public:
  using HasBits = decltype(std::declval<Request>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::ola::plugin::e131::PreviewModeRequest& preview_mode(const Request* msg);
  static void set_has_preview_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ola::plugin::e131::SourceListRequest& source_list(const Request* msg);
  static void set_has_source_list(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000004) ^ 0x00000004) != 0;
  }
};

const ::ola::plugin::e131::PreviewModeRequest&
Request::_Internal::preview_mode(const Request* msg) {
  return *msg->preview_mode_;
}
const ::ola::plugin::e131::SourceListRequest&
Request::_Internal::source_list(const Request* msg) {
  return *msg->source_list_;
}
Request::Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ola.plugin.e131.Request)
}
Request::Request(const Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_preview_mode()) {
    preview_mode_ = new ::ola::plugin::e131::PreviewModeRequest(*from.preview_mode_);
  } else {
    preview_mode_ = nullptr;
  }
  if (from._internal_has_source_list()) {
    source_list_ = new ::ola::plugin::e131::SourceListRequest(*from.source_list_);
  } else {
    source_list_ = nullptr;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:ola.plugin.e131.Request)
}

void Request::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Request_E131ConfigMessages_2eproto.base);
  ::memset(&preview_mode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&source_list_) -
      reinterpret_cast<char*>(&preview_mode_)) + sizeof(source_list_));
  type_ = 1;
}

Request::~Request() {
  // @@protoc_insertion_point(destructor:ola.plugin.e131.Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete preview_mode_;
  if (this != internal_default_instance()) delete source_list_;
}

void Request::ArenaDtor(void* object) {
  Request* _this = reinterpret_cast< Request* >(object);
  (void)_this;
}
void Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Request& Request::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Request_E131ConfigMessages_2eproto.base);
  return *internal_default_instance();
}


void Request::Clear() {
// @@protoc_insertion_point(message_clear_start:ola.plugin.e131.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(preview_mode_ != nullptr);
      preview_mode_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(source_list_ != nullptr);
      source_list_->Clear();
    }
    type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .ola.plugin.e131.Request.RequestType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ola::plugin::e131::Request_RequestType_IsValid(val))) {
            _internal_set_type(static_cast<::ola::plugin::e131::Request_RequestType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .ola.plugin.e131.PreviewModeRequest preview_mode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_preview_mode(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ola.plugin.e131.SourceListRequest source_list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_source_list(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ola.plugin.e131.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ola.plugin.e131.Request.RequestType type = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // optional .ola.plugin.e131.PreviewModeRequest preview_mode = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::preview_mode(this), target, stream);
  }

  // optional .ola.plugin.e131.SourceListRequest source_list = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::source_list(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ola.plugin.e131.Request)
  return target;
}

size_t Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ola.plugin.e131.Request)
  size_t total_size = 0;

  // required .ola.plugin.e131.Request.RequestType type = 1;
  if (_internal_has_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .ola.plugin.e131.PreviewModeRequest preview_mode = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *preview_mode_);
    }

    // optional .ola.plugin.e131.SourceListRequest source_list = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *source_list_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ola.plugin.e131.Request)
  GOOGLE_DCHECK_NE(&from, this);
  const Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ola.plugin.e131.Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ola.plugin.e131.Request)
    MergeFrom(*source);
  }
}

void Request::MergeFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ola.plugin.e131.Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_preview_mode()->::ola::plugin::e131::PreviewModeRequest::MergeFrom(from._internal_preview_mode());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_source_list()->::ola::plugin::e131::SourceListRequest::MergeFrom(from._internal_source_list());
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ola.plugin.e131.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request::CopyFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ola.plugin.e131.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_preview_mode()) {
    if (!preview_mode_->IsInitialized()) return false;
  }
  return true;
}

void Request::InternalSwap(Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Request, source_list_)
      + sizeof(Request::source_list_)
      - PROTOBUF_FIELD_OFFSET(Request, preview_mode_)>(
          reinterpret_cast<char*>(&preview_mode_),
          reinterpret_cast<char*>(&other->preview_mode_));
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Reply::InitAsDefaultInstance() {
  ::ola::plugin::e131::_Reply_default_instance_._instance.get_mutable()->port_info_ = const_cast< ::ola::plugin::e131::PortInfoReply*>(
      ::ola::plugin::e131::PortInfoReply::internal_default_instance());
  ::ola::plugin::e131::_Reply_default_instance_._instance.get_mutable()->source_list_ = const_cast< ::ola::plugin::e131::SourceListReply*>(
      ::ola::plugin::e131::SourceListReply::internal_default_instance());
}
class Reply::_Internal {
 public:
  using HasBits = decltype(std::declval<Reply>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::ola::plugin::e131::PortInfoReply& port_info(const Reply* msg);
  static void set_has_port_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ola::plugin::e131::SourceListReply& source_list(const Reply* msg);
  static void set_has_source_list(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000004) ^ 0x00000004) != 0;
  }
};

const ::ola::plugin::e131::PortInfoReply&
Reply::_Internal::port_info(const Reply* msg) {
  return *msg->port_info_;
}
const ::ola::plugin::e131::SourceListReply&
Reply::_Internal::source_list(const Reply* msg) {
  return *msg->source_list_;
}
Reply::Reply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ola.plugin.e131.Reply)
}
Reply::Reply(const Reply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_port_info()) {
    port_info_ = new ::ola::plugin::e131::PortInfoReply(*from.port_info_);
  } else {
    port_info_ = nullptr;
  }
  if (from._internal_has_source_list()) {
    source_list_ = new ::ola::plugin::e131::SourceListReply(*from.source_list_);
  } else {
    source_list_ = nullptr;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:ola.plugin.e131.Reply)
}

void Reply::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Reply_E131ConfigMessages_2eproto.base);
  ::memset(&port_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&source_list_) -
      reinterpret_cast<char*>(&port_info_)) + sizeof(source_list_));
  type_ = 1;
}

Reply::~Reply() {
  // @@protoc_insertion_point(destructor:ola.plugin.e131.Reply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Reply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete port_info_;
  if (this != internal_default_instance()) delete source_list_;
}

void Reply::ArenaDtor(void* object) {
  Reply* _this = reinterpret_cast< Reply* >(object);
  (void)_this;
}
void Reply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Reply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Reply& Reply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Reply_E131ConfigMessages_2eproto.base);
  return *internal_default_instance();
}


void Reply::Clear() {
// @@protoc_insertion_point(message_clear_start:ola.plugin.e131.Reply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(port_info_ != nullptr);
      port_info_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(source_list_ != nullptr);
      source_list_->Clear();
    }
    type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Reply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .ola.plugin.e131.Reply.ReplyType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ola::plugin::e131::Reply_ReplyType_IsValid(val))) {
            _internal_set_type(static_cast<::ola::plugin::e131::Reply_ReplyType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .ola.plugin.e131.PortInfoReply port_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_port_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ola.plugin.e131.SourceListReply source_list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_source_list(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Reply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ola.plugin.e131.Reply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ola.plugin.e131.Reply.ReplyType type = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // optional .ola.plugin.e131.PortInfoReply port_info = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::port_info(this), target, stream);
  }

  // optional .ola.plugin.e131.SourceListReply source_list = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::source_list(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ola.plugin.e131.Reply)
  return target;
}

size_t Reply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ola.plugin.e131.Reply)
  size_t total_size = 0;

  // required .ola.plugin.e131.Reply.ReplyType type = 1;
  if (_internal_has_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .ola.plugin.e131.PortInfoReply port_info = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *port_info_);
    }

    // optional .ola.plugin.e131.SourceListReply source_list = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *source_list_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Reply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ola.plugin.e131.Reply)
  GOOGLE_DCHECK_NE(&from, this);
  const Reply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Reply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ola.plugin.e131.Reply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ola.plugin.e131.Reply)
    MergeFrom(*source);
  }
}

void Reply::MergeFrom(const Reply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ola.plugin.e131.Reply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_port_info()->::ola::plugin::e131::PortInfoReply::MergeFrom(from._internal_port_info());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_source_list()->::ola::plugin::e131::SourceListReply::MergeFrom(from._internal_source_list());
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Reply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ola.plugin.e131.Reply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Reply::CopyFrom(const Reply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ola.plugin.e131.Reply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Reply::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_port_info()) {
    if (!port_info_->IsInitialized()) return false;
  }
  if (_internal_has_source_list()) {
    if (!source_list_->IsInitialized()) return false;
  }
  return true;
}

void Reply::InternalSwap(Reply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Reply, source_list_)
      + sizeof(Reply::source_list_)
      - PROTOBUF_FIELD_OFFSET(Reply, port_info_)>(
          reinterpret_cast<char*>(&port_info_),
          reinterpret_cast<char*>(&other->port_info_));
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Reply::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace e131
}  // namespace plugin
}  // namespace ola
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ola::plugin::e131::PreviewModeRequest* Arena::CreateMaybeMessage< ::ola::plugin::e131::PreviewModeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ola::plugin::e131::PreviewModeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ola::plugin::e131::InputPortInfo* Arena::CreateMaybeMessage< ::ola::plugin::e131::InputPortInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ola::plugin::e131::InputPortInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::ola::plugin::e131::OutputPortInfo* Arena::CreateMaybeMessage< ::ola::plugin::e131::OutputPortInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ola::plugin::e131::OutputPortInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::ola::plugin::e131::PortInfoReply* Arena::CreateMaybeMessage< ::ola::plugin::e131::PortInfoReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ola::plugin::e131::PortInfoReply >(arena);
}
template<> PROTOBUF_NOINLINE ::ola::plugin::e131::SourceListRequest* Arena::CreateMaybeMessage< ::ola::plugin::e131::SourceListRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ola::plugin::e131::SourceListRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ola::plugin::e131::SourceEntry* Arena::CreateMaybeMessage< ::ola::plugin::e131::SourceEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ola::plugin::e131::SourceEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::ola::plugin::e131::SourceListReply* Arena::CreateMaybeMessage< ::ola::plugin::e131::SourceListReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ola::plugin::e131::SourceListReply >(arena);
}
template<> PROTOBUF_NOINLINE ::ola::plugin::e131::Request* Arena::CreateMaybeMessage< ::ola::plugin::e131::Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ola::plugin::e131::Request >(arena);
}
template<> PROTOBUF_NOINLINE ::ola::plugin::e131::Reply* Arena::CreateMaybeMessage< ::ola::plugin::e131::Reply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ola::plugin::e131::Reply >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
