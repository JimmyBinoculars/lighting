/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Library General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * SPIPluginDescription.h
 * Contains the description for the spi plugin.
 * Copyright (C) 2016 Florian Edelmann
 *
 * This file has been autogenerated by convert_README_to_header.sh, DO NOT EDIT.
 */
#ifndef PLUGINS_SPI_SPIPLUGINDESCRIPTION_H_
#define PLUGINS_SPI_SPIPLUGINDESCRIPTION_H_

namespace ola {
namespace plugin {
namespace spi {

const char plugin_description[] = "SPI Plugin\n"
"==========\n"
"\n"
"This plugin enables control of LED pixel strings using SPI. Each SPI output\n"
"is represented as an OLA Device. Devices can have multiple Ports, each of\n"
"which controls a pixel string. Each Port can use a different personality\n"
"(pixel type) and DMX start address, this allows a combination of various\n"
"strings lengths & pixel hardware types. The start address and personality\n"
"settings are controllable via RDM (each Port appears as a RDM responder).\n"
"\n"
"To support multiple ports per SPI output, we use an SPI-Backend. Two\n"
"backends are supported right now, a software backend which concatenates all\n"
"the pixel data into a single buffer and a hardware multiplexer backend which\n"
"uses the GPIO pins to control an off-host multiplexer. It's recommended to\n"
"use the hardware multiplexer.\n"
"\n"
"\n"
"## Config file: `ola-spi.conf`\n"
"\n"
"`base_uid = <string>`  \n"
"The starting UID to use for the SPI RDM, e.g. `7a70:00000100`.\n"
"\n"
"`device_prefix = <string>`  \n"
"The prefix of files to match in `/dev`. Usually set to `spidev`. Each match\n"
"will instantiate a Device.\n"
"\n"
"### Per Device Settings\n"
"\n"
"`<device>-spi-speed = <int>`  \n"
"The speed of the SPI bus, range is 0 - 32000000 Hz.\n"
"\n"
"`<device>-ce-high = <bool>`  \n"
"The mode of the CE pin. Set to false this pulls the CE pin low when writing\n"
"data. Set to true this will pull the pin high when writing.\n"
"\n"
"`<device>-backend = [software | hardware]`  \n"
"The backend to use to multiplex the SPI data.\n"
"\n"
"`<device>-gpio-pin = <int>`  \n"
"The GPIO pins to use for the hardware multiplexer. Add one line for each\n"
"pin. The number of ports will be 2 ^ (# of pins).\n"
"\n"
"`<device>-ports = <int>`  \n"
"If the software backend is used, this defines the number of ports which will\n"
"be created.\n"
"\n"
"`<device>-sync-ports = <int>`  \n"
"Controls which port triggers a flush (write) of the SPI data. If set to -1\n"
"the SPI data is written when any port changes. This can result in a lot of\n"
"data writes (slow) and partial frames. If set to -2, the last port is used.\n"
"\n"
"\n"
"### Per Port Settings\n"
"\n"
"Ports are indexed from 0.\n"
"\n"
"`<device>-<port>-dmx-address = <int>`  \n"
"The DMX address to use. e.g. `spidev0.1-0-dmx-address = 1`\n"
"\n"
"`<device>-<port>-device-label = <string>`  \n"
"The RDM device label to use.\n"
"\n"
"`<device>-<port>-personality = <int>`  \n"
"The RDM personality to use.\n"
"\n"
"`<device>-<port>-pixel-count = <int>`  \n"
"The number of pixels for this port. e.g. `spidev0.1-1-pixel-count = 20`";

}  // namespace spi
}  // namespace plugin
}  // namespace ola

#endif  // PLUGINS_SPI_SPIPLUGINDESCRIPTION_H_
