// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ArtNetConfigMessages.proto

#include "ArtNetConfigMessages.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_ArtNetConfigMessages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NodeListReply_ArtNetConfigMessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ArtNetConfigMessages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NodeListRequest_ArtNetConfigMessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ArtNetConfigMessages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OptionsReply_ArtNetConfigMessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ArtNetConfigMessages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OptionsRequest_ArtNetConfigMessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ArtNetConfigMessages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OutputNode_ArtNetConfigMessages_2eproto;
namespace ola {
namespace plugin {
namespace artnet {
class OptionsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OptionsRequest> _instance;
} _OptionsRequest_default_instance_;
class OptionsReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OptionsReply> _instance;
} _OptionsReply_default_instance_;
class NodeListRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NodeListRequest> _instance;
} _NodeListRequest_default_instance_;
class OutputNodeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OutputNode> _instance;
} _OutputNode_default_instance_;
class NodeListReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NodeListReply> _instance;
} _NodeListReply_default_instance_;
class RequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Request> _instance;
} _Request_default_instance_;
class ReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Reply> _instance;
} _Reply_default_instance_;
}  // namespace artnet
}  // namespace plugin
}  // namespace ola
static void InitDefaultsscc_info_NodeListReply_ArtNetConfigMessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ola::plugin::artnet::_NodeListReply_default_instance_;
    new (ptr) ::ola::plugin::artnet::NodeListReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ola::plugin::artnet::NodeListReply::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NodeListReply_ArtNetConfigMessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_NodeListReply_ArtNetConfigMessages_2eproto}, {
      &scc_info_OutputNode_ArtNetConfigMessages_2eproto.base,}};

static void InitDefaultsscc_info_NodeListRequest_ArtNetConfigMessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ola::plugin::artnet::_NodeListRequest_default_instance_;
    new (ptr) ::ola::plugin::artnet::NodeListRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ola::plugin::artnet::NodeListRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NodeListRequest_ArtNetConfigMessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NodeListRequest_ArtNetConfigMessages_2eproto}, {}};

static void InitDefaultsscc_info_OptionsReply_ArtNetConfigMessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ola::plugin::artnet::_OptionsReply_default_instance_;
    new (ptr) ::ola::plugin::artnet::OptionsReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ola::plugin::artnet::OptionsReply::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OptionsReply_ArtNetConfigMessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OptionsReply_ArtNetConfigMessages_2eproto}, {}};

static void InitDefaultsscc_info_OptionsRequest_ArtNetConfigMessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ola::plugin::artnet::_OptionsRequest_default_instance_;
    new (ptr) ::ola::plugin::artnet::OptionsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ola::plugin::artnet::OptionsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OptionsRequest_ArtNetConfigMessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OptionsRequest_ArtNetConfigMessages_2eproto}, {}};

static void InitDefaultsscc_info_OutputNode_ArtNetConfigMessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ola::plugin::artnet::_OutputNode_default_instance_;
    new (ptr) ::ola::plugin::artnet::OutputNode();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ola::plugin::artnet::OutputNode::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OutputNode_ArtNetConfigMessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OutputNode_ArtNetConfigMessages_2eproto}, {}};

static void InitDefaultsscc_info_Reply_ArtNetConfigMessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ola::plugin::artnet::_Reply_default_instance_;
    new (ptr) ::ola::plugin::artnet::Reply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ola::plugin::artnet::Reply::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Reply_ArtNetConfigMessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Reply_ArtNetConfigMessages_2eproto}, {
      &scc_info_OptionsReply_ArtNetConfigMessages_2eproto.base,
      &scc_info_NodeListReply_ArtNetConfigMessages_2eproto.base,}};

static void InitDefaultsscc_info_Request_ArtNetConfigMessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ola::plugin::artnet::_Request_default_instance_;
    new (ptr) ::ola::plugin::artnet::Request();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ola::plugin::artnet::Request::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Request_ArtNetConfigMessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Request_ArtNetConfigMessages_2eproto}, {
      &scc_info_OptionsRequest_ArtNetConfigMessages_2eproto.base,
      &scc_info_NodeListRequest_ArtNetConfigMessages_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ArtNetConfigMessages_2eproto[7];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_ArtNetConfigMessages_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ArtNetConfigMessages_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_ArtNetConfigMessages_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::ola::plugin::artnet::OptionsRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ola::plugin::artnet::OptionsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ola::plugin::artnet::OptionsRequest, short_name_),
  PROTOBUF_FIELD_OFFSET(::ola::plugin::artnet::OptionsRequest, long_name_),
  PROTOBUF_FIELD_OFFSET(::ola::plugin::artnet::OptionsRequest, subnet_),
  PROTOBUF_FIELD_OFFSET(::ola::plugin::artnet::OptionsRequest, net_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::ola::plugin::artnet::OptionsReply, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ola::plugin::artnet::OptionsReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ola::plugin::artnet::OptionsReply, status_),
  PROTOBUF_FIELD_OFFSET(::ola::plugin::artnet::OptionsReply, short_name_),
  PROTOBUF_FIELD_OFFSET(::ola::plugin::artnet::OptionsReply, long_name_),
  PROTOBUF_FIELD_OFFSET(::ola::plugin::artnet::OptionsReply, subnet_),
  PROTOBUF_FIELD_OFFSET(::ola::plugin::artnet::OptionsReply, net_),
  2,
  0,
  1,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::ola::plugin::artnet::NodeListRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ola::plugin::artnet::NodeListRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ola::plugin::artnet::NodeListRequest, universe_),
  0,
  PROTOBUF_FIELD_OFFSET(::ola::plugin::artnet::OutputNode, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ola::plugin::artnet::OutputNode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ola::plugin::artnet::OutputNode, ip_address_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ola::plugin::artnet::NodeListReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ola::plugin::artnet::NodeListReply, node_),
  PROTOBUF_FIELD_OFFSET(::ola::plugin::artnet::Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ola::plugin::artnet::Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ola::plugin::artnet::Request, type_),
  PROTOBUF_FIELD_OFFSET(::ola::plugin::artnet::Request, options_),
  PROTOBUF_FIELD_OFFSET(::ola::plugin::artnet::Request, node_list_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ola::plugin::artnet::Reply, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ola::plugin::artnet::Reply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ola::plugin::artnet::Reply, type_),
  PROTOBUF_FIELD_OFFSET(::ola::plugin::artnet::Reply, options_),
  PROTOBUF_FIELD_OFFSET(::ola::plugin::artnet::Reply, node_list_),
  2,
  0,
  1,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(::ola::plugin::artnet::OptionsRequest)},
  { 13, 23, sizeof(::ola::plugin::artnet::OptionsReply)},
  { 28, 34, sizeof(::ola::plugin::artnet::NodeListRequest)},
  { 35, 41, sizeof(::ola::plugin::artnet::OutputNode)},
  { 42, -1, sizeof(::ola::plugin::artnet::NodeListReply)},
  { 48, 56, sizeof(::ola::plugin::artnet::Request)},
  { 59, 67, sizeof(::ola::plugin::artnet::Reply)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ola::plugin::artnet::_OptionsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ola::plugin::artnet::_OptionsReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ola::plugin::artnet::_NodeListRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ola::plugin::artnet::_OutputNode_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ola::plugin::artnet::_NodeListReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ola::plugin::artnet::_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ola::plugin::artnet::_Reply_default_instance_),
};

const char descriptor_table_protodef_ArtNetConfigMessages_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\032ArtNetConfigMessages.proto\022\021ola.plugin"
  ".artnet\"T\n\016OptionsRequest\022\022\n\nshort_name\030"
  "\001 \001(\t\022\021\n\tlong_name\030\002 \001(\t\022\016\n\006subnet\030\003 \001(\005"
  "\022\013\n\003net\030\004 \001(\005\"b\n\014OptionsReply\022\016\n\006status\030"
  "\001 \002(\r\022\022\n\nshort_name\030\002 \002(\t\022\021\n\tlong_name\030\003"
  " \002(\t\022\016\n\006subnet\030\004 \002(\005\022\013\n\003net\030\005 \002(\005\"#\n\017Nod"
  "eListRequest\022\020\n\010universe\030\001 \002(\005\" \n\nOutput"
  "Node\022\022\n\nip_address\030\001 \002(\r\"<\n\rNodeListRepl"
  "y\022+\n\004node\030\001 \003(\0132\035.ola.plugin.artnet.Outp"
  "utNode\"\363\001\n\007Request\0224\n\004type\030\001 \002(\0162&.ola.p"
  "lugin.artnet.Request.RequestType\0222\n\007opti"
  "ons\030\002 \001(\0132!.ola.plugin.artnet.OptionsReq"
  "uest\0225\n\tnode_list\030\003 \001(\0132\".ola.plugin.art"
  "net.NodeListRequest\"G\n\013RequestType\022\032\n\026AR"
  "TNET_OPTIONS_REQUEST\020\001\022\034\n\030ARTNET_NODE_LI"
  "ST_REQUEST\020\002\"\343\001\n\005Reply\0220\n\004type\030\001 \002(\0162\".o"
  "la.plugin.artnet.Reply.ReplyType\0220\n\007opti"
  "ons\030\002 \001(\0132\037.ola.plugin.artnet.OptionsRep"
  "ly\0223\n\tnode_list\030\003 \001(\0132 .ola.plugin.artne"
  "t.NodeListReply\"A\n\tReplyType\022\030\n\024ARTNET_O"
  "PTIONS_REPLY\020\001\022\032\n\026ARTNET_NODE_LIST_REPLY"
  "\020\002"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ArtNetConfigMessages_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_ArtNetConfigMessages_2eproto_sccs[7] = {
  &scc_info_NodeListReply_ArtNetConfigMessages_2eproto.base,
  &scc_info_NodeListRequest_ArtNetConfigMessages_2eproto.base,
  &scc_info_OptionsReply_ArtNetConfigMessages_2eproto.base,
  &scc_info_OptionsRequest_ArtNetConfigMessages_2eproto.base,
  &scc_info_OutputNode_ArtNetConfigMessages_2eproto.base,
  &scc_info_Reply_ArtNetConfigMessages_2eproto.base,
  &scc_info_Request_ArtNetConfigMessages_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ArtNetConfigMessages_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ArtNetConfigMessages_2eproto = {
  false, false, descriptor_table_protodef_ArtNetConfigMessages_2eproto, "ArtNetConfigMessages.proto", 842,
  &descriptor_table_ArtNetConfigMessages_2eproto_once, descriptor_table_ArtNetConfigMessages_2eproto_sccs, descriptor_table_ArtNetConfigMessages_2eproto_deps, 7, 0,
  schemas, file_default_instances, TableStruct_ArtNetConfigMessages_2eproto::offsets,
  file_level_metadata_ArtNetConfigMessages_2eproto, 7, file_level_enum_descriptors_ArtNetConfigMessages_2eproto, file_level_service_descriptors_ArtNetConfigMessages_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_ArtNetConfigMessages_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_ArtNetConfigMessages_2eproto)), true);
namespace ola {
namespace plugin {
namespace artnet {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Request_RequestType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ArtNetConfigMessages_2eproto);
  return file_level_enum_descriptors_ArtNetConfigMessages_2eproto[0];
}
bool Request_RequestType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Request_RequestType Request::ARTNET_OPTIONS_REQUEST;
constexpr Request_RequestType Request::ARTNET_NODE_LIST_REQUEST;
constexpr Request_RequestType Request::RequestType_MIN;
constexpr Request_RequestType Request::RequestType_MAX;
constexpr int Request::RequestType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Reply_ReplyType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ArtNetConfigMessages_2eproto);
  return file_level_enum_descriptors_ArtNetConfigMessages_2eproto[1];
}
bool Reply_ReplyType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Reply_ReplyType Reply::ARTNET_OPTIONS_REPLY;
constexpr Reply_ReplyType Reply::ARTNET_NODE_LIST_REPLY;
constexpr Reply_ReplyType Reply::ReplyType_MIN;
constexpr Reply_ReplyType Reply::ReplyType_MAX;
constexpr int Reply::ReplyType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void OptionsRequest::InitAsDefaultInstance() {
}
class OptionsRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<OptionsRequest>()._has_bits_);
  static void set_has_short_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_long_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_subnet(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_net(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

OptionsRequest::OptionsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ola.plugin.artnet.OptionsRequest)
}
OptionsRequest::OptionsRequest(const OptionsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  short_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_short_name()) {
    short_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_short_name(),
      GetArena());
  }
  long_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_long_name()) {
    long_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_long_name(),
      GetArena());
  }
  ::memcpy(&subnet_, &from.subnet_,
    static_cast<size_t>(reinterpret_cast<char*>(&net_) -
    reinterpret_cast<char*>(&subnet_)) + sizeof(net_));
  // @@protoc_insertion_point(copy_constructor:ola.plugin.artnet.OptionsRequest)
}

void OptionsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OptionsRequest_ArtNetConfigMessages_2eproto.base);
  short_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  long_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&subnet_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&net_) -
      reinterpret_cast<char*>(&subnet_)) + sizeof(net_));
}

OptionsRequest::~OptionsRequest() {
  // @@protoc_insertion_point(destructor:ola.plugin.artnet.OptionsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OptionsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  short_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  long_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OptionsRequest::ArenaDtor(void* object) {
  OptionsRequest* _this = reinterpret_cast< OptionsRequest* >(object);
  (void)_this;
}
void OptionsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OptionsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OptionsRequest& OptionsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OptionsRequest_ArtNetConfigMessages_2eproto.base);
  return *internal_default_instance();
}


void OptionsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ola.plugin.artnet.OptionsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      short_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      long_name_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&subnet_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&net_) -
        reinterpret_cast<char*>(&subnet_)) + sizeof(net_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OptionsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string short_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_short_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ola.plugin.artnet.OptionsRequest.short_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string long_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_long_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ola.plugin.artnet.OptionsRequest.long_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 subnet = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_subnet(&has_bits);
          subnet_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 net = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_net(&has_bits);
          net_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OptionsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ola.plugin.artnet.OptionsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string short_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_short_name().data(), static_cast<int>(this->_internal_short_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ola.plugin.artnet.OptionsRequest.short_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_short_name(), target);
  }

  // optional string long_name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_long_name().data(), static_cast<int>(this->_internal_long_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ola.plugin.artnet.OptionsRequest.long_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_long_name(), target);
  }

  // optional int32 subnet = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_subnet(), target);
  }

  // optional int32 net = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_net(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ola.plugin.artnet.OptionsRequest)
  return target;
}

size_t OptionsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ola.plugin.artnet.OptionsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string short_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_short_name());
    }

    // optional string long_name = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_long_name());
    }

    // optional int32 subnet = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_subnet());
    }

    // optional int32 net = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_net());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OptionsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ola.plugin.artnet.OptionsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const OptionsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OptionsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ola.plugin.artnet.OptionsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ola.plugin.artnet.OptionsRequest)
    MergeFrom(*source);
  }
}

void OptionsRequest::MergeFrom(const OptionsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ola.plugin.artnet.OptionsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_short_name(from._internal_short_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_long_name(from._internal_long_name());
    }
    if (cached_has_bits & 0x00000004u) {
      subnet_ = from.subnet_;
    }
    if (cached_has_bits & 0x00000008u) {
      net_ = from.net_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void OptionsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ola.plugin.artnet.OptionsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OptionsRequest::CopyFrom(const OptionsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ola.plugin.artnet.OptionsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OptionsRequest::IsInitialized() const {
  return true;
}

void OptionsRequest::InternalSwap(OptionsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  short_name_.Swap(&other->short_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  long_name_.Swap(&other->long_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OptionsRequest, net_)
      + sizeof(OptionsRequest::net_)
      - PROTOBUF_FIELD_OFFSET(OptionsRequest, subnet_)>(
          reinterpret_cast<char*>(&subnet_),
          reinterpret_cast<char*>(&other->subnet_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OptionsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OptionsReply::InitAsDefaultInstance() {
}
class OptionsReply::_Internal {
 public:
  using HasBits = decltype(std::declval<OptionsReply>()._has_bits_);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_short_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_long_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_subnet(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_net(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000001f) ^ 0x0000001f) != 0;
  }
};

OptionsReply::OptionsReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ola.plugin.artnet.OptionsReply)
}
OptionsReply::OptionsReply(const OptionsReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  short_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_short_name()) {
    short_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_short_name(),
      GetArena());
  }
  long_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_long_name()) {
    long_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_long_name(),
      GetArena());
  }
  ::memcpy(&status_, &from.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&net_) -
    reinterpret_cast<char*>(&status_)) + sizeof(net_));
  // @@protoc_insertion_point(copy_constructor:ola.plugin.artnet.OptionsReply)
}

void OptionsReply::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OptionsReply_ArtNetConfigMessages_2eproto.base);
  short_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  long_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&net_) -
      reinterpret_cast<char*>(&status_)) + sizeof(net_));
}

OptionsReply::~OptionsReply() {
  // @@protoc_insertion_point(destructor:ola.plugin.artnet.OptionsReply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OptionsReply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  short_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  long_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OptionsReply::ArenaDtor(void* object) {
  OptionsReply* _this = reinterpret_cast< OptionsReply* >(object);
  (void)_this;
}
void OptionsReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OptionsReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OptionsReply& OptionsReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OptionsReply_ArtNetConfigMessages_2eproto.base);
  return *internal_default_instance();
}


void OptionsReply::Clear() {
// @@protoc_insertion_point(message_clear_start:ola.plugin.artnet.OptionsReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      short_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      long_name_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&status_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&net_) -
        reinterpret_cast<char*>(&status_)) + sizeof(net_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OptionsReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_status(&has_bits);
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string short_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_short_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ola.plugin.artnet.OptionsReply.short_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string long_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_long_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ola.plugin.artnet.OptionsReply.long_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 subnet = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_subnet(&has_bits);
          subnet_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 net = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_net(&has_bits);
          net_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OptionsReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ola.plugin.artnet.OptionsReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 status = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_status(), target);
  }

  // required string short_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_short_name().data(), static_cast<int>(this->_internal_short_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ola.plugin.artnet.OptionsReply.short_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_short_name(), target);
  }

  // required string long_name = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_long_name().data(), static_cast<int>(this->_internal_long_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ola.plugin.artnet.OptionsReply.long_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_long_name(), target);
  }

  // required int32 subnet = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_subnet(), target);
  }

  // required int32 net = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_net(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ola.plugin.artnet.OptionsReply)
  return target;
}

size_t OptionsReply::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ola.plugin.artnet.OptionsReply)
  size_t total_size = 0;

  if (_internal_has_short_name()) {
    // required string short_name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_short_name());
  }

  if (_internal_has_long_name()) {
    // required string long_name = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_long_name());
  }

  if (_internal_has_status()) {
    // required uint32 status = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_status());
  }

  if (_internal_has_subnet()) {
    // required int32 subnet = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_subnet());
  }

  if (_internal_has_net()) {
    // required int32 net = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_net());
  }

  return total_size;
}
size_t OptionsReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ola.plugin.artnet.OptionsReply)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required string short_name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_short_name());

    // required string long_name = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_long_name());

    // required uint32 status = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_status());

    // required int32 subnet = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_subnet());

    // required int32 net = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_net());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OptionsReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ola.plugin.artnet.OptionsReply)
  GOOGLE_DCHECK_NE(&from, this);
  const OptionsReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OptionsReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ola.plugin.artnet.OptionsReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ola.plugin.artnet.OptionsReply)
    MergeFrom(*source);
  }
}

void OptionsReply::MergeFrom(const OptionsReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ola.plugin.artnet.OptionsReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_short_name(from._internal_short_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_long_name(from._internal_long_name());
    }
    if (cached_has_bits & 0x00000004u) {
      status_ = from.status_;
    }
    if (cached_has_bits & 0x00000008u) {
      subnet_ = from.subnet_;
    }
    if (cached_has_bits & 0x00000010u) {
      net_ = from.net_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void OptionsReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ola.plugin.artnet.OptionsReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OptionsReply::CopyFrom(const OptionsReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ola.plugin.artnet.OptionsReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OptionsReply::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void OptionsReply::InternalSwap(OptionsReply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  short_name_.Swap(&other->short_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  long_name_.Swap(&other->long_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OptionsReply, net_)
      + sizeof(OptionsReply::net_)
      - PROTOBUF_FIELD_OFFSET(OptionsReply, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OptionsReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NodeListRequest::InitAsDefaultInstance() {
}
class NodeListRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<NodeListRequest>()._has_bits_);
  static void set_has_universe(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

NodeListRequest::NodeListRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ola.plugin.artnet.NodeListRequest)
}
NodeListRequest::NodeListRequest(const NodeListRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  universe_ = from.universe_;
  // @@protoc_insertion_point(copy_constructor:ola.plugin.artnet.NodeListRequest)
}

void NodeListRequest::SharedCtor() {
  universe_ = 0;
}

NodeListRequest::~NodeListRequest() {
  // @@protoc_insertion_point(destructor:ola.plugin.artnet.NodeListRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NodeListRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void NodeListRequest::ArenaDtor(void* object) {
  NodeListRequest* _this = reinterpret_cast< NodeListRequest* >(object);
  (void)_this;
}
void NodeListRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NodeListRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NodeListRequest& NodeListRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NodeListRequest_ArtNetConfigMessages_2eproto.base);
  return *internal_default_instance();
}


void NodeListRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ola.plugin.artnet.NodeListRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  universe_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NodeListRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 universe = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_universe(&has_bits);
          universe_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NodeListRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ola.plugin.artnet.NodeListRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 universe = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_universe(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ola.plugin.artnet.NodeListRequest)
  return target;
}

size_t NodeListRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ola.plugin.artnet.NodeListRequest)
  size_t total_size = 0;

  // required int32 universe = 1;
  if (_internal_has_universe()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_universe());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NodeListRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ola.plugin.artnet.NodeListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const NodeListRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NodeListRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ola.plugin.artnet.NodeListRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ola.plugin.artnet.NodeListRequest)
    MergeFrom(*source);
  }
}

void NodeListRequest::MergeFrom(const NodeListRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ola.plugin.artnet.NodeListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_universe()) {
    _internal_set_universe(from._internal_universe());
  }
}

void NodeListRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ola.plugin.artnet.NodeListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeListRequest::CopyFrom(const NodeListRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ola.plugin.artnet.NodeListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeListRequest::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void NodeListRequest::InternalSwap(NodeListRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(universe_, other->universe_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NodeListRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OutputNode::InitAsDefaultInstance() {
}
class OutputNode::_Internal {
 public:
  using HasBits = decltype(std::declval<OutputNode>()._has_bits_);
  static void set_has_ip_address(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

OutputNode::OutputNode(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ola.plugin.artnet.OutputNode)
}
OutputNode::OutputNode(const OutputNode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ip_address_ = from.ip_address_;
  // @@protoc_insertion_point(copy_constructor:ola.plugin.artnet.OutputNode)
}

void OutputNode::SharedCtor() {
  ip_address_ = 0u;
}

OutputNode::~OutputNode() {
  // @@protoc_insertion_point(destructor:ola.plugin.artnet.OutputNode)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OutputNode::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void OutputNode::ArenaDtor(void* object) {
  OutputNode* _this = reinterpret_cast< OutputNode* >(object);
  (void)_this;
}
void OutputNode::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OutputNode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OutputNode& OutputNode::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OutputNode_ArtNetConfigMessages_2eproto.base);
  return *internal_default_instance();
}


void OutputNode::Clear() {
// @@protoc_insertion_point(message_clear_start:ola.plugin.artnet.OutputNode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ip_address_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OutputNode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 ip_address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_ip_address(&has_bits);
          ip_address_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OutputNode::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ola.plugin.artnet.OutputNode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 ip_address = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_ip_address(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ola.plugin.artnet.OutputNode)
  return target;
}

size_t OutputNode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ola.plugin.artnet.OutputNode)
  size_t total_size = 0;

  // required uint32 ip_address = 1;
  if (_internal_has_ip_address()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ip_address());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OutputNode::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ola.plugin.artnet.OutputNode)
  GOOGLE_DCHECK_NE(&from, this);
  const OutputNode* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OutputNode>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ola.plugin.artnet.OutputNode)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ola.plugin.artnet.OutputNode)
    MergeFrom(*source);
  }
}

void OutputNode::MergeFrom(const OutputNode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ola.plugin.artnet.OutputNode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_ip_address()) {
    _internal_set_ip_address(from._internal_ip_address());
  }
}

void OutputNode::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ola.plugin.artnet.OutputNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OutputNode::CopyFrom(const OutputNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ola.plugin.artnet.OutputNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OutputNode::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void OutputNode::InternalSwap(OutputNode* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(ip_address_, other->ip_address_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OutputNode::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NodeListReply::InitAsDefaultInstance() {
}
class NodeListReply::_Internal {
 public:
};

NodeListReply::NodeListReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  node_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ola.plugin.artnet.NodeListReply)
}
NodeListReply::NodeListReply(const NodeListReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      node_(from.node_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ola.plugin.artnet.NodeListReply)
}

void NodeListReply::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NodeListReply_ArtNetConfigMessages_2eproto.base);
}

NodeListReply::~NodeListReply() {
  // @@protoc_insertion_point(destructor:ola.plugin.artnet.NodeListReply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NodeListReply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void NodeListReply::ArenaDtor(void* object) {
  NodeListReply* _this = reinterpret_cast< NodeListReply* >(object);
  (void)_this;
}
void NodeListReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NodeListReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NodeListReply& NodeListReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NodeListReply_ArtNetConfigMessages_2eproto.base);
  return *internal_default_instance();
}


void NodeListReply::Clear() {
// @@protoc_insertion_point(message_clear_start:ola.plugin.artnet.NodeListReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  node_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NodeListReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .ola.plugin.artnet.OutputNode node = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_node(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NodeListReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ola.plugin.artnet.NodeListReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ola.plugin.artnet.OutputNode node = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_node_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_node(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ola.plugin.artnet.NodeListReply)
  return target;
}

size_t NodeListReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ola.plugin.artnet.NodeListReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ola.plugin.artnet.OutputNode node = 1;
  total_size += 1UL * this->_internal_node_size();
  for (const auto& msg : this->node_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NodeListReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ola.plugin.artnet.NodeListReply)
  GOOGLE_DCHECK_NE(&from, this);
  const NodeListReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NodeListReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ola.plugin.artnet.NodeListReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ola.plugin.artnet.NodeListReply)
    MergeFrom(*source);
  }
}

void NodeListReply::MergeFrom(const NodeListReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ola.plugin.artnet.NodeListReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  node_.MergeFrom(from.node_);
}

void NodeListReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ola.plugin.artnet.NodeListReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeListReply::CopyFrom(const NodeListReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ola.plugin.artnet.NodeListReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeListReply::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(node_)) return false;
  return true;
}

void NodeListReply::InternalSwap(NodeListReply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  node_.InternalSwap(&other->node_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NodeListReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Request::InitAsDefaultInstance() {
  ::ola::plugin::artnet::_Request_default_instance_._instance.get_mutable()->options_ = const_cast< ::ola::plugin::artnet::OptionsRequest*>(
      ::ola::plugin::artnet::OptionsRequest::internal_default_instance());
  ::ola::plugin::artnet::_Request_default_instance_._instance.get_mutable()->node_list_ = const_cast< ::ola::plugin::artnet::NodeListRequest*>(
      ::ola::plugin::artnet::NodeListRequest::internal_default_instance());
}
class Request::_Internal {
 public:
  using HasBits = decltype(std::declval<Request>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::ola::plugin::artnet::OptionsRequest& options(const Request* msg);
  static void set_has_options(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ola::plugin::artnet::NodeListRequest& node_list(const Request* msg);
  static void set_has_node_list(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000004) ^ 0x00000004) != 0;
  }
};

const ::ola::plugin::artnet::OptionsRequest&
Request::_Internal::options(const Request* msg) {
  return *msg->options_;
}
const ::ola::plugin::artnet::NodeListRequest&
Request::_Internal::node_list(const Request* msg) {
  return *msg->node_list_;
}
Request::Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ola.plugin.artnet.Request)
}
Request::Request(const Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_options()) {
    options_ = new ::ola::plugin::artnet::OptionsRequest(*from.options_);
  } else {
    options_ = nullptr;
  }
  if (from._internal_has_node_list()) {
    node_list_ = new ::ola::plugin::artnet::NodeListRequest(*from.node_list_);
  } else {
    node_list_ = nullptr;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:ola.plugin.artnet.Request)
}

void Request::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Request_ArtNetConfigMessages_2eproto.base);
  ::memset(&options_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&node_list_) -
      reinterpret_cast<char*>(&options_)) + sizeof(node_list_));
  type_ = 1;
}

Request::~Request() {
  // @@protoc_insertion_point(destructor:ola.plugin.artnet.Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete options_;
  if (this != internal_default_instance()) delete node_list_;
}

void Request::ArenaDtor(void* object) {
  Request* _this = reinterpret_cast< Request* >(object);
  (void)_this;
}
void Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Request& Request::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Request_ArtNetConfigMessages_2eproto.base);
  return *internal_default_instance();
}


void Request::Clear() {
// @@protoc_insertion_point(message_clear_start:ola.plugin.artnet.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(options_ != nullptr);
      options_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(node_list_ != nullptr);
      node_list_->Clear();
    }
    type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .ola.plugin.artnet.Request.RequestType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ola::plugin::artnet::Request_RequestType_IsValid(val))) {
            _internal_set_type(static_cast<::ola::plugin::artnet::Request_RequestType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .ola.plugin.artnet.OptionsRequest options = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ola.plugin.artnet.NodeListRequest node_list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_node_list(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ola.plugin.artnet.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ola.plugin.artnet.Request.RequestType type = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // optional .ola.plugin.artnet.OptionsRequest options = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::options(this), target, stream);
  }

  // optional .ola.plugin.artnet.NodeListRequest node_list = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::node_list(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ola.plugin.artnet.Request)
  return target;
}

size_t Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ola.plugin.artnet.Request)
  size_t total_size = 0;

  // required .ola.plugin.artnet.Request.RequestType type = 1;
  if (_internal_has_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .ola.plugin.artnet.OptionsRequest options = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *options_);
    }

    // optional .ola.plugin.artnet.NodeListRequest node_list = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *node_list_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ola.plugin.artnet.Request)
  GOOGLE_DCHECK_NE(&from, this);
  const Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ola.plugin.artnet.Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ola.plugin.artnet.Request)
    MergeFrom(*source);
  }
}

void Request::MergeFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ola.plugin.artnet.Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_options()->::ola::plugin::artnet::OptionsRequest::MergeFrom(from._internal_options());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_node_list()->::ola::plugin::artnet::NodeListRequest::MergeFrom(from._internal_node_list());
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ola.plugin.artnet.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request::CopyFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ola.plugin.artnet.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_node_list()) {
    if (!node_list_->IsInitialized()) return false;
  }
  return true;
}

void Request::InternalSwap(Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Request, node_list_)
      + sizeof(Request::node_list_)
      - PROTOBUF_FIELD_OFFSET(Request, options_)>(
          reinterpret_cast<char*>(&options_),
          reinterpret_cast<char*>(&other->options_));
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Reply::InitAsDefaultInstance() {
  ::ola::plugin::artnet::_Reply_default_instance_._instance.get_mutable()->options_ = const_cast< ::ola::plugin::artnet::OptionsReply*>(
      ::ola::plugin::artnet::OptionsReply::internal_default_instance());
  ::ola::plugin::artnet::_Reply_default_instance_._instance.get_mutable()->node_list_ = const_cast< ::ola::plugin::artnet::NodeListReply*>(
      ::ola::plugin::artnet::NodeListReply::internal_default_instance());
}
class Reply::_Internal {
 public:
  using HasBits = decltype(std::declval<Reply>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::ola::plugin::artnet::OptionsReply& options(const Reply* msg);
  static void set_has_options(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ola::plugin::artnet::NodeListReply& node_list(const Reply* msg);
  static void set_has_node_list(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000004) ^ 0x00000004) != 0;
  }
};

const ::ola::plugin::artnet::OptionsReply&
Reply::_Internal::options(const Reply* msg) {
  return *msg->options_;
}
const ::ola::plugin::artnet::NodeListReply&
Reply::_Internal::node_list(const Reply* msg) {
  return *msg->node_list_;
}
Reply::Reply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ola.plugin.artnet.Reply)
}
Reply::Reply(const Reply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_options()) {
    options_ = new ::ola::plugin::artnet::OptionsReply(*from.options_);
  } else {
    options_ = nullptr;
  }
  if (from._internal_has_node_list()) {
    node_list_ = new ::ola::plugin::artnet::NodeListReply(*from.node_list_);
  } else {
    node_list_ = nullptr;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:ola.plugin.artnet.Reply)
}

void Reply::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Reply_ArtNetConfigMessages_2eproto.base);
  ::memset(&options_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&node_list_) -
      reinterpret_cast<char*>(&options_)) + sizeof(node_list_));
  type_ = 1;
}

Reply::~Reply() {
  // @@protoc_insertion_point(destructor:ola.plugin.artnet.Reply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Reply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete options_;
  if (this != internal_default_instance()) delete node_list_;
}

void Reply::ArenaDtor(void* object) {
  Reply* _this = reinterpret_cast< Reply* >(object);
  (void)_this;
}
void Reply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Reply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Reply& Reply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Reply_ArtNetConfigMessages_2eproto.base);
  return *internal_default_instance();
}


void Reply::Clear() {
// @@protoc_insertion_point(message_clear_start:ola.plugin.artnet.Reply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(options_ != nullptr);
      options_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(node_list_ != nullptr);
      node_list_->Clear();
    }
    type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Reply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .ola.plugin.artnet.Reply.ReplyType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ola::plugin::artnet::Reply_ReplyType_IsValid(val))) {
            _internal_set_type(static_cast<::ola::plugin::artnet::Reply_ReplyType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .ola.plugin.artnet.OptionsReply options = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ola.plugin.artnet.NodeListReply node_list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_node_list(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Reply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ola.plugin.artnet.Reply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ola.plugin.artnet.Reply.ReplyType type = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // optional .ola.plugin.artnet.OptionsReply options = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::options(this), target, stream);
  }

  // optional .ola.plugin.artnet.NodeListReply node_list = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::node_list(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ola.plugin.artnet.Reply)
  return target;
}

size_t Reply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ola.plugin.artnet.Reply)
  size_t total_size = 0;

  // required .ola.plugin.artnet.Reply.ReplyType type = 1;
  if (_internal_has_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .ola.plugin.artnet.OptionsReply options = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *options_);
    }

    // optional .ola.plugin.artnet.NodeListReply node_list = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *node_list_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Reply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ola.plugin.artnet.Reply)
  GOOGLE_DCHECK_NE(&from, this);
  const Reply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Reply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ola.plugin.artnet.Reply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ola.plugin.artnet.Reply)
    MergeFrom(*source);
  }
}

void Reply::MergeFrom(const Reply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ola.plugin.artnet.Reply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_options()->::ola::plugin::artnet::OptionsReply::MergeFrom(from._internal_options());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_node_list()->::ola::plugin::artnet::NodeListReply::MergeFrom(from._internal_node_list());
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Reply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ola.plugin.artnet.Reply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Reply::CopyFrom(const Reply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ola.plugin.artnet.Reply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Reply::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_options()) {
    if (!options_->IsInitialized()) return false;
  }
  if (_internal_has_node_list()) {
    if (!node_list_->IsInitialized()) return false;
  }
  return true;
}

void Reply::InternalSwap(Reply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Reply, node_list_)
      + sizeof(Reply::node_list_)
      - PROTOBUF_FIELD_OFFSET(Reply, options_)>(
          reinterpret_cast<char*>(&options_),
          reinterpret_cast<char*>(&other->options_));
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Reply::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace artnet
}  // namespace plugin
}  // namespace ola
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ola::plugin::artnet::OptionsRequest* Arena::CreateMaybeMessage< ::ola::plugin::artnet::OptionsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ola::plugin::artnet::OptionsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ola::plugin::artnet::OptionsReply* Arena::CreateMaybeMessage< ::ola::plugin::artnet::OptionsReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ola::plugin::artnet::OptionsReply >(arena);
}
template<> PROTOBUF_NOINLINE ::ola::plugin::artnet::NodeListRequest* Arena::CreateMaybeMessage< ::ola::plugin::artnet::NodeListRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ola::plugin::artnet::NodeListRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ola::plugin::artnet::OutputNode* Arena::CreateMaybeMessage< ::ola::plugin::artnet::OutputNode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ola::plugin::artnet::OutputNode >(arena);
}
template<> PROTOBUF_NOINLINE ::ola::plugin::artnet::NodeListReply* Arena::CreateMaybeMessage< ::ola::plugin::artnet::NodeListReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ola::plugin::artnet::NodeListReply >(arena);
}
template<> PROTOBUF_NOINLINE ::ola::plugin::artnet::Request* Arena::CreateMaybeMessage< ::ola::plugin::artnet::Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ola::plugin::artnet::Request >(arena);
}
template<> PROTOBUF_NOINLINE ::ola::plugin::artnet::Reply* Arena::CreateMaybeMessage< ::ola::plugin::artnet::Reply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ola::plugin::artnet::Reply >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
