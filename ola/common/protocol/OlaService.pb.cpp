// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Ola.proto

#include "OlaService.pb.h"

#include <google/protobuf/descriptor.h>  // NOLINT(build/include)
#include <google/protobuf/stubs/once.h>

#include "common/rpc/RpcChannel.h"
#include "common/rpc/RpcController.h"


namespace ola {
namespace proto {

namespace {

const ::google::protobuf::ServiceDescriptor* OlaServerService_descriptor_ =
    NULL;
const ::google::protobuf::ServiceDescriptor* OlaClientService_descriptor_ =
    NULL;

}  // namespace


void protobuf_AssignDesc_OlaService() {
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Ola.proto");
  GOOGLE_CHECK(file != NULL);
  OlaServerService_descriptor_ = file->service(0);
  OlaClientService_descriptor_ = file->service(1);
}

namespace {

inline void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once,
    &protobuf_AssignDesc_OlaService);
}

}  // namespace

// ===================================================================

OlaServerService::~OlaServerService() {}

const ::google::protobuf::ServiceDescriptor* OlaServerService::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OlaServerService_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* OlaServerService::GetDescriptor() {
  protobuf_AssignDescriptorsOnce();
  return OlaServerService_descriptor_;
}

void OlaServerService::GetPlugins(
    ola::rpc::RpcController* controller,
    const ::ola::proto::PluginListRequest*,
    ::ola::proto::PluginListReply*,
    ola::rpc::RpcService::CompletionCallback* done) {
  controller->SetFailed("Method GetPlugins() not implemented.");
  done->Run();
}

void OlaServerService::ReloadPlugins(
    ola::rpc::RpcController* controller,
    const ::ola::proto::PluginReloadRequest*,
    ::ola::proto::Ack*,
    ola::rpc::RpcService::CompletionCallback* done) {
  controller->SetFailed("Method ReloadPlugins() not implemented.");
  done->Run();
}

void OlaServerService::GetPluginDescription(
    ola::rpc::RpcController* controller,
    const ::ola::proto::PluginDescriptionRequest*,
    ::ola::proto::PluginDescriptionReply*,
    ola::rpc::RpcService::CompletionCallback* done) {
  controller->SetFailed("Method GetPluginDescription() not implemented.");
  done->Run();
}

void OlaServerService::GetPluginState(
    ola::rpc::RpcController* controller,
    const ::ola::proto::PluginStateRequest*,
    ::ola::proto::PluginStateReply*,
    ola::rpc::RpcService::CompletionCallback* done) {
  controller->SetFailed("Method GetPluginState() not implemented.");
  done->Run();
}

void OlaServerService::GetDeviceInfo(
    ola::rpc::RpcController* controller,
    const ::ola::proto::DeviceInfoRequest*,
    ::ola::proto::DeviceInfoReply*,
    ola::rpc::RpcService::CompletionCallback* done) {
  controller->SetFailed("Method GetDeviceInfo() not implemented.");
  done->Run();
}

void OlaServerService::GetCandidatePorts(
    ola::rpc::RpcController* controller,
    const ::ola::proto::OptionalUniverseRequest*,
    ::ola::proto::DeviceInfoReply*,
    ola::rpc::RpcService::CompletionCallback* done) {
  controller->SetFailed("Method GetCandidatePorts() not implemented.");
  done->Run();
}

void OlaServerService::ConfigureDevice(
    ola::rpc::RpcController* controller,
    const ::ola::proto::DeviceConfigRequest*,
    ::ola::proto::DeviceConfigReply*,
    ola::rpc::RpcService::CompletionCallback* done) {
  controller->SetFailed("Method ConfigureDevice() not implemented.");
  done->Run();
}

void OlaServerService::SetPluginState(
    ola::rpc::RpcController* controller,
    const ::ola::proto::PluginStateChangeRequest*,
    ::ola::proto::Ack*,
    ola::rpc::RpcService::CompletionCallback* done) {
  controller->SetFailed("Method SetPluginState() not implemented.");
  done->Run();
}

void OlaServerService::SetPortPriority(
    ola::rpc::RpcController* controller,
    const ::ola::proto::PortPriorityRequest*,
    ::ola::proto::Ack*,
    ola::rpc::RpcService::CompletionCallback* done) {
  controller->SetFailed("Method SetPortPriority() not implemented.");
  done->Run();
}

void OlaServerService::GetUniverseInfo(
    ola::rpc::RpcController* controller,
    const ::ola::proto::OptionalUniverseRequest*,
    ::ola::proto::UniverseInfoReply*,
    ola::rpc::RpcService::CompletionCallback* done) {
  controller->SetFailed("Method GetUniverseInfo() not implemented.");
  done->Run();
}

void OlaServerService::SetUniverseName(
    ola::rpc::RpcController* controller,
    const ::ola::proto::UniverseNameRequest*,
    ::ola::proto::Ack*,
    ola::rpc::RpcService::CompletionCallback* done) {
  controller->SetFailed("Method SetUniverseName() not implemented.");
  done->Run();
}

void OlaServerService::SetMergeMode(
    ola::rpc::RpcController* controller,
    const ::ola::proto::MergeModeRequest*,
    ::ola::proto::Ack*,
    ola::rpc::RpcService::CompletionCallback* done) {
  controller->SetFailed("Method SetMergeMode() not implemented.");
  done->Run();
}

void OlaServerService::PatchPort(
    ola::rpc::RpcController* controller,
    const ::ola::proto::PatchPortRequest*,
    ::ola::proto::Ack*,
    ola::rpc::RpcService::CompletionCallback* done) {
  controller->SetFailed("Method PatchPort() not implemented.");
  done->Run();
}

void OlaServerService::RegisterForDmx(
    ola::rpc::RpcController* controller,
    const ::ola::proto::RegisterDmxRequest*,
    ::ola::proto::Ack*,
    ola::rpc::RpcService::CompletionCallback* done) {
  controller->SetFailed("Method RegisterForDmx() not implemented.");
  done->Run();
}

void OlaServerService::UpdateDmxData(
    ola::rpc::RpcController* controller,
    const ::ola::proto::DmxData*,
    ::ola::proto::Ack*,
    ola::rpc::RpcService::CompletionCallback* done) {
  controller->SetFailed("Method UpdateDmxData() not implemented.");
  done->Run();
}

void OlaServerService::GetDmx(
    ola::rpc::RpcController* controller,
    const ::ola::proto::UniverseRequest*,
    ::ola::proto::DmxData*,
    ola::rpc::RpcService::CompletionCallback* done) {
  controller->SetFailed("Method GetDmx() not implemented.");
  done->Run();
}

void OlaServerService::GetUIDs(
    ola::rpc::RpcController* controller,
    const ::ola::proto::UniverseRequest*,
    ::ola::proto::UIDListReply*,
    ola::rpc::RpcService::CompletionCallback* done) {
  controller->SetFailed("Method GetUIDs() not implemented.");
  done->Run();
}

void OlaServerService::ForceDiscovery(
    ola::rpc::RpcController* controller,
    const ::ola::proto::DiscoveryRequest*,
    ::ola::proto::UIDListReply*,
    ola::rpc::RpcService::CompletionCallback* done) {
  controller->SetFailed("Method ForceDiscovery() not implemented.");
  done->Run();
}

void OlaServerService::SetSourceUID(
    ola::rpc::RpcController* controller,
    const ::ola::proto::UID*,
    ::ola::proto::Ack*,
    ola::rpc::RpcService::CompletionCallback* done) {
  controller->SetFailed("Method SetSourceUID() not implemented.");
  done->Run();
}

void OlaServerService::RDMCommand(
    ola::rpc::RpcController* controller,
    const ::ola::proto::RDMRequest*,
    ::ola::proto::RDMResponse*,
    ola::rpc::RpcService::CompletionCallback* done) {
  controller->SetFailed("Method RDMCommand() not implemented.");
  done->Run();
}

void OlaServerService::RDMDiscoveryCommand(
    ola::rpc::RpcController* controller,
    const ::ola::proto::RDMDiscoveryRequest*,
    ::ola::proto::RDMResponse*,
    ola::rpc::RpcService::CompletionCallback* done) {
  controller->SetFailed("Method RDMDiscoveryCommand() not implemented.");
  done->Run();
}

void OlaServerService::StreamDmxData(
    ola::rpc::RpcController* controller,
    const ::ola::proto::DmxData*,
    ::ola::proto::STREAMING_NO_RESPONSE*,
    ola::rpc::RpcService::CompletionCallback* done) {
  controller->SetFailed("Method StreamDmxData() not implemented.");
  done->Run();
}

void OlaServerService::SendTimeCode(
    ola::rpc::RpcController* controller,
    const ::ola::proto::TimeCode*,
    ::ola::proto::Ack*,
    ola::rpc::RpcService::CompletionCallback* done) {
  controller->SetFailed("Method SendTimeCode() not implemented.");
  done->Run();
}

void OlaServerService::CallMethod(
    const ::google::protobuf::MethodDescriptor* method,
    ola::rpc::RpcController* controller,
    const ::google::protobuf::Message* request,
    ::google::protobuf::Message* response,
    ola::rpc::RpcService::CompletionCallback* done) {
  GOOGLE_DCHECK_EQ(method->service(), OlaServerService_descriptor_);
  switch (method->index()) {
    case 0:
      GetPlugins(
          controller,
          ::google::protobuf::down_cast<
              const ::ola::proto::PluginListRequest*>(request),
          ::google::protobuf::down_cast<
              ::ola::proto::PluginListReply*>(response),
          done);
      break;
    case 1:
      ReloadPlugins(
          controller,
          ::google::protobuf::down_cast<
              const ::ola::proto::PluginReloadRequest*>(request),
          ::google::protobuf::down_cast<
              ::ola::proto::Ack*>(response),
          done);
      break;
    case 2:
      GetPluginDescription(
          controller,
          ::google::protobuf::down_cast<
              const ::ola::proto::PluginDescriptionRequest*>(request),
          ::google::protobuf::down_cast<
              ::ola::proto::PluginDescriptionReply*>(response),
          done);
      break;
    case 3:
      GetPluginState(
          controller,
          ::google::protobuf::down_cast<
              const ::ola::proto::PluginStateRequest*>(request),
          ::google::protobuf::down_cast<
              ::ola::proto::PluginStateReply*>(response),
          done);
      break;
    case 4:
      GetDeviceInfo(
          controller,
          ::google::protobuf::down_cast<
              const ::ola::proto::DeviceInfoRequest*>(request),
          ::google::protobuf::down_cast<
              ::ola::proto::DeviceInfoReply*>(response),
          done);
      break;
    case 5:
      GetCandidatePorts(
          controller,
          ::google::protobuf::down_cast<
              const ::ola::proto::OptionalUniverseRequest*>(request),
          ::google::protobuf::down_cast<
              ::ola::proto::DeviceInfoReply*>(response),
          done);
      break;
    case 6:
      ConfigureDevice(
          controller,
          ::google::protobuf::down_cast<
              const ::ola::proto::DeviceConfigRequest*>(request),
          ::google::protobuf::down_cast<
              ::ola::proto::DeviceConfigReply*>(response),
          done);
      break;
    case 7:
      SetPluginState(
          controller,
          ::google::protobuf::down_cast<
              const ::ola::proto::PluginStateChangeRequest*>(request),
          ::google::protobuf::down_cast<
              ::ola::proto::Ack*>(response),
          done);
      break;
    case 8:
      SetPortPriority(
          controller,
          ::google::protobuf::down_cast<
              const ::ola::proto::PortPriorityRequest*>(request),
          ::google::protobuf::down_cast<
              ::ola::proto::Ack*>(response),
          done);
      break;
    case 9:
      GetUniverseInfo(
          controller,
          ::google::protobuf::down_cast<
              const ::ola::proto::OptionalUniverseRequest*>(request),
          ::google::protobuf::down_cast<
              ::ola::proto::UniverseInfoReply*>(response),
          done);
      break;
    case 10:
      SetUniverseName(
          controller,
          ::google::protobuf::down_cast<
              const ::ola::proto::UniverseNameRequest*>(request),
          ::google::protobuf::down_cast<
              ::ola::proto::Ack*>(response),
          done);
      break;
    case 11:
      SetMergeMode(
          controller,
          ::google::protobuf::down_cast<
              const ::ola::proto::MergeModeRequest*>(request),
          ::google::protobuf::down_cast<
              ::ola::proto::Ack*>(response),
          done);
      break;
    case 12:
      PatchPort(
          controller,
          ::google::protobuf::down_cast<
              const ::ola::proto::PatchPortRequest*>(request),
          ::google::protobuf::down_cast<
              ::ola::proto::Ack*>(response),
          done);
      break;
    case 13:
      RegisterForDmx(
          controller,
          ::google::protobuf::down_cast<
              const ::ola::proto::RegisterDmxRequest*>(request),
          ::google::protobuf::down_cast<
              ::ola::proto::Ack*>(response),
          done);
      break;
    case 14:
      UpdateDmxData(
          controller,
          ::google::protobuf::down_cast<
              const ::ola::proto::DmxData*>(request),
          ::google::protobuf::down_cast<
              ::ola::proto::Ack*>(response),
          done);
      break;
    case 15:
      GetDmx(
          controller,
          ::google::protobuf::down_cast<
              const ::ola::proto::UniverseRequest*>(request),
          ::google::protobuf::down_cast<
              ::ola::proto::DmxData*>(response),
          done);
      break;
    case 16:
      GetUIDs(
          controller,
          ::google::protobuf::down_cast<
              const ::ola::proto::UniverseRequest*>(request),
          ::google::protobuf::down_cast<
              ::ola::proto::UIDListReply*>(response),
          done);
      break;
    case 17:
      ForceDiscovery(
          controller,
          ::google::protobuf::down_cast<
              const ::ola::proto::DiscoveryRequest*>(request),
          ::google::protobuf::down_cast<
              ::ola::proto::UIDListReply*>(response),
          done);
      break;
    case 18:
      SetSourceUID(
          controller,
          ::google::protobuf::down_cast<
              const ::ola::proto::UID*>(request),
          ::google::protobuf::down_cast<
              ::ola::proto::Ack*>(response),
          done);
      break;
    case 19:
      RDMCommand(
          controller,
          ::google::protobuf::down_cast<
              const ::ola::proto::RDMRequest*>(request),
          ::google::protobuf::down_cast<
              ::ola::proto::RDMResponse*>(response),
          done);
      break;
    case 20:
      RDMDiscoveryCommand(
          controller,
          ::google::protobuf::down_cast<
              const ::ola::proto::RDMDiscoveryRequest*>(request),
          ::google::protobuf::down_cast<
              ::ola::proto::RDMResponse*>(response),
          done);
      break;
    case 21:
      StreamDmxData(
          controller,
          ::google::protobuf::down_cast<
              const ::ola::proto::DmxData*>(request),
          ::google::protobuf::down_cast<
              ::ola::proto::STREAMING_NO_RESPONSE*>(response),
          done);
      break;
    case 22:
      SendTimeCode(
          controller,
          ::google::protobuf::down_cast<
              const ::ola::proto::TimeCode*>(request),
          ::google::protobuf::down_cast<
              ::ola::proto::Ack*>(response),
          done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& OlaServerService::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch (method->index()) {
    case 0:
      return ::ola::proto::PluginListRequest::default_instance();
    case 1:
      return ::ola::proto::PluginReloadRequest::default_instance();
    case 2:
      return ::ola::proto::PluginDescriptionRequest::default_instance();
    case 3:
      return ::ola::proto::PluginStateRequest::default_instance();
    case 4:
      return ::ola::proto::DeviceInfoRequest::default_instance();
    case 5:
      return ::ola::proto::OptionalUniverseRequest::default_instance();
    case 6:
      return ::ola::proto::DeviceConfigRequest::default_instance();
    case 7:
      return ::ola::proto::PluginStateChangeRequest::default_instance();
    case 8:
      return ::ola::proto::PortPriorityRequest::default_instance();
    case 9:
      return ::ola::proto::OptionalUniverseRequest::default_instance();
    case 10:
      return ::ola::proto::UniverseNameRequest::default_instance();
    case 11:
      return ::ola::proto::MergeModeRequest::default_instance();
    case 12:
      return ::ola::proto::PatchPortRequest::default_instance();
    case 13:
      return ::ola::proto::RegisterDmxRequest::default_instance();
    case 14:
      return ::ola::proto::DmxData::default_instance();
    case 15:
      return ::ola::proto::UniverseRequest::default_instance();
    case 16:
      return ::ola::proto::UniverseRequest::default_instance();
    case 17:
      return ::ola::proto::DiscoveryRequest::default_instance();
    case 18:
      return ::ola::proto::UID::default_instance();
    case 19:
      return ::ola::proto::RDMRequest::default_instance();
    case 20:
      return ::ola::proto::RDMDiscoveryRequest::default_instance();
    case 21:
      return ::ola::proto::DmxData::default_instance();
    case 22:
      return ::ola::proto::TimeCode::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *static_cast< ::google::protobuf::Message*>(NULL);
  }
}

const ::google::protobuf::Message& OlaServerService::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch (method->index()) {
    case 0:
      return ::ola::proto::PluginListReply::default_instance();
    case 1:
      return ::ola::proto::Ack::default_instance();
    case 2:
      return ::ola::proto::PluginDescriptionReply::default_instance();
    case 3:
      return ::ola::proto::PluginStateReply::default_instance();
    case 4:
      return ::ola::proto::DeviceInfoReply::default_instance();
    case 5:
      return ::ola::proto::DeviceInfoReply::default_instance();
    case 6:
      return ::ola::proto::DeviceConfigReply::default_instance();
    case 7:
      return ::ola::proto::Ack::default_instance();
    case 8:
      return ::ola::proto::Ack::default_instance();
    case 9:
      return ::ola::proto::UniverseInfoReply::default_instance();
    case 10:
      return ::ola::proto::Ack::default_instance();
    case 11:
      return ::ola::proto::Ack::default_instance();
    case 12:
      return ::ola::proto::Ack::default_instance();
    case 13:
      return ::ola::proto::Ack::default_instance();
    case 14:
      return ::ola::proto::Ack::default_instance();
    case 15:
      return ::ola::proto::DmxData::default_instance();
    case 16:
      return ::ola::proto::UIDListReply::default_instance();
    case 17:
      return ::ola::proto::UIDListReply::default_instance();
    case 18:
      return ::ola::proto::Ack::default_instance();
    case 19:
      return ::ola::proto::RDMResponse::default_instance();
    case 20:
      return ::ola::proto::RDMResponse::default_instance();
    case 21:
      return ::ola::proto::STREAMING_NO_RESPONSE::default_instance();
    case 22:
      return ::ola::proto::Ack::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *static_cast< ::google::protobuf::Message*>(NULL);
  }
}

OlaServerService_Stub::OlaServerService_Stub(ola::rpc::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}

OlaServerService_Stub::OlaServerService_Stub(
    ola::rpc::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership ==
                  ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}

OlaServerService_Stub::~OlaServerService_Stub() {
  if (owns_channel_) {
    delete channel_;
  }
}

void OlaServerService_Stub::GetPlugins(
    ola::rpc::RpcController* controller,
    const ::ola::proto::PluginListRequest* request,
    ::ola::proto::PluginListReply* response,
    ola::rpc::RpcService::CompletionCallback* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void OlaServerService_Stub::ReloadPlugins(
    ola::rpc::RpcController* controller,
    const ::ola::proto::PluginReloadRequest* request,
    ::ola::proto::Ack* response,
    ola::rpc::RpcService::CompletionCallback* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void OlaServerService_Stub::GetPluginDescription(
    ola::rpc::RpcController* controller,
    const ::ola::proto::PluginDescriptionRequest* request,
    ::ola::proto::PluginDescriptionReply* response,
    ola::rpc::RpcService::CompletionCallback* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void OlaServerService_Stub::GetPluginState(
    ola::rpc::RpcController* controller,
    const ::ola::proto::PluginStateRequest* request,
    ::ola::proto::PluginStateReply* response,
    ola::rpc::RpcService::CompletionCallback* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}
void OlaServerService_Stub::GetDeviceInfo(
    ola::rpc::RpcController* controller,
    const ::ola::proto::DeviceInfoRequest* request,
    ::ola::proto::DeviceInfoReply* response,
    ola::rpc::RpcService::CompletionCallback* done) {
  channel_->CallMethod(descriptor()->method(4),
                       controller, request, response, done);
}
void OlaServerService_Stub::GetCandidatePorts(
    ola::rpc::RpcController* controller,
    const ::ola::proto::OptionalUniverseRequest* request,
    ::ola::proto::DeviceInfoReply* response,
    ola::rpc::RpcService::CompletionCallback* done) {
  channel_->CallMethod(descriptor()->method(5),
                       controller, request, response, done);
}
void OlaServerService_Stub::ConfigureDevice(
    ola::rpc::RpcController* controller,
    const ::ola::proto::DeviceConfigRequest* request,
    ::ola::proto::DeviceConfigReply* response,
    ola::rpc::RpcService::CompletionCallback* done) {
  channel_->CallMethod(descriptor()->method(6),
                       controller, request, response, done);
}
void OlaServerService_Stub::SetPluginState(
    ola::rpc::RpcController* controller,
    const ::ola::proto::PluginStateChangeRequest* request,
    ::ola::proto::Ack* response,
    ola::rpc::RpcService::CompletionCallback* done) {
  channel_->CallMethod(descriptor()->method(7),
                       controller, request, response, done);
}
void OlaServerService_Stub::SetPortPriority(
    ola::rpc::RpcController* controller,
    const ::ola::proto::PortPriorityRequest* request,
    ::ola::proto::Ack* response,
    ola::rpc::RpcService::CompletionCallback* done) {
  channel_->CallMethod(descriptor()->method(8),
                       controller, request, response, done);
}
void OlaServerService_Stub::GetUniverseInfo(
    ola::rpc::RpcController* controller,
    const ::ola::proto::OptionalUniverseRequest* request,
    ::ola::proto::UniverseInfoReply* response,
    ola::rpc::RpcService::CompletionCallback* done) {
  channel_->CallMethod(descriptor()->method(9),
                       controller, request, response, done);
}
void OlaServerService_Stub::SetUniverseName(
    ola::rpc::RpcController* controller,
    const ::ola::proto::UniverseNameRequest* request,
    ::ola::proto::Ack* response,
    ola::rpc::RpcService::CompletionCallback* done) {
  channel_->CallMethod(descriptor()->method(10),
                       controller, request, response, done);
}
void OlaServerService_Stub::SetMergeMode(
    ola::rpc::RpcController* controller,
    const ::ola::proto::MergeModeRequest* request,
    ::ola::proto::Ack* response,
    ola::rpc::RpcService::CompletionCallback* done) {
  channel_->CallMethod(descriptor()->method(11),
                       controller, request, response, done);
}
void OlaServerService_Stub::PatchPort(
    ola::rpc::RpcController* controller,
    const ::ola::proto::PatchPortRequest* request,
    ::ola::proto::Ack* response,
    ola::rpc::RpcService::CompletionCallback* done) {
  channel_->CallMethod(descriptor()->method(12),
                       controller, request, response, done);
}
void OlaServerService_Stub::RegisterForDmx(
    ola::rpc::RpcController* controller,
    const ::ola::proto::RegisterDmxRequest* request,
    ::ola::proto::Ack* response,
    ola::rpc::RpcService::CompletionCallback* done) {
  channel_->CallMethod(descriptor()->method(13),
                       controller, request, response, done);
}
void OlaServerService_Stub::UpdateDmxData(
    ola::rpc::RpcController* controller,
    const ::ola::proto::DmxData* request,
    ::ola::proto::Ack* response,
    ola::rpc::RpcService::CompletionCallback* done) {
  channel_->CallMethod(descriptor()->method(14),
                       controller, request, response, done);
}
void OlaServerService_Stub::GetDmx(
    ola::rpc::RpcController* controller,
    const ::ola::proto::UniverseRequest* request,
    ::ola::proto::DmxData* response,
    ola::rpc::RpcService::CompletionCallback* done) {
  channel_->CallMethod(descriptor()->method(15),
                       controller, request, response, done);
}
void OlaServerService_Stub::GetUIDs(
    ola::rpc::RpcController* controller,
    const ::ola::proto::UniverseRequest* request,
    ::ola::proto::UIDListReply* response,
    ola::rpc::RpcService::CompletionCallback* done) {
  channel_->CallMethod(descriptor()->method(16),
                       controller, request, response, done);
}
void OlaServerService_Stub::ForceDiscovery(
    ola::rpc::RpcController* controller,
    const ::ola::proto::DiscoveryRequest* request,
    ::ola::proto::UIDListReply* response,
    ola::rpc::RpcService::CompletionCallback* done) {
  channel_->CallMethod(descriptor()->method(17),
                       controller, request, response, done);
}
void OlaServerService_Stub::SetSourceUID(
    ola::rpc::RpcController* controller,
    const ::ola::proto::UID* request,
    ::ola::proto::Ack* response,
    ola::rpc::RpcService::CompletionCallback* done) {
  channel_->CallMethod(descriptor()->method(18),
                       controller, request, response, done);
}
void OlaServerService_Stub::RDMCommand(
    ola::rpc::RpcController* controller,
    const ::ola::proto::RDMRequest* request,
    ::ola::proto::RDMResponse* response,
    ola::rpc::RpcService::CompletionCallback* done) {
  channel_->CallMethod(descriptor()->method(19),
                       controller, request, response, done);
}
void OlaServerService_Stub::RDMDiscoveryCommand(
    ola::rpc::RpcController* controller,
    const ::ola::proto::RDMDiscoveryRequest* request,
    ::ola::proto::RDMResponse* response,
    ola::rpc::RpcService::CompletionCallback* done) {
  channel_->CallMethod(descriptor()->method(20),
                       controller, request, response, done);
}
void OlaServerService_Stub::StreamDmxData(
    ola::rpc::RpcController* controller,
    const ::ola::proto::DmxData* request,
    ::ola::proto::STREAMING_NO_RESPONSE* response,
    ola::rpc::RpcService::CompletionCallback* done) {
  channel_->CallMethod(descriptor()->method(21),
                       controller, request, response, done);
}
void OlaServerService_Stub::SendTimeCode(
    ola::rpc::RpcController* controller,
    const ::ola::proto::TimeCode* request,
    ::ola::proto::Ack* response,
    ola::rpc::RpcService::CompletionCallback* done) {
  channel_->CallMethod(descriptor()->method(22),
                       controller, request, response, done);
}
OlaClientService::~OlaClientService() {}

const ::google::protobuf::ServiceDescriptor* OlaClientService::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OlaClientService_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* OlaClientService::GetDescriptor() {
  protobuf_AssignDescriptorsOnce();
  return OlaClientService_descriptor_;
}

void OlaClientService::UpdateDmxData(
    ola::rpc::RpcController* controller,
    const ::ola::proto::DmxData*,
    ::ola::proto::Ack*,
    ola::rpc::RpcService::CompletionCallback* done) {
  controller->SetFailed("Method UpdateDmxData() not implemented.");
  done->Run();
}

void OlaClientService::CallMethod(
    const ::google::protobuf::MethodDescriptor* method,
    ola::rpc::RpcController* controller,
    const ::google::protobuf::Message* request,
    ::google::protobuf::Message* response,
    ola::rpc::RpcService::CompletionCallback* done) {
  GOOGLE_DCHECK_EQ(method->service(), OlaClientService_descriptor_);
  switch (method->index()) {
    case 0:
      UpdateDmxData(
          controller,
          ::google::protobuf::down_cast<
              const ::ola::proto::DmxData*>(request),
          ::google::protobuf::down_cast<
              ::ola::proto::Ack*>(response),
          done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& OlaClientService::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch (method->index()) {
    case 0:
      return ::ola::proto::DmxData::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *static_cast< ::google::protobuf::Message*>(NULL);
  }
}

const ::google::protobuf::Message& OlaClientService::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch (method->index()) {
    case 0:
      return ::ola::proto::Ack::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *static_cast< ::google::protobuf::Message*>(NULL);
  }
}

OlaClientService_Stub::OlaClientService_Stub(ola::rpc::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}

OlaClientService_Stub::OlaClientService_Stub(
    ola::rpc::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership ==
                  ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}

OlaClientService_Stub::~OlaClientService_Stub() {
  if (owns_channel_) {
    delete channel_;
  }
}

void OlaClientService_Stub::UpdateDmxData(
    ola::rpc::RpcController* controller,
    const ::ola::proto::DmxData* request,
    ::ola::proto::Ack* response,
    ola::rpc::RpcService::CompletionCallback* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}

}  // namespace proto
}  // namespace ola
