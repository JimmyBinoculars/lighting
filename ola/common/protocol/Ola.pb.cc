// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Ola.proto

#include "Ola.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_Ola_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DeviceInfo_Ola_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Ola_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PluginInfo_Ola_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Ola_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PortInfo_Ola_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Ola_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RDMFrame_Ola_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Ola_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RDMFrameTiming_Ola_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Ola_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RDMRequestOverrideOptions_Ola_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Ola_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UID_Ola_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Ola_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UniverseInfo_Ola_2eproto;
namespace ola {
namespace proto {
class STREAMING_NO_RESPONSEDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<STREAMING_NO_RESPONSE> _instance;
} _STREAMING_NO_RESPONSE_default_instance_;
class AckDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Ack> _instance;
} _Ack_default_instance_;
class PluginListRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PluginListRequest> _instance;
} _PluginListRequest_default_instance_;
class PluginReloadRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PluginReloadRequest> _instance;
} _PluginReloadRequest_default_instance_;
class PluginInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PluginInfo> _instance;
} _PluginInfo_default_instance_;
class PluginListReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PluginListReply> _instance;
} _PluginListReply_default_instance_;
class PluginDescriptionRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PluginDescriptionRequest> _instance;
} _PluginDescriptionRequest_default_instance_;
class PluginDescriptionReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PluginDescriptionReply> _instance;
} _PluginDescriptionReply_default_instance_;
class PluginStateRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PluginStateRequest> _instance;
} _PluginStateRequest_default_instance_;
class PluginStateReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PluginStateReply> _instance;
} _PluginStateReply_default_instance_;
class PluginStateChangeRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PluginStateChangeRequest> _instance;
} _PluginStateChangeRequest_default_instance_;
class DeviceInfoRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeviceInfoRequest> _instance;
} _DeviceInfoRequest_default_instance_;
class PortInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PortInfo> _instance;
} _PortInfo_default_instance_;
class DeviceInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeviceInfo> _instance;
} _DeviceInfo_default_instance_;
class DeviceInfoReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeviceInfoReply> _instance;
} _DeviceInfoReply_default_instance_;
class DmxDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DmxData> _instance;
} _DmxData_default_instance_;
class RegisterDmxRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RegisterDmxRequest> _instance;
} _RegisterDmxRequest_default_instance_;
class PatchPortRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PatchPortRequest> _instance;
} _PatchPortRequest_default_instance_;
class UniverseNameRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UniverseNameRequest> _instance;
} _UniverseNameRequest_default_instance_;
class MergeModeRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MergeModeRequest> _instance;
} _MergeModeRequest_default_instance_;
class OptionalUniverseRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OptionalUniverseRequest> _instance;
} _OptionalUniverseRequest_default_instance_;
class UniverseInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UniverseInfo> _instance;
} _UniverseInfo_default_instance_;
class UniverseInfoReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UniverseInfoReply> _instance;
} _UniverseInfoReply_default_instance_;
class PortPriorityRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PortPriorityRequest> _instance;
} _PortPriorityRequest_default_instance_;
class DeviceConfigRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeviceConfigRequest> _instance;
} _DeviceConfigRequest_default_instance_;
class DeviceConfigReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeviceConfigReply> _instance;
} _DeviceConfigReply_default_instance_;
class UIDDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UID> _instance;
} _UID_default_instance_;
class UniverseRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UniverseRequest> _instance;
} _UniverseRequest_default_instance_;
class DiscoveryRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DiscoveryRequest> _instance;
} _DiscoveryRequest_default_instance_;
class UIDListReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UIDListReply> _instance;
} _UIDListReply_default_instance_;
class RDMRequestOverrideOptionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RDMRequestOverrideOptions> _instance;
} _RDMRequestOverrideOptions_default_instance_;
class RDMRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RDMRequest> _instance;
} _RDMRequest_default_instance_;
class RDMDiscoveryRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RDMDiscoveryRequest> _instance;
} _RDMDiscoveryRequest_default_instance_;
class RDMFrameTimingDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RDMFrameTiming> _instance;
} _RDMFrameTiming_default_instance_;
class RDMFrameDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RDMFrame> _instance;
} _RDMFrame_default_instance_;
class RDMResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RDMResponse> _instance;
} _RDMResponse_default_instance_;
class TimeCodeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TimeCode> _instance;
} _TimeCode_default_instance_;
}  // namespace proto
}  // namespace ola
static void InitDefaultsscc_info_Ack_Ola_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ola::proto::_Ack_default_instance_;
    new (ptr) ::ola::proto::Ack();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ola::proto::Ack::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Ack_Ola_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Ack_Ola_2eproto}, {}};

static void InitDefaultsscc_info_DeviceConfigReply_Ola_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ola::proto::_DeviceConfigReply_default_instance_;
    new (ptr) ::ola::proto::DeviceConfigReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ola::proto::DeviceConfigReply::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeviceConfigReply_Ola_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeviceConfigReply_Ola_2eproto}, {}};

static void InitDefaultsscc_info_DeviceConfigRequest_Ola_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ola::proto::_DeviceConfigRequest_default_instance_;
    new (ptr) ::ola::proto::DeviceConfigRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ola::proto::DeviceConfigRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeviceConfigRequest_Ola_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeviceConfigRequest_Ola_2eproto}, {}};

static void InitDefaultsscc_info_DeviceInfo_Ola_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ola::proto::_DeviceInfo_default_instance_;
    new (ptr) ::ola::proto::DeviceInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ola::proto::DeviceInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DeviceInfo_Ola_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DeviceInfo_Ola_2eproto}, {
      &scc_info_PortInfo_Ola_2eproto.base,}};

static void InitDefaultsscc_info_DeviceInfoReply_Ola_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ola::proto::_DeviceInfoReply_default_instance_;
    new (ptr) ::ola::proto::DeviceInfoReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ola::proto::DeviceInfoReply::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DeviceInfoReply_Ola_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DeviceInfoReply_Ola_2eproto}, {
      &scc_info_DeviceInfo_Ola_2eproto.base,}};

static void InitDefaultsscc_info_DeviceInfoRequest_Ola_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ola::proto::_DeviceInfoRequest_default_instance_;
    new (ptr) ::ola::proto::DeviceInfoRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ola::proto::DeviceInfoRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeviceInfoRequest_Ola_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeviceInfoRequest_Ola_2eproto}, {}};

static void InitDefaultsscc_info_DiscoveryRequest_Ola_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ola::proto::_DiscoveryRequest_default_instance_;
    new (ptr) ::ola::proto::DiscoveryRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ola::proto::DiscoveryRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DiscoveryRequest_Ola_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DiscoveryRequest_Ola_2eproto}, {}};

static void InitDefaultsscc_info_DmxData_Ola_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ola::proto::_DmxData_default_instance_;
    new (ptr) ::ola::proto::DmxData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ola::proto::DmxData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DmxData_Ola_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DmxData_Ola_2eproto}, {}};

static void InitDefaultsscc_info_MergeModeRequest_Ola_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ola::proto::_MergeModeRequest_default_instance_;
    new (ptr) ::ola::proto::MergeModeRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ola::proto::MergeModeRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MergeModeRequest_Ola_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MergeModeRequest_Ola_2eproto}, {}};

static void InitDefaultsscc_info_OptionalUniverseRequest_Ola_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ola::proto::_OptionalUniverseRequest_default_instance_;
    new (ptr) ::ola::proto::OptionalUniverseRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ola::proto::OptionalUniverseRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OptionalUniverseRequest_Ola_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OptionalUniverseRequest_Ola_2eproto}, {}};

static void InitDefaultsscc_info_PatchPortRequest_Ola_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ola::proto::_PatchPortRequest_default_instance_;
    new (ptr) ::ola::proto::PatchPortRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ola::proto::PatchPortRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PatchPortRequest_Ola_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PatchPortRequest_Ola_2eproto}, {}};

static void InitDefaultsscc_info_PluginDescriptionReply_Ola_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ola::proto::_PluginDescriptionReply_default_instance_;
    new (ptr) ::ola::proto::PluginDescriptionReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ola::proto::PluginDescriptionReply::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PluginDescriptionReply_Ola_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PluginDescriptionReply_Ola_2eproto}, {}};

static void InitDefaultsscc_info_PluginDescriptionRequest_Ola_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ola::proto::_PluginDescriptionRequest_default_instance_;
    new (ptr) ::ola::proto::PluginDescriptionRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ola::proto::PluginDescriptionRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PluginDescriptionRequest_Ola_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PluginDescriptionRequest_Ola_2eproto}, {}};

static void InitDefaultsscc_info_PluginInfo_Ola_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ola::proto::_PluginInfo_default_instance_;
    new (ptr) ::ola::proto::PluginInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ola::proto::PluginInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PluginInfo_Ola_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PluginInfo_Ola_2eproto}, {}};

static void InitDefaultsscc_info_PluginListReply_Ola_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ola::proto::_PluginListReply_default_instance_;
    new (ptr) ::ola::proto::PluginListReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ola::proto::PluginListReply::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PluginListReply_Ola_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PluginListReply_Ola_2eproto}, {
      &scc_info_PluginInfo_Ola_2eproto.base,}};

static void InitDefaultsscc_info_PluginListRequest_Ola_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ola::proto::_PluginListRequest_default_instance_;
    new (ptr) ::ola::proto::PluginListRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ola::proto::PluginListRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PluginListRequest_Ola_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PluginListRequest_Ola_2eproto}, {}};

static void InitDefaultsscc_info_PluginReloadRequest_Ola_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ola::proto::_PluginReloadRequest_default_instance_;
    new (ptr) ::ola::proto::PluginReloadRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ola::proto::PluginReloadRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PluginReloadRequest_Ola_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PluginReloadRequest_Ola_2eproto}, {}};

static void InitDefaultsscc_info_PluginStateChangeRequest_Ola_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ola::proto::_PluginStateChangeRequest_default_instance_;
    new (ptr) ::ola::proto::PluginStateChangeRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ola::proto::PluginStateChangeRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PluginStateChangeRequest_Ola_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PluginStateChangeRequest_Ola_2eproto}, {}};

static void InitDefaultsscc_info_PluginStateReply_Ola_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ola::proto::_PluginStateReply_default_instance_;
    new (ptr) ::ola::proto::PluginStateReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ola::proto::PluginStateReply::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PluginStateReply_Ola_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PluginStateReply_Ola_2eproto}, {
      &scc_info_PluginInfo_Ola_2eproto.base,}};

static void InitDefaultsscc_info_PluginStateRequest_Ola_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ola::proto::_PluginStateRequest_default_instance_;
    new (ptr) ::ola::proto::PluginStateRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ola::proto::PluginStateRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PluginStateRequest_Ola_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PluginStateRequest_Ola_2eproto}, {}};

static void InitDefaultsscc_info_PortInfo_Ola_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ola::proto::_PortInfo_default_instance_;
    new (ptr) ::ola::proto::PortInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ola::proto::PortInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PortInfo_Ola_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PortInfo_Ola_2eproto}, {}};

static void InitDefaultsscc_info_PortPriorityRequest_Ola_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ola::proto::_PortPriorityRequest_default_instance_;
    new (ptr) ::ola::proto::PortPriorityRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ola::proto::PortPriorityRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PortPriorityRequest_Ola_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PortPriorityRequest_Ola_2eproto}, {}};

static void InitDefaultsscc_info_RDMDiscoveryRequest_Ola_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ola::proto::_RDMDiscoveryRequest_default_instance_;
    new (ptr) ::ola::proto::RDMDiscoveryRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ola::proto::RDMDiscoveryRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RDMDiscoveryRequest_Ola_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_RDMDiscoveryRequest_Ola_2eproto}, {
      &scc_info_UID_Ola_2eproto.base,
      &scc_info_RDMRequestOverrideOptions_Ola_2eproto.base,}};

static void InitDefaultsscc_info_RDMFrame_Ola_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ola::proto::_RDMFrame_default_instance_;
    new (ptr) ::ola::proto::RDMFrame();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ola::proto::RDMFrame::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RDMFrame_Ola_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RDMFrame_Ola_2eproto}, {
      &scc_info_RDMFrameTiming_Ola_2eproto.base,}};

static void InitDefaultsscc_info_RDMFrameTiming_Ola_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ola::proto::_RDMFrameTiming_default_instance_;
    new (ptr) ::ola::proto::RDMFrameTiming();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ola::proto::RDMFrameTiming::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RDMFrameTiming_Ola_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RDMFrameTiming_Ola_2eproto}, {}};

static void InitDefaultsscc_info_RDMRequest_Ola_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ola::proto::_RDMRequest_default_instance_;
    new (ptr) ::ola::proto::RDMRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ola::proto::RDMRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RDMRequest_Ola_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_RDMRequest_Ola_2eproto}, {
      &scc_info_UID_Ola_2eproto.base,
      &scc_info_RDMRequestOverrideOptions_Ola_2eproto.base,}};

static void InitDefaultsscc_info_RDMRequestOverrideOptions_Ola_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ola::proto::_RDMRequestOverrideOptions_default_instance_;
    new (ptr) ::ola::proto::RDMRequestOverrideOptions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ola::proto::RDMRequestOverrideOptions::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RDMRequestOverrideOptions_Ola_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RDMRequestOverrideOptions_Ola_2eproto}, {}};

static void InitDefaultsscc_info_RDMResponse_Ola_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ola::proto::_RDMResponse_default_instance_;
    new (ptr) ::ola::proto::RDMResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ola::proto::RDMResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RDMResponse_Ola_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_RDMResponse_Ola_2eproto}, {
      &scc_info_UID_Ola_2eproto.base,
      &scc_info_RDMFrame_Ola_2eproto.base,}};

static void InitDefaultsscc_info_RegisterDmxRequest_Ola_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ola::proto::_RegisterDmxRequest_default_instance_;
    new (ptr) ::ola::proto::RegisterDmxRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ola::proto::RegisterDmxRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RegisterDmxRequest_Ola_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RegisterDmxRequest_Ola_2eproto}, {}};

static void InitDefaultsscc_info_STREAMING_NO_RESPONSE_Ola_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ola::proto::_STREAMING_NO_RESPONSE_default_instance_;
    new (ptr) ::ola::proto::STREAMING_NO_RESPONSE();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ola::proto::STREAMING_NO_RESPONSE::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_STREAMING_NO_RESPONSE_Ola_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_STREAMING_NO_RESPONSE_Ola_2eproto}, {}};

static void InitDefaultsscc_info_TimeCode_Ola_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ola::proto::_TimeCode_default_instance_;
    new (ptr) ::ola::proto::TimeCode();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ola::proto::TimeCode::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TimeCode_Ola_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TimeCode_Ola_2eproto}, {}};

static void InitDefaultsscc_info_UID_Ola_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ola::proto::_UID_default_instance_;
    new (ptr) ::ola::proto::UID();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ola::proto::UID::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UID_Ola_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UID_Ola_2eproto}, {}};

static void InitDefaultsscc_info_UIDListReply_Ola_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ola::proto::_UIDListReply_default_instance_;
    new (ptr) ::ola::proto::UIDListReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ola::proto::UIDListReply::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UIDListReply_Ola_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UIDListReply_Ola_2eproto}, {
      &scc_info_UID_Ola_2eproto.base,}};

static void InitDefaultsscc_info_UniverseInfo_Ola_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ola::proto::_UniverseInfo_default_instance_;
    new (ptr) ::ola::proto::UniverseInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ola::proto::UniverseInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UniverseInfo_Ola_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UniverseInfo_Ola_2eproto}, {
      &scc_info_PortInfo_Ola_2eproto.base,}};

static void InitDefaultsscc_info_UniverseInfoReply_Ola_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ola::proto::_UniverseInfoReply_default_instance_;
    new (ptr) ::ola::proto::UniverseInfoReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ola::proto::UniverseInfoReply::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UniverseInfoReply_Ola_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UniverseInfoReply_Ola_2eproto}, {
      &scc_info_UniverseInfo_Ola_2eproto.base,}};

static void InitDefaultsscc_info_UniverseNameRequest_Ola_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ola::proto::_UniverseNameRequest_default_instance_;
    new (ptr) ::ola::proto::UniverseNameRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ola::proto::UniverseNameRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UniverseNameRequest_Ola_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UniverseNameRequest_Ola_2eproto}, {}};

static void InitDefaultsscc_info_UniverseRequest_Ola_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ola::proto::_UniverseRequest_default_instance_;
    new (ptr) ::ola::proto::UniverseRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ola::proto::UniverseRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UniverseRequest_Ola_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UniverseRequest_Ola_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Ola_2eproto[37];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_Ola_2eproto[8];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Ola_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_Ola_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ola::proto::STREAMING_NO_RESPONSE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ola::proto::Ack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ola::proto::PluginListRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ola::proto::PluginReloadRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ola::proto::PluginInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ola::proto::PluginInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ola::proto::PluginInfo, plugin_id_),
  PROTOBUF_FIELD_OFFSET(::ola::proto::PluginInfo, name_),
  PROTOBUF_FIELD_OFFSET(::ola::proto::PluginInfo, active_),
  PROTOBUF_FIELD_OFFSET(::ola::proto::PluginInfo, enabled_),
  1,
  0,
  2,
  3,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ola::proto::PluginListReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ola::proto::PluginListReply, plugin_),
  PROTOBUF_FIELD_OFFSET(::ola::proto::PluginDescriptionRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ola::proto::PluginDescriptionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ola::proto::PluginDescriptionRequest, plugin_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::ola::proto::PluginDescriptionReply, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ola::proto::PluginDescriptionReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ola::proto::PluginDescriptionReply, name_),
  PROTOBUF_FIELD_OFFSET(::ola::proto::PluginDescriptionReply, description_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ola::proto::PluginStateRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ola::proto::PluginStateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ola::proto::PluginStateRequest, plugin_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::ola::proto::PluginStateReply, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ola::proto::PluginStateReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ola::proto::PluginStateReply, name_),
  PROTOBUF_FIELD_OFFSET(::ola::proto::PluginStateReply, enabled_),
  PROTOBUF_FIELD_OFFSET(::ola::proto::PluginStateReply, active_),
  PROTOBUF_FIELD_OFFSET(::ola::proto::PluginStateReply, preferences_source_),
  PROTOBUF_FIELD_OFFSET(::ola::proto::PluginStateReply, conflicts_with_),
  0,
  2,
  3,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::ola::proto::PluginStateChangeRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ola::proto::PluginStateChangeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ola::proto::PluginStateChangeRequest, plugin_id_),
  PROTOBUF_FIELD_OFFSET(::ola::proto::PluginStateChangeRequest, enabled_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ola::proto::DeviceInfoRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ola::proto::DeviceInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ola::proto::DeviceInfoRequest, plugin_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::ola::proto::PortInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ola::proto::PortInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ola::proto::PortInfo, port_id_),
  PROTOBUF_FIELD_OFFSET(::ola::proto::PortInfo, priority_capability_),
  PROTOBUF_FIELD_OFFSET(::ola::proto::PortInfo, description_),
  PROTOBUF_FIELD_OFFSET(::ola::proto::PortInfo, universe_),
  PROTOBUF_FIELD_OFFSET(::ola::proto::PortInfo, active_),
  PROTOBUF_FIELD_OFFSET(::ola::proto::PortInfo, priority_mode_),
  PROTOBUF_FIELD_OFFSET(::ola::proto::PortInfo, priority_),
  PROTOBUF_FIELD_OFFSET(::ola::proto::PortInfo, supports_rdm_),
  1,
  2,
  0,
  3,
  5,
  4,
  7,
  6,
  PROTOBUF_FIELD_OFFSET(::ola::proto::DeviceInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ola::proto::DeviceInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ola::proto::DeviceInfo, device_alias_),
  PROTOBUF_FIELD_OFFSET(::ola::proto::DeviceInfo, plugin_id_),
  PROTOBUF_FIELD_OFFSET(::ola::proto::DeviceInfo, device_name_),
  PROTOBUF_FIELD_OFFSET(::ola::proto::DeviceInfo, input_port_),
  PROTOBUF_FIELD_OFFSET(::ola::proto::DeviceInfo, output_port_),
  PROTOBUF_FIELD_OFFSET(::ola::proto::DeviceInfo, device_id_),
  2,
  3,
  0,
  ~0u,
  ~0u,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ola::proto::DeviceInfoReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ola::proto::DeviceInfoReply, device_),
  PROTOBUF_FIELD_OFFSET(::ola::proto::DmxData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ola::proto::DmxData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ola::proto::DmxData, universe_),
  PROTOBUF_FIELD_OFFSET(::ola::proto::DmxData, data_),
  PROTOBUF_FIELD_OFFSET(::ola::proto::DmxData, priority_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::ola::proto::RegisterDmxRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ola::proto::RegisterDmxRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ola::proto::RegisterDmxRequest, universe_),
  PROTOBUF_FIELD_OFFSET(::ola::proto::RegisterDmxRequest, action_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ola::proto::PatchPortRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ola::proto::PatchPortRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ola::proto::PatchPortRequest, universe_),
  PROTOBUF_FIELD_OFFSET(::ola::proto::PatchPortRequest, device_alias_),
  PROTOBUF_FIELD_OFFSET(::ola::proto::PatchPortRequest, port_id_),
  PROTOBUF_FIELD_OFFSET(::ola::proto::PatchPortRequest, action_),
  PROTOBUF_FIELD_OFFSET(::ola::proto::PatchPortRequest, is_output_),
  0,
  1,
  2,
  4,
  3,
  PROTOBUF_FIELD_OFFSET(::ola::proto::UniverseNameRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ola::proto::UniverseNameRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ola::proto::UniverseNameRequest, universe_),
  PROTOBUF_FIELD_OFFSET(::ola::proto::UniverseNameRequest, name_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::ola::proto::MergeModeRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ola::proto::MergeModeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ola::proto::MergeModeRequest, universe_),
  PROTOBUF_FIELD_OFFSET(::ola::proto::MergeModeRequest, merge_mode_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ola::proto::OptionalUniverseRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ola::proto::OptionalUniverseRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ola::proto::OptionalUniverseRequest, universe_),
  0,
  PROTOBUF_FIELD_OFFSET(::ola::proto::UniverseInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ola::proto::UniverseInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ola::proto::UniverseInfo, universe_),
  PROTOBUF_FIELD_OFFSET(::ola::proto::UniverseInfo, name_),
  PROTOBUF_FIELD_OFFSET(::ola::proto::UniverseInfo, merge_mode_),
  PROTOBUF_FIELD_OFFSET(::ola::proto::UniverseInfo, input_port_count_),
  PROTOBUF_FIELD_OFFSET(::ola::proto::UniverseInfo, output_port_count_),
  PROTOBUF_FIELD_OFFSET(::ola::proto::UniverseInfo, rdm_devices_),
  PROTOBUF_FIELD_OFFSET(::ola::proto::UniverseInfo, input_ports_),
  PROTOBUF_FIELD_OFFSET(::ola::proto::UniverseInfo, output_ports_),
  1,
  0,
  5,
  2,
  3,
  4,
  ~0u,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ola::proto::UniverseInfoReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ola::proto::UniverseInfoReply, universe_),
  PROTOBUF_FIELD_OFFSET(::ola::proto::PortPriorityRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ola::proto::PortPriorityRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ola::proto::PortPriorityRequest, device_alias_),
  PROTOBUF_FIELD_OFFSET(::ola::proto::PortPriorityRequest, is_output_),
  PROTOBUF_FIELD_OFFSET(::ola::proto::PortPriorityRequest, port_id_),
  PROTOBUF_FIELD_OFFSET(::ola::proto::PortPriorityRequest, priority_mode_),
  PROTOBUF_FIELD_OFFSET(::ola::proto::PortPriorityRequest, priority_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::ola::proto::DeviceConfigRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ola::proto::DeviceConfigRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ola::proto::DeviceConfigRequest, device_alias_),
  PROTOBUF_FIELD_OFFSET(::ola::proto::DeviceConfigRequest, data_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::ola::proto::DeviceConfigReply, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ola::proto::DeviceConfigReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ola::proto::DeviceConfigReply, data_),
  0,
  PROTOBUF_FIELD_OFFSET(::ola::proto::UID, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ola::proto::UID, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ola::proto::UID, esta_id_),
  PROTOBUF_FIELD_OFFSET(::ola::proto::UID, device_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ola::proto::UniverseRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ola::proto::UniverseRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ola::proto::UniverseRequest, universe_),
  0,
  PROTOBUF_FIELD_OFFSET(::ola::proto::DiscoveryRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ola::proto::DiscoveryRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ola::proto::DiscoveryRequest, universe_),
  PROTOBUF_FIELD_OFFSET(::ola::proto::DiscoveryRequest, full_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ola::proto::UIDListReply, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ola::proto::UIDListReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ola::proto::UIDListReply, universe_),
  PROTOBUF_FIELD_OFFSET(::ola::proto::UIDListReply, uid_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::ola::proto::RDMRequestOverrideOptions, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ola::proto::RDMRequestOverrideOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ola::proto::RDMRequestOverrideOptions, sub_start_code_),
  PROTOBUF_FIELD_OFFSET(::ola::proto::RDMRequestOverrideOptions, message_length_),
  PROTOBUF_FIELD_OFFSET(::ola::proto::RDMRequestOverrideOptions, message_count_),
  PROTOBUF_FIELD_OFFSET(::ola::proto::RDMRequestOverrideOptions, checksum_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::ola::proto::RDMRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ola::proto::RDMRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ola::proto::RDMRequest, universe_),
  PROTOBUF_FIELD_OFFSET(::ola::proto::RDMRequest, uid_),
  PROTOBUF_FIELD_OFFSET(::ola::proto::RDMRequest, sub_device_),
  PROTOBUF_FIELD_OFFSET(::ola::proto::RDMRequest, param_id_),
  PROTOBUF_FIELD_OFFSET(::ola::proto::RDMRequest, data_),
  PROTOBUF_FIELD_OFFSET(::ola::proto::RDMRequest, is_set_),
  PROTOBUF_FIELD_OFFSET(::ola::proto::RDMRequest, include_raw_response_),
  PROTOBUF_FIELD_OFFSET(::ola::proto::RDMRequest, options_),
  3,
  1,
  4,
  5,
  0,
  6,
  7,
  2,
  PROTOBUF_FIELD_OFFSET(::ola::proto::RDMDiscoveryRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ola::proto::RDMDiscoveryRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ola::proto::RDMDiscoveryRequest, universe_),
  PROTOBUF_FIELD_OFFSET(::ola::proto::RDMDiscoveryRequest, uid_),
  PROTOBUF_FIELD_OFFSET(::ola::proto::RDMDiscoveryRequest, sub_device_),
  PROTOBUF_FIELD_OFFSET(::ola::proto::RDMDiscoveryRequest, param_id_),
  PROTOBUF_FIELD_OFFSET(::ola::proto::RDMDiscoveryRequest, data_),
  PROTOBUF_FIELD_OFFSET(::ola::proto::RDMDiscoveryRequest, include_raw_response_),
  PROTOBUF_FIELD_OFFSET(::ola::proto::RDMDiscoveryRequest, options_),
  3,
  1,
  4,
  5,
  0,
  6,
  2,
  PROTOBUF_FIELD_OFFSET(::ola::proto::RDMFrameTiming, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ola::proto::RDMFrameTiming, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ola::proto::RDMFrameTiming, response_delay_),
  PROTOBUF_FIELD_OFFSET(::ola::proto::RDMFrameTiming, break_time_),
  PROTOBUF_FIELD_OFFSET(::ola::proto::RDMFrameTiming, mark_time_),
  PROTOBUF_FIELD_OFFSET(::ola::proto::RDMFrameTiming, data_time_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::ola::proto::RDMFrame, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ola::proto::RDMFrame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ola::proto::RDMFrame, raw_response_),
  PROTOBUF_FIELD_OFFSET(::ola::proto::RDMFrame, timing_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ola::proto::RDMResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ola::proto::RDMResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ola::proto::RDMResponse, response_code_),
  PROTOBUF_FIELD_OFFSET(::ola::proto::RDMResponse, source_uid_),
  PROTOBUF_FIELD_OFFSET(::ola::proto::RDMResponse, dest_uid_),
  PROTOBUF_FIELD_OFFSET(::ola::proto::RDMResponse, transaction_number_),
  PROTOBUF_FIELD_OFFSET(::ola::proto::RDMResponse, response_type_),
  PROTOBUF_FIELD_OFFSET(::ola::proto::RDMResponse, message_count_),
  PROTOBUF_FIELD_OFFSET(::ola::proto::RDMResponse, sub_device_),
  PROTOBUF_FIELD_OFFSET(::ola::proto::RDMResponse, command_class_),
  PROTOBUF_FIELD_OFFSET(::ola::proto::RDMResponse, param_id_),
  PROTOBUF_FIELD_OFFSET(::ola::proto::RDMResponse, data_),
  PROTOBUF_FIELD_OFFSET(::ola::proto::RDMResponse, raw_response_),
  PROTOBUF_FIELD_OFFSET(::ola::proto::RDMResponse, raw_frame_),
  3,
  1,
  2,
  9,
  4,
  5,
  8,
  7,
  6,
  0,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::ola::proto::TimeCode, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ola::proto::TimeCode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ola::proto::TimeCode, hours_),
  PROTOBUF_FIELD_OFFSET(::ola::proto::TimeCode, minutes_),
  PROTOBUF_FIELD_OFFSET(::ola::proto::TimeCode, seconds_),
  PROTOBUF_FIELD_OFFSET(::ola::proto::TimeCode, frames_),
  PROTOBUF_FIELD_OFFSET(::ola::proto::TimeCode, type_),
  0,
  1,
  2,
  3,
  4,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::ola::proto::STREAMING_NO_RESPONSE)},
  { 5, -1, sizeof(::ola::proto::Ack)},
  { 10, -1, sizeof(::ola::proto::PluginListRequest)},
  { 15, -1, sizeof(::ola::proto::PluginReloadRequest)},
  { 20, 29, sizeof(::ola::proto::PluginInfo)},
  { 33, -1, sizeof(::ola::proto::PluginListReply)},
  { 39, 45, sizeof(::ola::proto::PluginDescriptionRequest)},
  { 46, 53, sizeof(::ola::proto::PluginDescriptionReply)},
  { 55, 61, sizeof(::ola::proto::PluginStateRequest)},
  { 62, 72, sizeof(::ola::proto::PluginStateReply)},
  { 77, 84, sizeof(::ola::proto::PluginStateChangeRequest)},
  { 86, 92, sizeof(::ola::proto::DeviceInfoRequest)},
  { 93, 106, sizeof(::ola::proto::PortInfo)},
  { 114, 125, sizeof(::ola::proto::DeviceInfo)},
  { 131, -1, sizeof(::ola::proto::DeviceInfoReply)},
  { 137, 145, sizeof(::ola::proto::DmxData)},
  { 148, 155, sizeof(::ola::proto::RegisterDmxRequest)},
  { 157, 167, sizeof(::ola::proto::PatchPortRequest)},
  { 172, 179, sizeof(::ola::proto::UniverseNameRequest)},
  { 181, 188, sizeof(::ola::proto::MergeModeRequest)},
  { 190, 196, sizeof(::ola::proto::OptionalUniverseRequest)},
  { 197, 210, sizeof(::ola::proto::UniverseInfo)},
  { 218, -1, sizeof(::ola::proto::UniverseInfoReply)},
  { 224, 234, sizeof(::ola::proto::PortPriorityRequest)},
  { 239, 246, sizeof(::ola::proto::DeviceConfigRequest)},
  { 248, 254, sizeof(::ola::proto::DeviceConfigReply)},
  { 255, 262, sizeof(::ola::proto::UID)},
  { 264, 270, sizeof(::ola::proto::UniverseRequest)},
  { 271, 278, sizeof(::ola::proto::DiscoveryRequest)},
  { 280, 287, sizeof(::ola::proto::UIDListReply)},
  { 289, 298, sizeof(::ola::proto::RDMRequestOverrideOptions)},
  { 302, 315, sizeof(::ola::proto::RDMRequest)},
  { 323, 335, sizeof(::ola::proto::RDMDiscoveryRequest)},
  { 342, 351, sizeof(::ola::proto::RDMFrameTiming)},
  { 355, 362, sizeof(::ola::proto::RDMFrame)},
  { 364, 381, sizeof(::ola::proto::RDMResponse)},
  { 393, 403, sizeof(::ola::proto::TimeCode)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ola::proto::_STREAMING_NO_RESPONSE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ola::proto::_Ack_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ola::proto::_PluginListRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ola::proto::_PluginReloadRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ola::proto::_PluginInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ola::proto::_PluginListReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ola::proto::_PluginDescriptionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ola::proto::_PluginDescriptionReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ola::proto::_PluginStateRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ola::proto::_PluginStateReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ola::proto::_PluginStateChangeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ola::proto::_DeviceInfoRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ola::proto::_PortInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ola::proto::_DeviceInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ola::proto::_DeviceInfoReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ola::proto::_DmxData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ola::proto::_RegisterDmxRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ola::proto::_PatchPortRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ola::proto::_UniverseNameRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ola::proto::_MergeModeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ola::proto::_OptionalUniverseRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ola::proto::_UniverseInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ola::proto::_UniverseInfoReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ola::proto::_PortPriorityRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ola::proto::_DeviceConfigRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ola::proto::_DeviceConfigReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ola::proto::_UID_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ola::proto::_UniverseRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ola::proto::_DiscoveryRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ola::proto::_UIDListReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ola::proto::_RDMRequestOverrideOptions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ola::proto::_RDMRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ola::proto::_RDMDiscoveryRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ola::proto::_RDMFrameTiming_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ola::proto::_RDMFrame_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ola::proto::_RDMResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ola::proto::_TimeCode_default_instance_),
};

const char descriptor_table_protodef_Ola_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\tOla.proto\022\tola.proto\"\027\n\025STREAMING_NO_R"
  "ESPONSE\"\005\n\003Ack\"\023\n\021PluginListRequest\"\025\n\023P"
  "luginReloadRequest\"N\n\nPluginInfo\022\021\n\tplug"
  "in_id\030\001 \002(\005\022\014\n\004name\030\002 \002(\t\022\016\n\006active\030\003 \002("
  "\010\022\017\n\007enabled\030\004 \001(\010\"8\n\017PluginListReply\022%\n"
  "\006plugin\030\001 \003(\0132\025.ola.proto.PluginInfo\"-\n\030"
  "PluginDescriptionRequest\022\021\n\tplugin_id\030\001 "
  "\002(\005\";\n\026PluginDescriptionReply\022\014\n\004name\030\001 "
  "\002(\t\022\023\n\013description\030\002 \002(\t\"\'\n\022PluginStateR"
  "equest\022\021\n\tplugin_id\030\001 \002(\005\"\214\001\n\020PluginStat"
  "eReply\022\014\n\004name\030\001 \002(\t\022\017\n\007enabled\030\002 \002(\010\022\016\n"
  "\006active\030\003 \002(\010\022\032\n\022preferences_source\030\004 \002("
  "\t\022-\n\016conflicts_with\030\005 \003(\0132\025.ola.proto.Pl"
  "uginInfo\">\n\030PluginStateChangeRequest\022\021\n\t"
  "plugin_id\030\001 \002(\005\022\017\n\007enabled\030\002 \002(\010\"&\n\021Devi"
  "ceInfoRequest\022\021\n\tplugin_id\030\001 \001(\005\"\265\001\n\010Por"
  "tInfo\022\017\n\007port_id\030\001 \002(\005\022\033\n\023priority_capab"
  "ility\030\002 \002(\005\022\023\n\013description\030\005 \002(\t\022\020\n\010univ"
  "erse\030\003 \001(\005\022\016\n\006active\030\004 \001(\010\022\025\n\rpriority_m"
  "ode\030\006 \001(\005\022\020\n\010priority\030\007 \001(\005\022\033\n\014supports_"
  "rdm\030\010 \001(\010:\005false\"\260\001\n\nDeviceInfo\022\024\n\014devic"
  "e_alias\030\001 \002(\005\022\021\n\tplugin_id\030\002 \002(\005\022\023\n\013devi"
  "ce_name\030\003 \002(\t\022\'\n\ninput_port\030\004 \003(\0132\023.ola."
  "proto.PortInfo\022(\n\013output_port\030\005 \003(\0132\023.ol"
  "a.proto.PortInfo\022\021\n\tdevice_id\030\006 \002(\t\"8\n\017D"
  "eviceInfoReply\022%\n\006device\030\001 \003(\0132\025.ola.pro"
  "to.DeviceInfo\";\n\007DmxData\022\020\n\010universe\030\001 \002"
  "(\005\022\014\n\004data\030\002 \002(\014\022\020\n\010priority\030\003 \001(\005\"Q\n\022Re"
  "gisterDmxRequest\022\020\n\010universe\030\001 \002(\005\022)\n\006ac"
  "tion\030\002 \002(\0162\031.ola.proto.RegisterAction\"\206\001"
  "\n\020PatchPortRequest\022\020\n\010universe\030\001 \002(\005\022\024\n\014"
  "device_alias\030\002 \002(\005\022\017\n\007port_id\030\003 \002(\005\022&\n\006a"
  "ction\030\004 \002(\0162\026.ola.proto.PatchAction\022\021\n\ti"
  "s_output\030\005 \002(\010\"5\n\023UniverseNameRequest\022\020\n"
  "\010universe\030\001 \002(\005\022\014\n\004name\030\002 \002(\t\"N\n\020MergeMo"
  "deRequest\022\020\n\010universe\030\001 \002(\005\022(\n\nmerge_mod"
  "e\030\002 \002(\0162\024.ola.proto.MergeMode\"+\n\027Optiona"
  "lUniverseRequest\022\020\n\010universe\030\001 \001(\005\"\367\001\n\014U"
  "niverseInfo\022\020\n\010universe\030\001 \002(\005\022\014\n\004name\030\002 "
  "\002(\t\022(\n\nmerge_mode\030\003 \002(\0162\024.ola.proto.Merg"
  "eMode\022\030\n\020input_port_count\030\004 \002(\005\022\031\n\021outpu"
  "t_port_count\030\005 \002(\005\022\023\n\013rdm_devices\030\006 \002(\005\022"
  "(\n\013input_ports\030\007 \003(\0132\023.ola.proto.PortInf"
  "o\022)\n\014output_ports\030\010 \003(\0132\023.ola.proto.Port"
  "Info\">\n\021UniverseInfoReply\022)\n\010universe\030\001 "
  "\003(\0132\027.ola.proto.UniverseInfo\"x\n\023PortPrio"
  "rityRequest\022\024\n\014device_alias\030\001 \002(\005\022\021\n\tis_"
  "output\030\002 \002(\010\022\017\n\007port_id\030\003 \002(\005\022\025\n\rpriorit"
  "y_mode\030\004 \002(\005\022\020\n\010priority\030\005 \001(\005\"9\n\023Device"
  "ConfigRequest\022\024\n\014device_alias\030\001 \002(\005\022\014\n\004d"
  "ata\030\002 \002(\014\"!\n\021DeviceConfigReply\022\014\n\004data\030\001"
  " \002(\014\")\n\003UID\022\017\n\007esta_id\030\001 \002(\005\022\021\n\tdevice_i"
  "d\030\002 \002(\007\"#\n\017UniverseRequest\022\020\n\010universe\030\001"
  " \002(\005\"2\n\020DiscoveryRequest\022\020\n\010universe\030\001 \002"
  "(\005\022\014\n\004full\030\002 \002(\010\"=\n\014UIDListReply\022\020\n\010univ"
  "erse\030\001 \002(\005\022\033\n\003uid\030\002 \003(\0132\016.ola.proto.UID\""
  "t\n\031RDMRequestOverrideOptions\022\026\n\016sub_star"
  "t_code\030\001 \001(\r\022\026\n\016message_length\030\002 \001(\r\022\025\n\r"
  "message_count\030\003 \001(\r\022\020\n\010checksum\030\004 \001(\r\"\333\001"
  "\n\nRDMRequest\022\020\n\010universe\030\001 \002(\005\022\033\n\003uid\030\002 "
  "\002(\0132\016.ola.proto.UID\022\022\n\nsub_device\030\003 \002(\005\022"
  "\020\n\010param_id\030\004 \002(\005\022\014\n\004data\030\005 \002(\014\022\016\n\006is_se"
  "t\030\006 \002(\010\022#\n\024include_raw_response\030\007 \001(\010:\005f"
  "alse\0225\n\007options\030\010 \001(\0132$.ola.proto.RDMReq"
  "uestOverrideOptions\"\324\001\n\023RDMDiscoveryRequ"
  "est\022\020\n\010universe\030\001 \002(\005\022\033\n\003uid\030\002 \002(\0132\016.ola"
  ".proto.UID\022\022\n\nsub_device\030\003 \002(\005\022\020\n\010param_"
  "id\030\004 \002(\005\022\014\n\004data\030\005 \002(\014\022#\n\024include_raw_re"
  "sponse\030\006 \001(\010:\005false\0225\n\007options\030\010 \001(\0132$.o"
  "la.proto.RDMRequestOverrideOptions\"b\n\016RD"
  "MFrameTiming\022\026\n\016response_delay\030\001 \001(\005\022\022\n\n"
  "break_time\030\002 \001(\005\022\021\n\tmark_time\030\003 \001(\005\022\021\n\td"
  "ata_time\030\004 \001(\005\"K\n\010RDMFrame\022\024\n\014raw_respon"
  "se\030\001 \001(\014\022)\n\006timing\030\002 \001(\0132\031.ola.proto.RDM"
  "FrameTiming\"\226\003\n\013RDMResponse\0221\n\rresponse_"
  "code\030\001 \002(\0162\032.ola.proto.RDMResponseCode\022\""
  "\n\nsource_uid\030\t \001(\0132\016.ola.proto.UID\022 \n\010de"
  "st_uid\030\n \001(\0132\016.ola.proto.UID\022\032\n\022transact"
  "ion_number\030\013 \001(\005\0221\n\rresponse_type\030\002 \001(\0162"
  "\032.ola.proto.RDMResponseType\022\030\n\rmessage_c"
  "ount\030\003 \001(\r:\0010\022\022\n\nsub_device\030\007 \001(\r\0221\n\rcom"
  "mand_class\030\006 \001(\0162\032.ola.proto.RDMCommandC"
  "lass\022\020\n\010param_id\030\005 \001(\r\022\016\n\004data\030\004 \001(\014:\000\022\024"
  "\n\014raw_response\030\010 \003(\014\022&\n\traw_frame\030\014 \003(\0132"
  "\023.ola.proto.RDMFrame\"r\n\010TimeCode\022\r\n\005hour"
  "s\030\001 \002(\r\022\017\n\007minutes\030\002 \002(\r\022\017\n\007seconds\030\003 \002("
  "\r\022\016\n\006frames\030\004 \002(\r\022%\n\004type\030\005 \002(\0162\027.ola.pr"
  "oto.TimeCodeType*.\n\016RegisterAction\022\014\n\010RE"
  "GISTER\020\001\022\016\n\nUNREGISTER\020\002*%\n\013PatchAction\022"
  "\t\n\005PATCH\020\001\022\013\n\007UNPATCH\020\002*\035\n\tMergeMode\022\007\n\003"
  "HTP\020\001\022\007\n\003LTP\020\002*\326\004\n\tPluginIds\022\022\n\016OLA_PLUG"
  "IN_ALL\020\000\022\024\n\020OLA_PLUGIN_DUMMY\020\001\022\025\n\021OLA_PL"
  "UGIN_ARTNET\020\002\022\026\n\022OLA_PLUGIN_SHOWNET\020\003\022\025\n"
  "\021OLA_PLUGIN_ESPNET\020\004\022\025\n\021OLA_PLUGIN_USBPR"
  "O\020\005\022\026\n\022OLA_PLUGIN_OPENDMX\020\006\022\026\n\022OLA_PLUGI"
  "N_SANDNET\020\007\022\031\n\025OLA_PLUGIN_STAGEPROFI\020\010\022\027"
  "\n\023OLA_PLUGIN_PATHPORT\020\t\022\030\n\024OLA_PLUGIN_DM"
  "X4LINUX\020\n\022\023\n\017OLA_PLUGIN_E131\020\013\022\025\n\021OLA_PL"
  "UGIN_USBDMX\020\014\022\026\n\022OLA_PLUGIN_FTDIDMX\020\r\022\022\n"
  "\016OLA_PLUGIN_OSC\020\016\022\022\n\016OLA_PLUGIN_SPI\020\017\022\024\n"
  "\020OLA_PLUGIN_KINET\020\020\022\025\n\021OLA_PLUGIN_KARATE"
  "\020\021\022\026\n\022OLA_PLUGIN_MILINST\020\022\022\025\n\021OLA_PLUGIN"
  "_RENARD\020\023\022\026\n\022OLA_PLUGIN_UARTDMX\020\024\022\037\n\033OLA"
  "_PLUGIN_OPENPIXELCONTROL\020\025\022\023\n\017OLA_PLUGIN"
  "_GPIO\020\026\022\025\n\021OLA_PLUGIN_SPIDMX\020\027\022\027\n\023OLA_PL"
  "UGIN_NANOLEAF\020\030*\265\004\n\017RDMResponseCode\022\024\n\020R"
  "DM_COMPLETED_OK\020\000\022\025\n\021RDM_WAS_BROADCAST\020\001"
  "\022\026\n\022RDM_FAILED_TO_SEND\020\002\022\017\n\013RDM_TIMEOUT\020"
  "\003\022\030\n\024RDM_INVALID_RESPONSE\020\004\022\023\n\017RDM_UNKNO"
  "WN_UID\020\005\022\032\n\026RDM_CHECKSUM_INCORRECT\020\006\022\034\n\030"
  "RDM_TRANSACTION_MISMATCH\020\007\022\033\n\027RDM_SUB_DE"
  "VICE_MISMATCH\020\010\022\030\n\024RDM_SRC_UID_MISMATCH\020"
  "\t\022\031\n\025RDM_DEST_UID_MISMATCH\020\n\022\034\n\030RDM_WRON"
  "G_SUB_START_CODE\020\013\022\030\n\024RDM_PACKET_TOO_SHO"
  "RT\020\014\022\036\n\032RDM_PACKET_LENGTH_MISMATCH\020\r\022\035\n\031"
  "RDM_PARAM_LENGTH_MISMATCH\020\016\022\035\n\031RDM_INVAL"
  "ID_COMMAND_CLASS\020\017\022\036\n\032RDM_COMMAND_CLASS_"
  "MISMATCH\020\020\022\035\n\031RDM_INVALID_RESPONSE_TYPE\020"
  "\021\022&\n\"RDM_PLUGIN_DISCOVERY_NOT_SUPPORTED\020"
  "\022\022\024\n\020RDM_DUB_RESPONSE\020\023*F\n\017RDMResponseTy"
  "pe\022\013\n\007RDM_ACK\020\000\022\021\n\rRDM_ACK_TIMER\020\001\022\023\n\017RD"
  "M_NACK_REASON\020\002*Y\n\017RDMCommandClass\022\024\n\020RD"
  "M_GET_RESPONSE\020\000\022\024\n\020RDM_SET_RESPONSE\020\001\022\032"
  "\n\026RDM_DISCOVERY_RESPONSE\020\002*X\n\014TimeCodeTy"
  "pe\022\021\n\rTIMECODE_FILM\020\000\022\020\n\014TIMECODE_EBU\020\001\022"
  "\017\n\013TIMECODE_DF\020\002\022\022\n\016TIMECODE_SMPTE\020\0032\303\014\n"
  "\020OlaServerService\022F\n\nGetPlugins\022\034.ola.pr"
  "oto.PluginListRequest\032\032.ola.proto.Plugin"
  "ListReply\022\?\n\rReloadPlugins\022\036.ola.proto.P"
  "luginReloadRequest\032\016.ola.proto.Ack\022^\n\024Ge"
  "tPluginDescription\022#.ola.proto.PluginDes"
  "criptionRequest\032!.ola.proto.PluginDescri"
  "ptionReply\022L\n\016GetPluginState\022\035.ola.proto"
  ".PluginStateRequest\032\033.ola.proto.PluginSt"
  "ateReply\022I\n\rGetDeviceInfo\022\034.ola.proto.De"
  "viceInfoRequest\032\032.ola.proto.DeviceInfoRe"
  "ply\022S\n\021GetCandidatePorts\022\".ola.proto.Opt"
  "ionalUniverseRequest\032\032.ola.proto.DeviceI"
  "nfoReply\022O\n\017ConfigureDevice\022\036.ola.proto."
  "DeviceConfigRequest\032\034.ola.proto.DeviceCo"
  "nfigReply\022E\n\016SetPluginState\022#.ola.proto."
  "PluginStateChangeRequest\032\016.ola.proto.Ack"
  "\022A\n\017SetPortPriority\022\036.ola.proto.PortPrio"
  "rityRequest\032\016.ola.proto.Ack\022S\n\017GetUniver"
  "seInfo\022\".ola.proto.OptionalUniverseReque"
  "st\032\034.ola.proto.UniverseInfoReply\022A\n\017SetU"
  "niverseName\022\036.ola.proto.UniverseNameRequ"
  "est\032\016.ola.proto.Ack\022;\n\014SetMergeMode\022\033.ol"
  "a.proto.MergeModeRequest\032\016.ola.proto.Ack"
  "\0228\n\tPatchPort\022\033.ola.proto.PatchPortReque"
  "st\032\016.ola.proto.Ack\022\?\n\016RegisterForDmx\022\035.o"
  "la.proto.RegisterDmxRequest\032\016.ola.proto."
  "Ack\0223\n\rUpdateDmxData\022\022.ola.proto.DmxData"
  "\032\016.ola.proto.Ack\0228\n\006GetDmx\022\032.ola.proto.U"
  "niverseRequest\032\022.ola.proto.DmxData\022>\n\007Ge"
  "tUIDs\022\032.ola.proto.UniverseRequest\032\027.ola."
  "proto.UIDListReply\022F\n\016ForceDiscovery\022\033.o"
  "la.proto.DiscoveryRequest\032\027.ola.proto.UI"
  "DListReply\022.\n\014SetSourceUID\022\016.ola.proto.U"
  "ID\032\016.ola.proto.Ack\022;\n\nRDMCommand\022\025.ola.p"
  "roto.RDMRequest\032\026.ola.proto.RDMResponse\022"
  "M\n\023RDMDiscoveryCommand\022\036.ola.proto.RDMDi"
  "scoveryRequest\032\026.ola.proto.RDMResponse\022E"
  "\n\rStreamDmxData\022\022.ola.proto.DmxData\032 .ol"
  "a.proto.STREAMING_NO_RESPONSE\0223\n\014SendTim"
  "eCode\022\023.ola.proto.TimeCode\032\016.ola.proto.A"
  "ck2G\n\020OlaClientService\0223\n\rUpdateDmxData\022"
  "\022.ola.proto.DmxData\032\016.ola.proto.AckB\t\200\001\000"
  "\210\001\001\220\001\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_Ola_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_Ola_2eproto_sccs[37] = {
  &scc_info_Ack_Ola_2eproto.base,
  &scc_info_DeviceConfigReply_Ola_2eproto.base,
  &scc_info_DeviceConfigRequest_Ola_2eproto.base,
  &scc_info_DeviceInfo_Ola_2eproto.base,
  &scc_info_DeviceInfoReply_Ola_2eproto.base,
  &scc_info_DeviceInfoRequest_Ola_2eproto.base,
  &scc_info_DiscoveryRequest_Ola_2eproto.base,
  &scc_info_DmxData_Ola_2eproto.base,
  &scc_info_MergeModeRequest_Ola_2eproto.base,
  &scc_info_OptionalUniverseRequest_Ola_2eproto.base,
  &scc_info_PatchPortRequest_Ola_2eproto.base,
  &scc_info_PluginDescriptionReply_Ola_2eproto.base,
  &scc_info_PluginDescriptionRequest_Ola_2eproto.base,
  &scc_info_PluginInfo_Ola_2eproto.base,
  &scc_info_PluginListReply_Ola_2eproto.base,
  &scc_info_PluginListRequest_Ola_2eproto.base,
  &scc_info_PluginReloadRequest_Ola_2eproto.base,
  &scc_info_PluginStateChangeRequest_Ola_2eproto.base,
  &scc_info_PluginStateReply_Ola_2eproto.base,
  &scc_info_PluginStateRequest_Ola_2eproto.base,
  &scc_info_PortInfo_Ola_2eproto.base,
  &scc_info_PortPriorityRequest_Ola_2eproto.base,
  &scc_info_RDMDiscoveryRequest_Ola_2eproto.base,
  &scc_info_RDMFrame_Ola_2eproto.base,
  &scc_info_RDMFrameTiming_Ola_2eproto.base,
  &scc_info_RDMRequest_Ola_2eproto.base,
  &scc_info_RDMRequestOverrideOptions_Ola_2eproto.base,
  &scc_info_RDMResponse_Ola_2eproto.base,
  &scc_info_RegisterDmxRequest_Ola_2eproto.base,
  &scc_info_STREAMING_NO_RESPONSE_Ola_2eproto.base,
  &scc_info_TimeCode_Ola_2eproto.base,
  &scc_info_UID_Ola_2eproto.base,
  &scc_info_UIDListReply_Ola_2eproto.base,
  &scc_info_UniverseInfo_Ola_2eproto.base,
  &scc_info_UniverseInfoReply_Ola_2eproto.base,
  &scc_info_UniverseNameRequest_Ola_2eproto.base,
  &scc_info_UniverseRequest_Ola_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Ola_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Ola_2eproto = {
  false, false, descriptor_table_protodef_Ola_2eproto, "Ola.proto", 6726,
  &descriptor_table_Ola_2eproto_once, descriptor_table_Ola_2eproto_sccs, descriptor_table_Ola_2eproto_deps, 37, 0,
  schemas, file_default_instances, TableStruct_Ola_2eproto::offsets,
  file_level_metadata_Ola_2eproto, 37, file_level_enum_descriptors_Ola_2eproto, file_level_service_descriptors_Ola_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_Ola_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_Ola_2eproto)), true);
namespace ola {
namespace proto {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RegisterAction_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Ola_2eproto);
  return file_level_enum_descriptors_Ola_2eproto[0];
}
bool RegisterAction_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PatchAction_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Ola_2eproto);
  return file_level_enum_descriptors_Ola_2eproto[1];
}
bool PatchAction_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MergeMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Ola_2eproto);
  return file_level_enum_descriptors_Ola_2eproto[2];
}
bool MergeMode_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PluginIds_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Ola_2eproto);
  return file_level_enum_descriptors_Ola_2eproto[3];
}
bool PluginIds_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RDMResponseCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Ola_2eproto);
  return file_level_enum_descriptors_Ola_2eproto[4];
}
bool RDMResponseCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RDMResponseType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Ola_2eproto);
  return file_level_enum_descriptors_Ola_2eproto[5];
}
bool RDMResponseType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RDMCommandClass_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Ola_2eproto);
  return file_level_enum_descriptors_Ola_2eproto[6];
}
bool RDMCommandClass_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TimeCodeType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Ola_2eproto);
  return file_level_enum_descriptors_Ola_2eproto[7];
}
bool TimeCodeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void STREAMING_NO_RESPONSE::InitAsDefaultInstance() {
}
class STREAMING_NO_RESPONSE::_Internal {
 public:
};

STREAMING_NO_RESPONSE::STREAMING_NO_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ola.proto.STREAMING_NO_RESPONSE)
}
STREAMING_NO_RESPONSE::STREAMING_NO_RESPONSE(const STREAMING_NO_RESPONSE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ola.proto.STREAMING_NO_RESPONSE)
}

void STREAMING_NO_RESPONSE::SharedCtor() {
}

STREAMING_NO_RESPONSE::~STREAMING_NO_RESPONSE() {
  // @@protoc_insertion_point(destructor:ola.proto.STREAMING_NO_RESPONSE)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void STREAMING_NO_RESPONSE::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void STREAMING_NO_RESPONSE::ArenaDtor(void* object) {
  STREAMING_NO_RESPONSE* _this = reinterpret_cast< STREAMING_NO_RESPONSE* >(object);
  (void)_this;
}
void STREAMING_NO_RESPONSE::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void STREAMING_NO_RESPONSE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const STREAMING_NO_RESPONSE& STREAMING_NO_RESPONSE::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_STREAMING_NO_RESPONSE_Ola_2eproto.base);
  return *internal_default_instance();
}


void STREAMING_NO_RESPONSE::Clear() {
// @@protoc_insertion_point(message_clear_start:ola.proto.STREAMING_NO_RESPONSE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* STREAMING_NO_RESPONSE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* STREAMING_NO_RESPONSE::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ola.proto.STREAMING_NO_RESPONSE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ola.proto.STREAMING_NO_RESPONSE)
  return target;
}

size_t STREAMING_NO_RESPONSE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ola.proto.STREAMING_NO_RESPONSE)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void STREAMING_NO_RESPONSE::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ola.proto.STREAMING_NO_RESPONSE)
  GOOGLE_DCHECK_NE(&from, this);
  const STREAMING_NO_RESPONSE* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<STREAMING_NO_RESPONSE>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ola.proto.STREAMING_NO_RESPONSE)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ola.proto.STREAMING_NO_RESPONSE)
    MergeFrom(*source);
  }
}

void STREAMING_NO_RESPONSE::MergeFrom(const STREAMING_NO_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ola.proto.STREAMING_NO_RESPONSE)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void STREAMING_NO_RESPONSE::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ola.proto.STREAMING_NO_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void STREAMING_NO_RESPONSE::CopyFrom(const STREAMING_NO_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ola.proto.STREAMING_NO_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool STREAMING_NO_RESPONSE::IsInitialized() const {
  return true;
}

void STREAMING_NO_RESPONSE::InternalSwap(STREAMING_NO_RESPONSE* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata STREAMING_NO_RESPONSE::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Ack::InitAsDefaultInstance() {
}
class Ack::_Internal {
 public:
};

Ack::Ack(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ola.proto.Ack)
}
Ack::Ack(const Ack& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ola.proto.Ack)
}

void Ack::SharedCtor() {
}

Ack::~Ack() {
  // @@protoc_insertion_point(destructor:ola.proto.Ack)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Ack::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Ack::ArenaDtor(void* object) {
  Ack* _this = reinterpret_cast< Ack* >(object);
  (void)_this;
}
void Ack::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Ack::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Ack& Ack::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Ack_Ola_2eproto.base);
  return *internal_default_instance();
}


void Ack::Clear() {
// @@protoc_insertion_point(message_clear_start:ola.proto.Ack)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Ack::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Ack::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ola.proto.Ack)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ola.proto.Ack)
  return target;
}

size_t Ack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ola.proto.Ack)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Ack::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ola.proto.Ack)
  GOOGLE_DCHECK_NE(&from, this);
  const Ack* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Ack>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ola.proto.Ack)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ola.proto.Ack)
    MergeFrom(*source);
  }
}

void Ack::MergeFrom(const Ack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ola.proto.Ack)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Ack::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ola.proto.Ack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ack::CopyFrom(const Ack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ola.proto.Ack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ack::IsInitialized() const {
  return true;
}

void Ack::InternalSwap(Ack* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Ack::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PluginListRequest::InitAsDefaultInstance() {
}
class PluginListRequest::_Internal {
 public:
};

PluginListRequest::PluginListRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ola.proto.PluginListRequest)
}
PluginListRequest::PluginListRequest(const PluginListRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ola.proto.PluginListRequest)
}

void PluginListRequest::SharedCtor() {
}

PluginListRequest::~PluginListRequest() {
  // @@protoc_insertion_point(destructor:ola.proto.PluginListRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PluginListRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PluginListRequest::ArenaDtor(void* object) {
  PluginListRequest* _this = reinterpret_cast< PluginListRequest* >(object);
  (void)_this;
}
void PluginListRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PluginListRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PluginListRequest& PluginListRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PluginListRequest_Ola_2eproto.base);
  return *internal_default_instance();
}


void PluginListRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ola.proto.PluginListRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PluginListRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PluginListRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ola.proto.PluginListRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ola.proto.PluginListRequest)
  return target;
}

size_t PluginListRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ola.proto.PluginListRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PluginListRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ola.proto.PluginListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PluginListRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PluginListRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ola.proto.PluginListRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ola.proto.PluginListRequest)
    MergeFrom(*source);
  }
}

void PluginListRequest::MergeFrom(const PluginListRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ola.proto.PluginListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void PluginListRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ola.proto.PluginListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PluginListRequest::CopyFrom(const PluginListRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ola.proto.PluginListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PluginListRequest::IsInitialized() const {
  return true;
}

void PluginListRequest::InternalSwap(PluginListRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PluginListRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PluginReloadRequest::InitAsDefaultInstance() {
}
class PluginReloadRequest::_Internal {
 public:
};

PluginReloadRequest::PluginReloadRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ola.proto.PluginReloadRequest)
}
PluginReloadRequest::PluginReloadRequest(const PluginReloadRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ola.proto.PluginReloadRequest)
}

void PluginReloadRequest::SharedCtor() {
}

PluginReloadRequest::~PluginReloadRequest() {
  // @@protoc_insertion_point(destructor:ola.proto.PluginReloadRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PluginReloadRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PluginReloadRequest::ArenaDtor(void* object) {
  PluginReloadRequest* _this = reinterpret_cast< PluginReloadRequest* >(object);
  (void)_this;
}
void PluginReloadRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PluginReloadRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PluginReloadRequest& PluginReloadRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PluginReloadRequest_Ola_2eproto.base);
  return *internal_default_instance();
}


void PluginReloadRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ola.proto.PluginReloadRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PluginReloadRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PluginReloadRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ola.proto.PluginReloadRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ola.proto.PluginReloadRequest)
  return target;
}

size_t PluginReloadRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ola.proto.PluginReloadRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PluginReloadRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ola.proto.PluginReloadRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PluginReloadRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PluginReloadRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ola.proto.PluginReloadRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ola.proto.PluginReloadRequest)
    MergeFrom(*source);
  }
}

void PluginReloadRequest::MergeFrom(const PluginReloadRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ola.proto.PluginReloadRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void PluginReloadRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ola.proto.PluginReloadRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PluginReloadRequest::CopyFrom(const PluginReloadRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ola.proto.PluginReloadRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PluginReloadRequest::IsInitialized() const {
  return true;
}

void PluginReloadRequest::InternalSwap(PluginReloadRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PluginReloadRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PluginInfo::InitAsDefaultInstance() {
}
class PluginInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<PluginInfo>()._has_bits_);
  static void set_has_plugin_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_active(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

PluginInfo::PluginInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ola.proto.PluginInfo)
}
PluginInfo::PluginInfo(const PluginInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  ::memcpy(&plugin_id_, &from.plugin_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&enabled_) -
    reinterpret_cast<char*>(&plugin_id_)) + sizeof(enabled_));
  // @@protoc_insertion_point(copy_constructor:ola.proto.PluginInfo)
}

void PluginInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PluginInfo_Ola_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&plugin_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enabled_) -
      reinterpret_cast<char*>(&plugin_id_)) + sizeof(enabled_));
}

PluginInfo::~PluginInfo() {
  // @@protoc_insertion_point(destructor:ola.proto.PluginInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PluginInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PluginInfo::ArenaDtor(void* object) {
  PluginInfo* _this = reinterpret_cast< PluginInfo* >(object);
  (void)_this;
}
void PluginInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PluginInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PluginInfo& PluginInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PluginInfo_Ola_2eproto.base);
  return *internal_default_instance();
}


void PluginInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ola.proto.PluginInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&plugin_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&enabled_) -
        reinterpret_cast<char*>(&plugin_id_)) + sizeof(enabled_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PluginInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 plugin_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_plugin_id(&has_bits);
          plugin_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ola.proto.PluginInfo.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool active = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_active(&has_bits);
          active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool enabled = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_enabled(&has_bits);
          enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PluginInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ola.proto.PluginInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 plugin_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_plugin_id(), target);
  }

  // required string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ola.proto.PluginInfo.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // required bool active = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_active(), target);
  }

  // optional bool enabled = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_enabled(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ola.proto.PluginInfo)
  return target;
}

size_t PluginInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ola.proto.PluginInfo)
  size_t total_size = 0;

  if (_internal_has_name()) {
    // required string name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (_internal_has_plugin_id()) {
    // required int32 plugin_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_plugin_id());
  }

  if (_internal_has_active()) {
    // required bool active = 3;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t PluginInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ola.proto.PluginInfo)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());

    // required int32 plugin_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_plugin_id());

    // required bool active = 3;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool enabled = 4;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000008u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PluginInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ola.proto.PluginInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const PluginInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PluginInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ola.proto.PluginInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ola.proto.PluginInfo)
    MergeFrom(*source);
  }
}

void PluginInfo::MergeFrom(const PluginInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ola.proto.PluginInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      plugin_id_ = from.plugin_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      active_ = from.active_;
    }
    if (cached_has_bits & 0x00000008u) {
      enabled_ = from.enabled_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PluginInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ola.proto.PluginInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PluginInfo::CopyFrom(const PluginInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ola.proto.PluginInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PluginInfo::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void PluginInfo::InternalSwap(PluginInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PluginInfo, enabled_)
      + sizeof(PluginInfo::enabled_)
      - PROTOBUF_FIELD_OFFSET(PluginInfo, plugin_id_)>(
          reinterpret_cast<char*>(&plugin_id_),
          reinterpret_cast<char*>(&other->plugin_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PluginInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PluginListReply::InitAsDefaultInstance() {
}
class PluginListReply::_Internal {
 public:
};

PluginListReply::PluginListReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  plugin_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ola.proto.PluginListReply)
}
PluginListReply::PluginListReply(const PluginListReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      plugin_(from.plugin_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ola.proto.PluginListReply)
}

void PluginListReply::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PluginListReply_Ola_2eproto.base);
}

PluginListReply::~PluginListReply() {
  // @@protoc_insertion_point(destructor:ola.proto.PluginListReply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PluginListReply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PluginListReply::ArenaDtor(void* object) {
  PluginListReply* _this = reinterpret_cast< PluginListReply* >(object);
  (void)_this;
}
void PluginListReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PluginListReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PluginListReply& PluginListReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PluginListReply_Ola_2eproto.base);
  return *internal_default_instance();
}


void PluginListReply::Clear() {
// @@protoc_insertion_point(message_clear_start:ola.proto.PluginListReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  plugin_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PluginListReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .ola.proto.PluginInfo plugin = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_plugin(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PluginListReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ola.proto.PluginListReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ola.proto.PluginInfo plugin = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_plugin_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_plugin(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ola.proto.PluginListReply)
  return target;
}

size_t PluginListReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ola.proto.PluginListReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ola.proto.PluginInfo plugin = 1;
  total_size += 1UL * this->_internal_plugin_size();
  for (const auto& msg : this->plugin_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PluginListReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ola.proto.PluginListReply)
  GOOGLE_DCHECK_NE(&from, this);
  const PluginListReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PluginListReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ola.proto.PluginListReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ola.proto.PluginListReply)
    MergeFrom(*source);
  }
}

void PluginListReply::MergeFrom(const PluginListReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ola.proto.PluginListReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  plugin_.MergeFrom(from.plugin_);
}

void PluginListReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ola.proto.PluginListReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PluginListReply::CopyFrom(const PluginListReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ola.proto.PluginListReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PluginListReply::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(plugin_)) return false;
  return true;
}

void PluginListReply::InternalSwap(PluginListReply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  plugin_.InternalSwap(&other->plugin_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PluginListReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PluginDescriptionRequest::InitAsDefaultInstance() {
}
class PluginDescriptionRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<PluginDescriptionRequest>()._has_bits_);
  static void set_has_plugin_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

PluginDescriptionRequest::PluginDescriptionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ola.proto.PluginDescriptionRequest)
}
PluginDescriptionRequest::PluginDescriptionRequest(const PluginDescriptionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  plugin_id_ = from.plugin_id_;
  // @@protoc_insertion_point(copy_constructor:ola.proto.PluginDescriptionRequest)
}

void PluginDescriptionRequest::SharedCtor() {
  plugin_id_ = 0;
}

PluginDescriptionRequest::~PluginDescriptionRequest() {
  // @@protoc_insertion_point(destructor:ola.proto.PluginDescriptionRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PluginDescriptionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PluginDescriptionRequest::ArenaDtor(void* object) {
  PluginDescriptionRequest* _this = reinterpret_cast< PluginDescriptionRequest* >(object);
  (void)_this;
}
void PluginDescriptionRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PluginDescriptionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PluginDescriptionRequest& PluginDescriptionRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PluginDescriptionRequest_Ola_2eproto.base);
  return *internal_default_instance();
}


void PluginDescriptionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ola.proto.PluginDescriptionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  plugin_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PluginDescriptionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 plugin_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_plugin_id(&has_bits);
          plugin_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PluginDescriptionRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ola.proto.PluginDescriptionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 plugin_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_plugin_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ola.proto.PluginDescriptionRequest)
  return target;
}

size_t PluginDescriptionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ola.proto.PluginDescriptionRequest)
  size_t total_size = 0;

  // required int32 plugin_id = 1;
  if (_internal_has_plugin_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_plugin_id());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PluginDescriptionRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ola.proto.PluginDescriptionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PluginDescriptionRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PluginDescriptionRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ola.proto.PluginDescriptionRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ola.proto.PluginDescriptionRequest)
    MergeFrom(*source);
  }
}

void PluginDescriptionRequest::MergeFrom(const PluginDescriptionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ola.proto.PluginDescriptionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_plugin_id()) {
    _internal_set_plugin_id(from._internal_plugin_id());
  }
}

void PluginDescriptionRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ola.proto.PluginDescriptionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PluginDescriptionRequest::CopyFrom(const PluginDescriptionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ola.proto.PluginDescriptionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PluginDescriptionRequest::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void PluginDescriptionRequest::InternalSwap(PluginDescriptionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(plugin_id_, other->plugin_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PluginDescriptionRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PluginDescriptionReply::InitAsDefaultInstance() {
}
class PluginDescriptionReply::_Internal {
 public:
  using HasBits = decltype(std::declval<PluginDescriptionReply>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_description(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

PluginDescriptionReply::PluginDescriptionReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ola.proto.PluginDescriptionReply)
}
PluginDescriptionReply::PluginDescriptionReply(const PluginDescriptionReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_description()) {
    description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_description(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:ola.proto.PluginDescriptionReply)
}

void PluginDescriptionReply::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PluginDescriptionReply_Ola_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PluginDescriptionReply::~PluginDescriptionReply() {
  // @@protoc_insertion_point(destructor:ola.proto.PluginDescriptionReply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PluginDescriptionReply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PluginDescriptionReply::ArenaDtor(void* object) {
  PluginDescriptionReply* _this = reinterpret_cast< PluginDescriptionReply* >(object);
  (void)_this;
}
void PluginDescriptionReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PluginDescriptionReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PluginDescriptionReply& PluginDescriptionReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PluginDescriptionReply_Ola_2eproto.base);
  return *internal_default_instance();
}


void PluginDescriptionReply::Clear() {
// @@protoc_insertion_point(message_clear_start:ola.proto.PluginDescriptionReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      description_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PluginDescriptionReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ola.proto.PluginDescriptionReply.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string description = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ola.proto.PluginDescriptionReply.description");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PluginDescriptionReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ola.proto.PluginDescriptionReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ola.proto.PluginDescriptionReply.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // required string description = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ola.proto.PluginDescriptionReply.description");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_description(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ola.proto.PluginDescriptionReply)
  return target;
}

size_t PluginDescriptionReply::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ola.proto.PluginDescriptionReply)
  size_t total_size = 0;

  if (_internal_has_name()) {
    // required string name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (_internal_has_description()) {
    // required string description = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  return total_size;
}
size_t PluginDescriptionReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ola.proto.PluginDescriptionReply)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());

    // required string description = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PluginDescriptionReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ola.proto.PluginDescriptionReply)
  GOOGLE_DCHECK_NE(&from, this);
  const PluginDescriptionReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PluginDescriptionReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ola.proto.PluginDescriptionReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ola.proto.PluginDescriptionReply)
    MergeFrom(*source);
  }
}

void PluginDescriptionReply::MergeFrom(const PluginDescriptionReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ola.proto.PluginDescriptionReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_description(from._internal_description());
    }
  }
}

void PluginDescriptionReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ola.proto.PluginDescriptionReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PluginDescriptionReply::CopyFrom(const PluginDescriptionReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ola.proto.PluginDescriptionReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PluginDescriptionReply::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void PluginDescriptionReply::InternalSwap(PluginDescriptionReply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata PluginDescriptionReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PluginStateRequest::InitAsDefaultInstance() {
}
class PluginStateRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<PluginStateRequest>()._has_bits_);
  static void set_has_plugin_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

PluginStateRequest::PluginStateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ola.proto.PluginStateRequest)
}
PluginStateRequest::PluginStateRequest(const PluginStateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  plugin_id_ = from.plugin_id_;
  // @@protoc_insertion_point(copy_constructor:ola.proto.PluginStateRequest)
}

void PluginStateRequest::SharedCtor() {
  plugin_id_ = 0;
}

PluginStateRequest::~PluginStateRequest() {
  // @@protoc_insertion_point(destructor:ola.proto.PluginStateRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PluginStateRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PluginStateRequest::ArenaDtor(void* object) {
  PluginStateRequest* _this = reinterpret_cast< PluginStateRequest* >(object);
  (void)_this;
}
void PluginStateRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PluginStateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PluginStateRequest& PluginStateRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PluginStateRequest_Ola_2eproto.base);
  return *internal_default_instance();
}


void PluginStateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ola.proto.PluginStateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  plugin_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PluginStateRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 plugin_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_plugin_id(&has_bits);
          plugin_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PluginStateRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ola.proto.PluginStateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 plugin_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_plugin_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ola.proto.PluginStateRequest)
  return target;
}

size_t PluginStateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ola.proto.PluginStateRequest)
  size_t total_size = 0;

  // required int32 plugin_id = 1;
  if (_internal_has_plugin_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_plugin_id());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PluginStateRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ola.proto.PluginStateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PluginStateRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PluginStateRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ola.proto.PluginStateRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ola.proto.PluginStateRequest)
    MergeFrom(*source);
  }
}

void PluginStateRequest::MergeFrom(const PluginStateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ola.proto.PluginStateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_plugin_id()) {
    _internal_set_plugin_id(from._internal_plugin_id());
  }
}

void PluginStateRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ola.proto.PluginStateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PluginStateRequest::CopyFrom(const PluginStateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ola.proto.PluginStateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PluginStateRequest::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void PluginStateRequest::InternalSwap(PluginStateRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(plugin_id_, other->plugin_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PluginStateRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PluginStateReply::InitAsDefaultInstance() {
}
class PluginStateReply::_Internal {
 public:
  using HasBits = decltype(std::declval<PluginStateReply>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_active(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_preferences_source(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

PluginStateReply::PluginStateReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  conflicts_with_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ola.proto.PluginStateReply)
}
PluginStateReply::PluginStateReply(const PluginStateReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      conflicts_with_(from.conflicts_with_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  preferences_source_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_preferences_source()) {
    preferences_source_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_preferences_source(),
      GetArena());
  }
  ::memcpy(&enabled_, &from.enabled_,
    static_cast<size_t>(reinterpret_cast<char*>(&active_) -
    reinterpret_cast<char*>(&enabled_)) + sizeof(active_));
  // @@protoc_insertion_point(copy_constructor:ola.proto.PluginStateReply)
}

void PluginStateReply::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PluginStateReply_Ola_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  preferences_source_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&enabled_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&active_) -
      reinterpret_cast<char*>(&enabled_)) + sizeof(active_));
}

PluginStateReply::~PluginStateReply() {
  // @@protoc_insertion_point(destructor:ola.proto.PluginStateReply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PluginStateReply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  preferences_source_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PluginStateReply::ArenaDtor(void* object) {
  PluginStateReply* _this = reinterpret_cast< PluginStateReply* >(object);
  (void)_this;
}
void PluginStateReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PluginStateReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PluginStateReply& PluginStateReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PluginStateReply_Ola_2eproto.base);
  return *internal_default_instance();
}


void PluginStateReply::Clear() {
// @@protoc_insertion_point(message_clear_start:ola.proto.PluginStateReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  conflicts_with_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      preferences_source_.ClearNonDefaultToEmpty();
    }
  }
  ::memset(&enabled_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&active_) -
      reinterpret_cast<char*>(&enabled_)) + sizeof(active_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PluginStateReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ola.proto.PluginStateReply.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool enabled = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_enabled(&has_bits);
          enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool active = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_active(&has_bits);
          active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string preferences_source = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_preferences_source();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ola.proto.PluginStateReply.preferences_source");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ola.proto.PluginInfo conflicts_with = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_conflicts_with(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PluginStateReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ola.proto.PluginStateReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ola.proto.PluginStateReply.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // required bool enabled = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_enabled(), target);
  }

  // required bool active = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_active(), target);
  }

  // required string preferences_source = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_preferences_source().data(), static_cast<int>(this->_internal_preferences_source().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ola.proto.PluginStateReply.preferences_source");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_preferences_source(), target);
  }

  // repeated .ola.proto.PluginInfo conflicts_with = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_conflicts_with_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_conflicts_with(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ola.proto.PluginStateReply)
  return target;
}

size_t PluginStateReply::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ola.proto.PluginStateReply)
  size_t total_size = 0;

  if (_internal_has_name()) {
    // required string name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (_internal_has_preferences_source()) {
    // required string preferences_source = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_preferences_source());
  }

  if (_internal_has_enabled()) {
    // required bool enabled = 2;
    total_size += 1 + 1;
  }

  if (_internal_has_active()) {
    // required bool active = 3;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t PluginStateReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ola.proto.PluginStateReply)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required string name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());

    // required string preferences_source = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_preferences_source());

    // required bool enabled = 2;
    total_size += 1 + 1;

    // required bool active = 3;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ola.proto.PluginInfo conflicts_with = 5;
  total_size += 1UL * this->_internal_conflicts_with_size();
  for (const auto& msg : this->conflicts_with_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PluginStateReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ola.proto.PluginStateReply)
  GOOGLE_DCHECK_NE(&from, this);
  const PluginStateReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PluginStateReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ola.proto.PluginStateReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ola.proto.PluginStateReply)
    MergeFrom(*source);
  }
}

void PluginStateReply::MergeFrom(const PluginStateReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ola.proto.PluginStateReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  conflicts_with_.MergeFrom(from.conflicts_with_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_preferences_source(from._internal_preferences_source());
    }
    if (cached_has_bits & 0x00000004u) {
      enabled_ = from.enabled_;
    }
    if (cached_has_bits & 0x00000008u) {
      active_ = from.active_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PluginStateReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ola.proto.PluginStateReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PluginStateReply::CopyFrom(const PluginStateReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ola.proto.PluginStateReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PluginStateReply::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(conflicts_with_)) return false;
  return true;
}

void PluginStateReply::InternalSwap(PluginStateReply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  conflicts_with_.InternalSwap(&other->conflicts_with_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  preferences_source_.Swap(&other->preferences_source_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PluginStateReply, active_)
      + sizeof(PluginStateReply::active_)
      - PROTOBUF_FIELD_OFFSET(PluginStateReply, enabled_)>(
          reinterpret_cast<char*>(&enabled_),
          reinterpret_cast<char*>(&other->enabled_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PluginStateReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PluginStateChangeRequest::InitAsDefaultInstance() {
}
class PluginStateChangeRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<PluginStateChangeRequest>()._has_bits_);
  static void set_has_plugin_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

PluginStateChangeRequest::PluginStateChangeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ola.proto.PluginStateChangeRequest)
}
PluginStateChangeRequest::PluginStateChangeRequest(const PluginStateChangeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&plugin_id_, &from.plugin_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&enabled_) -
    reinterpret_cast<char*>(&plugin_id_)) + sizeof(enabled_));
  // @@protoc_insertion_point(copy_constructor:ola.proto.PluginStateChangeRequest)
}

void PluginStateChangeRequest::SharedCtor() {
  ::memset(&plugin_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enabled_) -
      reinterpret_cast<char*>(&plugin_id_)) + sizeof(enabled_));
}

PluginStateChangeRequest::~PluginStateChangeRequest() {
  // @@protoc_insertion_point(destructor:ola.proto.PluginStateChangeRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PluginStateChangeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PluginStateChangeRequest::ArenaDtor(void* object) {
  PluginStateChangeRequest* _this = reinterpret_cast< PluginStateChangeRequest* >(object);
  (void)_this;
}
void PluginStateChangeRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PluginStateChangeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PluginStateChangeRequest& PluginStateChangeRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PluginStateChangeRequest_Ola_2eproto.base);
  return *internal_default_instance();
}


void PluginStateChangeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ola.proto.PluginStateChangeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&plugin_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&enabled_) -
        reinterpret_cast<char*>(&plugin_id_)) + sizeof(enabled_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PluginStateChangeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 plugin_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_plugin_id(&has_bits);
          plugin_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool enabled = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_enabled(&has_bits);
          enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PluginStateChangeRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ola.proto.PluginStateChangeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 plugin_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_plugin_id(), target);
  }

  // required bool enabled = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_enabled(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ola.proto.PluginStateChangeRequest)
  return target;
}

size_t PluginStateChangeRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ola.proto.PluginStateChangeRequest)
  size_t total_size = 0;

  if (_internal_has_plugin_id()) {
    // required int32 plugin_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_plugin_id());
  }

  if (_internal_has_enabled()) {
    // required bool enabled = 2;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t PluginStateChangeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ola.proto.PluginStateChangeRequest)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 plugin_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_plugin_id());

    // required bool enabled = 2;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PluginStateChangeRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ola.proto.PluginStateChangeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PluginStateChangeRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PluginStateChangeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ola.proto.PluginStateChangeRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ola.proto.PluginStateChangeRequest)
    MergeFrom(*source);
  }
}

void PluginStateChangeRequest::MergeFrom(const PluginStateChangeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ola.proto.PluginStateChangeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      plugin_id_ = from.plugin_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      enabled_ = from.enabled_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PluginStateChangeRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ola.proto.PluginStateChangeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PluginStateChangeRequest::CopyFrom(const PluginStateChangeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ola.proto.PluginStateChangeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PluginStateChangeRequest::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void PluginStateChangeRequest::InternalSwap(PluginStateChangeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PluginStateChangeRequest, enabled_)
      + sizeof(PluginStateChangeRequest::enabled_)
      - PROTOBUF_FIELD_OFFSET(PluginStateChangeRequest, plugin_id_)>(
          reinterpret_cast<char*>(&plugin_id_),
          reinterpret_cast<char*>(&other->plugin_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PluginStateChangeRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeviceInfoRequest::InitAsDefaultInstance() {
}
class DeviceInfoRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<DeviceInfoRequest>()._has_bits_);
  static void set_has_plugin_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DeviceInfoRequest::DeviceInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ola.proto.DeviceInfoRequest)
}
DeviceInfoRequest::DeviceInfoRequest(const DeviceInfoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  plugin_id_ = from.plugin_id_;
  // @@protoc_insertion_point(copy_constructor:ola.proto.DeviceInfoRequest)
}

void DeviceInfoRequest::SharedCtor() {
  plugin_id_ = 0;
}

DeviceInfoRequest::~DeviceInfoRequest() {
  // @@protoc_insertion_point(destructor:ola.proto.DeviceInfoRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeviceInfoRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DeviceInfoRequest::ArenaDtor(void* object) {
  DeviceInfoRequest* _this = reinterpret_cast< DeviceInfoRequest* >(object);
  (void)_this;
}
void DeviceInfoRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeviceInfoRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeviceInfoRequest& DeviceInfoRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeviceInfoRequest_Ola_2eproto.base);
  return *internal_default_instance();
}


void DeviceInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ola.proto.DeviceInfoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  plugin_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeviceInfoRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 plugin_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_plugin_id(&has_bits);
          plugin_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeviceInfoRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ola.proto.DeviceInfoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 plugin_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_plugin_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ola.proto.DeviceInfoRequest)
  return target;
}

size_t DeviceInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ola.proto.DeviceInfoRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 plugin_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_plugin_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeviceInfoRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ola.proto.DeviceInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeviceInfoRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeviceInfoRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ola.proto.DeviceInfoRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ola.proto.DeviceInfoRequest)
    MergeFrom(*source);
  }
}

void DeviceInfoRequest::MergeFrom(const DeviceInfoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ola.proto.DeviceInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_plugin_id()) {
    _internal_set_plugin_id(from._internal_plugin_id());
  }
}

void DeviceInfoRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ola.proto.DeviceInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceInfoRequest::CopyFrom(const DeviceInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ola.proto.DeviceInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceInfoRequest::IsInitialized() const {
  return true;
}

void DeviceInfoRequest::InternalSwap(DeviceInfoRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(plugin_id_, other->plugin_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeviceInfoRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PortInfo::InitAsDefaultInstance() {
}
class PortInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<PortInfo>()._has_bits_);
  static void set_has_port_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_priority_capability(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_description(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_universe(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_active(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_priority_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_priority(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_supports_rdm(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

PortInfo::PortInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ola.proto.PortInfo)
}
PortInfo::PortInfo(const PortInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_description()) {
    description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_description(),
      GetArena());
  }
  ::memcpy(&port_id_, &from.port_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&priority_) -
    reinterpret_cast<char*>(&port_id_)) + sizeof(priority_));
  // @@protoc_insertion_point(copy_constructor:ola.proto.PortInfo)
}

void PortInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PortInfo_Ola_2eproto.base);
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&port_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&priority_) -
      reinterpret_cast<char*>(&port_id_)) + sizeof(priority_));
}

PortInfo::~PortInfo() {
  // @@protoc_insertion_point(destructor:ola.proto.PortInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PortInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PortInfo::ArenaDtor(void* object) {
  PortInfo* _this = reinterpret_cast< PortInfo* >(object);
  (void)_this;
}
void PortInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PortInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PortInfo& PortInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PortInfo_Ola_2eproto.base);
  return *internal_default_instance();
}


void PortInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ola.proto.PortInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    description_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&port_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&priority_) -
        reinterpret_cast<char*>(&port_id_)) + sizeof(priority_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PortInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 port_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_port_id(&has_bits);
          port_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 priority_capability = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_priority_capability(&has_bits);
          priority_capability_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 universe = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_universe(&has_bits);
          universe_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool active = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_active(&has_bits);
          active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string description = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ola.proto.PortInfo.description");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 priority_mode = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_priority_mode(&has_bits);
          priority_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 priority = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_priority(&has_bits);
          priority_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool supports_rdm = 8 [default = false];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_supports_rdm(&has_bits);
          supports_rdm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PortInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ola.proto.PortInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 port_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_port_id(), target);
  }

  // required int32 priority_capability = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_priority_capability(), target);
  }

  // optional int32 universe = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_universe(), target);
  }

  // optional bool active = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_active(), target);
  }

  // required string description = 5;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ola.proto.PortInfo.description");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_description(), target);
  }

  // optional int32 priority_mode = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_priority_mode(), target);
  }

  // optional int32 priority = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_priority(), target);
  }

  // optional bool supports_rdm = 8 [default = false];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_supports_rdm(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ola.proto.PortInfo)
  return target;
}

size_t PortInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ola.proto.PortInfo)
  size_t total_size = 0;

  if (_internal_has_description()) {
    // required string description = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  if (_internal_has_port_id()) {
    // required int32 port_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_port_id());
  }

  if (_internal_has_priority_capability()) {
    // required int32 priority_capability = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_priority_capability());
  }

  return total_size;
}
size_t PortInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ola.proto.PortInfo)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string description = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());

    // required int32 port_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_port_id());

    // required int32 priority_capability = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_priority_capability());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000f8u) {
    // optional int32 universe = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_universe());
    }

    // optional int32 priority_mode = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_priority_mode());
    }

    // optional bool active = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool supports_rdm = 8 [default = false];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional int32 priority = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_priority());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PortInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ola.proto.PortInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const PortInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PortInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ola.proto.PortInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ola.proto.PortInfo)
    MergeFrom(*source);
  }
}

void PortInfo::MergeFrom(const PortInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ola.proto.PortInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_description(from._internal_description());
    }
    if (cached_has_bits & 0x00000002u) {
      port_id_ = from.port_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      priority_capability_ = from.priority_capability_;
    }
    if (cached_has_bits & 0x00000008u) {
      universe_ = from.universe_;
    }
    if (cached_has_bits & 0x00000010u) {
      priority_mode_ = from.priority_mode_;
    }
    if (cached_has_bits & 0x00000020u) {
      active_ = from.active_;
    }
    if (cached_has_bits & 0x00000040u) {
      supports_rdm_ = from.supports_rdm_;
    }
    if (cached_has_bits & 0x00000080u) {
      priority_ = from.priority_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PortInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ola.proto.PortInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PortInfo::CopyFrom(const PortInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ola.proto.PortInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PortInfo::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void PortInfo::InternalSwap(PortInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PortInfo, priority_)
      + sizeof(PortInfo::priority_)
      - PROTOBUF_FIELD_OFFSET(PortInfo, port_id_)>(
          reinterpret_cast<char*>(&port_id_),
          reinterpret_cast<char*>(&other->port_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PortInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeviceInfo::InitAsDefaultInstance() {
}
class DeviceInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<DeviceInfo>()._has_bits_);
  static void set_has_device_alias(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_plugin_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_device_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_device_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

DeviceInfo::DeviceInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  input_port_(arena),
  output_port_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ola.proto.DeviceInfo)
}
DeviceInfo::DeviceInfo(const DeviceInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      input_port_(from.input_port_),
      output_port_(from.output_port_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  device_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_device_name()) {
    device_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_device_name(),
      GetArena());
  }
  device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_device_id()) {
    device_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_device_id(),
      GetArena());
  }
  ::memcpy(&device_alias_, &from.device_alias_,
    static_cast<size_t>(reinterpret_cast<char*>(&plugin_id_) -
    reinterpret_cast<char*>(&device_alias_)) + sizeof(plugin_id_));
  // @@protoc_insertion_point(copy_constructor:ola.proto.DeviceInfo)
}

void DeviceInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeviceInfo_Ola_2eproto.base);
  device_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&device_alias_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&plugin_id_) -
      reinterpret_cast<char*>(&device_alias_)) + sizeof(plugin_id_));
}

DeviceInfo::~DeviceInfo() {
  // @@protoc_insertion_point(destructor:ola.proto.DeviceInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeviceInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  device_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeviceInfo::ArenaDtor(void* object) {
  DeviceInfo* _this = reinterpret_cast< DeviceInfo* >(object);
  (void)_this;
}
void DeviceInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeviceInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeviceInfo& DeviceInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeviceInfo_Ola_2eproto.base);
  return *internal_default_instance();
}


void DeviceInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ola.proto.DeviceInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  input_port_.Clear();
  output_port_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      device_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      device_id_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&device_alias_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&plugin_id_) -
        reinterpret_cast<char*>(&device_alias_)) + sizeof(plugin_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeviceInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 device_alias = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_device_alias(&has_bits);
          device_alias_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 plugin_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_plugin_id(&has_bits);
          plugin_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string device_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_device_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ola.proto.DeviceInfo.device_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ola.proto.PortInfo input_port = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_input_port(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ola.proto.PortInfo output_port = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_output_port(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // required string device_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_device_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ola.proto.DeviceInfo.device_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeviceInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ola.proto.DeviceInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 device_alias = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_device_alias(), target);
  }

  // required int32 plugin_id = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_plugin_id(), target);
  }

  // required string device_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_device_name().data(), static_cast<int>(this->_internal_device_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ola.proto.DeviceInfo.device_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_device_name(), target);
  }

  // repeated .ola.proto.PortInfo input_port = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_input_port_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_input_port(i), target, stream);
  }

  // repeated .ola.proto.PortInfo output_port = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_output_port_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_output_port(i), target, stream);
  }

  // required string device_id = 6;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_device_id().data(), static_cast<int>(this->_internal_device_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ola.proto.DeviceInfo.device_id");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_device_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ola.proto.DeviceInfo)
  return target;
}

size_t DeviceInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ola.proto.DeviceInfo)
  size_t total_size = 0;

  if (_internal_has_device_name()) {
    // required string device_name = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_name());
  }

  if (_internal_has_device_id()) {
    // required string device_id = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_id());
  }

  if (_internal_has_device_alias()) {
    // required int32 device_alias = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_device_alias());
  }

  if (_internal_has_plugin_id()) {
    // required int32 plugin_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_plugin_id());
  }

  return total_size;
}
size_t DeviceInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ola.proto.DeviceInfo)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required string device_name = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_name());

    // required string device_id = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_id());

    // required int32 device_alias = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_device_alias());

    // required int32 plugin_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_plugin_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ola.proto.PortInfo input_port = 4;
  total_size += 1UL * this->_internal_input_port_size();
  for (const auto& msg : this->input_port_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ola.proto.PortInfo output_port = 5;
  total_size += 1UL * this->_internal_output_port_size();
  for (const auto& msg : this->output_port_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeviceInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ola.proto.DeviceInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const DeviceInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeviceInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ola.proto.DeviceInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ola.proto.DeviceInfo)
    MergeFrom(*source);
  }
}

void DeviceInfo::MergeFrom(const DeviceInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ola.proto.DeviceInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  input_port_.MergeFrom(from.input_port_);
  output_port_.MergeFrom(from.output_port_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_device_name(from._internal_device_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_device_id(from._internal_device_id());
    }
    if (cached_has_bits & 0x00000004u) {
      device_alias_ = from.device_alias_;
    }
    if (cached_has_bits & 0x00000008u) {
      plugin_id_ = from.plugin_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DeviceInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ola.proto.DeviceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceInfo::CopyFrom(const DeviceInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ola.proto.DeviceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceInfo::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(input_port_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(output_port_)) return false;
  return true;
}

void DeviceInfo::InternalSwap(DeviceInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  input_port_.InternalSwap(&other->input_port_);
  output_port_.InternalSwap(&other->output_port_);
  device_name_.Swap(&other->device_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  device_id_.Swap(&other->device_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DeviceInfo, plugin_id_)
      + sizeof(DeviceInfo::plugin_id_)
      - PROTOBUF_FIELD_OFFSET(DeviceInfo, device_alias_)>(
          reinterpret_cast<char*>(&device_alias_),
          reinterpret_cast<char*>(&other->device_alias_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DeviceInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeviceInfoReply::InitAsDefaultInstance() {
}
class DeviceInfoReply::_Internal {
 public:
};

DeviceInfoReply::DeviceInfoReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  device_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ola.proto.DeviceInfoReply)
}
DeviceInfoReply::DeviceInfoReply(const DeviceInfoReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      device_(from.device_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ola.proto.DeviceInfoReply)
}

void DeviceInfoReply::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeviceInfoReply_Ola_2eproto.base);
}

DeviceInfoReply::~DeviceInfoReply() {
  // @@protoc_insertion_point(destructor:ola.proto.DeviceInfoReply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeviceInfoReply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DeviceInfoReply::ArenaDtor(void* object) {
  DeviceInfoReply* _this = reinterpret_cast< DeviceInfoReply* >(object);
  (void)_this;
}
void DeviceInfoReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeviceInfoReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeviceInfoReply& DeviceInfoReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeviceInfoReply_Ola_2eproto.base);
  return *internal_default_instance();
}


void DeviceInfoReply::Clear() {
// @@protoc_insertion_point(message_clear_start:ola.proto.DeviceInfoReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  device_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeviceInfoReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .ola.proto.DeviceInfo device = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_device(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeviceInfoReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ola.proto.DeviceInfoReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ola.proto.DeviceInfo device = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_device_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_device(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ola.proto.DeviceInfoReply)
  return target;
}

size_t DeviceInfoReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ola.proto.DeviceInfoReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ola.proto.DeviceInfo device = 1;
  total_size += 1UL * this->_internal_device_size();
  for (const auto& msg : this->device_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeviceInfoReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ola.proto.DeviceInfoReply)
  GOOGLE_DCHECK_NE(&from, this);
  const DeviceInfoReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeviceInfoReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ola.proto.DeviceInfoReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ola.proto.DeviceInfoReply)
    MergeFrom(*source);
  }
}

void DeviceInfoReply::MergeFrom(const DeviceInfoReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ola.proto.DeviceInfoReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  device_.MergeFrom(from.device_);
}

void DeviceInfoReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ola.proto.DeviceInfoReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceInfoReply::CopyFrom(const DeviceInfoReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ola.proto.DeviceInfoReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceInfoReply::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(device_)) return false;
  return true;
}

void DeviceInfoReply::InternalSwap(DeviceInfoReply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  device_.InternalSwap(&other->device_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeviceInfoReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DmxData::InitAsDefaultInstance() {
}
class DmxData::_Internal {
 public:
  using HasBits = decltype(std::declval<DmxData>()._has_bits_);
  static void set_has_universe(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_priority(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

DmxData::DmxData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ola.proto.DmxData)
}
DmxData::DmxData(const DmxData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_data()) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_data(),
      GetArena());
  }
  ::memcpy(&universe_, &from.universe_,
    static_cast<size_t>(reinterpret_cast<char*>(&priority_) -
    reinterpret_cast<char*>(&universe_)) + sizeof(priority_));
  // @@protoc_insertion_point(copy_constructor:ola.proto.DmxData)
}

void DmxData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DmxData_Ola_2eproto.base);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&universe_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&priority_) -
      reinterpret_cast<char*>(&universe_)) + sizeof(priority_));
}

DmxData::~DmxData() {
  // @@protoc_insertion_point(destructor:ola.proto.DmxData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DmxData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DmxData::ArenaDtor(void* object) {
  DmxData* _this = reinterpret_cast< DmxData* >(object);
  (void)_this;
}
void DmxData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DmxData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DmxData& DmxData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DmxData_Ola_2eproto.base);
  return *internal_default_instance();
}


void DmxData::Clear() {
// @@protoc_insertion_point(message_clear_start:ola.proto.DmxData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    data_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&universe_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&priority_) -
        reinterpret_cast<char*>(&universe_)) + sizeof(priority_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DmxData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 universe = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_universe(&has_bits);
          universe_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bytes data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 priority = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_priority(&has_bits);
          priority_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DmxData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ola.proto.DmxData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 universe = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_universe(), target);
  }

  // required bytes data = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_data(), target);
  }

  // optional int32 priority = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_priority(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ola.proto.DmxData)
  return target;
}

size_t DmxData::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ola.proto.DmxData)
  size_t total_size = 0;

  if (_internal_has_data()) {
    // required bytes data = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  if (_internal_has_universe()) {
    // required int32 universe = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_universe());
  }

  return total_size;
}
size_t DmxData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ola.proto.DmxData)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required bytes data = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());

    // required int32 universe = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_universe());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 priority = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_priority());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DmxData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ola.proto.DmxData)
  GOOGLE_DCHECK_NE(&from, this);
  const DmxData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DmxData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ola.proto.DmxData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ola.proto.DmxData)
    MergeFrom(*source);
  }
}

void DmxData::MergeFrom(const DmxData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ola.proto.DmxData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_data(from._internal_data());
    }
    if (cached_has_bits & 0x00000002u) {
      universe_ = from.universe_;
    }
    if (cached_has_bits & 0x00000004u) {
      priority_ = from.priority_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DmxData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ola.proto.DmxData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DmxData::CopyFrom(const DmxData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ola.proto.DmxData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DmxData::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void DmxData::InternalSwap(DmxData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DmxData, priority_)
      + sizeof(DmxData::priority_)
      - PROTOBUF_FIELD_OFFSET(DmxData, universe_)>(
          reinterpret_cast<char*>(&universe_),
          reinterpret_cast<char*>(&other->universe_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DmxData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RegisterDmxRequest::InitAsDefaultInstance() {
}
class RegisterDmxRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<RegisterDmxRequest>()._has_bits_);
  static void set_has_universe(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_action(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

RegisterDmxRequest::RegisterDmxRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ola.proto.RegisterDmxRequest)
}
RegisterDmxRequest::RegisterDmxRequest(const RegisterDmxRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&universe_, &from.universe_,
    static_cast<size_t>(reinterpret_cast<char*>(&action_) -
    reinterpret_cast<char*>(&universe_)) + sizeof(action_));
  // @@protoc_insertion_point(copy_constructor:ola.proto.RegisterDmxRequest)
}

void RegisterDmxRequest::SharedCtor() {
  universe_ = 0;
  action_ = 1;
}

RegisterDmxRequest::~RegisterDmxRequest() {
  // @@protoc_insertion_point(destructor:ola.proto.RegisterDmxRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RegisterDmxRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RegisterDmxRequest::ArenaDtor(void* object) {
  RegisterDmxRequest* _this = reinterpret_cast< RegisterDmxRequest* >(object);
  (void)_this;
}
void RegisterDmxRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RegisterDmxRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RegisterDmxRequest& RegisterDmxRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RegisterDmxRequest_Ola_2eproto.base);
  return *internal_default_instance();
}


void RegisterDmxRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ola.proto.RegisterDmxRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    universe_ = 0;
    action_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegisterDmxRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 universe = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_universe(&has_bits);
          universe_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .ola.proto.RegisterAction action = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ola::proto::RegisterAction_IsValid(val))) {
            _internal_set_action(static_cast<::ola::proto::RegisterAction>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RegisterDmxRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ola.proto.RegisterDmxRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 universe = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_universe(), target);
  }

  // required .ola.proto.RegisterAction action = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_action(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ola.proto.RegisterDmxRequest)
  return target;
}

size_t RegisterDmxRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ola.proto.RegisterDmxRequest)
  size_t total_size = 0;

  if (_internal_has_universe()) {
    // required int32 universe = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_universe());
  }

  if (_internal_has_action()) {
    // required .ola.proto.RegisterAction action = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_action());
  }

  return total_size;
}
size_t RegisterDmxRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ola.proto.RegisterDmxRequest)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 universe = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_universe());

    // required .ola.proto.RegisterAction action = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_action());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegisterDmxRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ola.proto.RegisterDmxRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RegisterDmxRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RegisterDmxRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ola.proto.RegisterDmxRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ola.proto.RegisterDmxRequest)
    MergeFrom(*source);
  }
}

void RegisterDmxRequest::MergeFrom(const RegisterDmxRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ola.proto.RegisterDmxRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      universe_ = from.universe_;
    }
    if (cached_has_bits & 0x00000002u) {
      action_ = from.action_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RegisterDmxRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ola.proto.RegisterDmxRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterDmxRequest::CopyFrom(const RegisterDmxRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ola.proto.RegisterDmxRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterDmxRequest::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void RegisterDmxRequest::InternalSwap(RegisterDmxRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(universe_, other->universe_);
  swap(action_, other->action_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RegisterDmxRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PatchPortRequest::InitAsDefaultInstance() {
}
class PatchPortRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<PatchPortRequest>()._has_bits_);
  static void set_has_universe(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_device_alias(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_port_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_action(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_is_output(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000001f) ^ 0x0000001f) != 0;
  }
};

PatchPortRequest::PatchPortRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ola.proto.PatchPortRequest)
}
PatchPortRequest::PatchPortRequest(const PatchPortRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&universe_, &from.universe_,
    static_cast<size_t>(reinterpret_cast<char*>(&action_) -
    reinterpret_cast<char*>(&universe_)) + sizeof(action_));
  // @@protoc_insertion_point(copy_constructor:ola.proto.PatchPortRequest)
}

void PatchPortRequest::SharedCtor() {
  ::memset(&universe_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_output_) -
      reinterpret_cast<char*>(&universe_)) + sizeof(is_output_));
  action_ = 1;
}

PatchPortRequest::~PatchPortRequest() {
  // @@protoc_insertion_point(destructor:ola.proto.PatchPortRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PatchPortRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PatchPortRequest::ArenaDtor(void* object) {
  PatchPortRequest* _this = reinterpret_cast< PatchPortRequest* >(object);
  (void)_this;
}
void PatchPortRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PatchPortRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PatchPortRequest& PatchPortRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PatchPortRequest_Ola_2eproto.base);
  return *internal_default_instance();
}


void PatchPortRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ola.proto.PatchPortRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&universe_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_output_) -
        reinterpret_cast<char*>(&universe_)) + sizeof(is_output_));
    action_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PatchPortRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 universe = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_universe(&has_bits);
          universe_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 device_alias = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_device_alias(&has_bits);
          device_alias_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 port_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_port_id(&has_bits);
          port_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .ola.proto.PatchAction action = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ola::proto::PatchAction_IsValid(val))) {
            _internal_set_action(static_cast<::ola::proto::PatchAction>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required bool is_output = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_is_output(&has_bits);
          is_output_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PatchPortRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ola.proto.PatchPortRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 universe = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_universe(), target);
  }

  // required int32 device_alias = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_device_alias(), target);
  }

  // required int32 port_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_port_id(), target);
  }

  // required .ola.proto.PatchAction action = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_action(), target);
  }

  // required bool is_output = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_is_output(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ola.proto.PatchPortRequest)
  return target;
}

size_t PatchPortRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ola.proto.PatchPortRequest)
  size_t total_size = 0;

  if (_internal_has_universe()) {
    // required int32 universe = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_universe());
  }

  if (_internal_has_device_alias()) {
    // required int32 device_alias = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_device_alias());
  }

  if (_internal_has_port_id()) {
    // required int32 port_id = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_port_id());
  }

  if (_internal_has_is_output()) {
    // required bool is_output = 5;
    total_size += 1 + 1;
  }

  if (_internal_has_action()) {
    // required .ola.proto.PatchAction action = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_action());
  }

  return total_size;
}
size_t PatchPortRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ola.proto.PatchPortRequest)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required int32 universe = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_universe());

    // required int32 device_alias = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_device_alias());

    // required int32 port_id = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_port_id());

    // required bool is_output = 5;
    total_size += 1 + 1;

    // required .ola.proto.PatchAction action = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_action());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PatchPortRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ola.proto.PatchPortRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PatchPortRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PatchPortRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ola.proto.PatchPortRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ola.proto.PatchPortRequest)
    MergeFrom(*source);
  }
}

void PatchPortRequest::MergeFrom(const PatchPortRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ola.proto.PatchPortRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      universe_ = from.universe_;
    }
    if (cached_has_bits & 0x00000002u) {
      device_alias_ = from.device_alias_;
    }
    if (cached_has_bits & 0x00000004u) {
      port_id_ = from.port_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      is_output_ = from.is_output_;
    }
    if (cached_has_bits & 0x00000010u) {
      action_ = from.action_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PatchPortRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ola.proto.PatchPortRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PatchPortRequest::CopyFrom(const PatchPortRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ola.proto.PatchPortRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PatchPortRequest::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void PatchPortRequest::InternalSwap(PatchPortRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PatchPortRequest, is_output_)
      + sizeof(PatchPortRequest::is_output_)
      - PROTOBUF_FIELD_OFFSET(PatchPortRequest, universe_)>(
          reinterpret_cast<char*>(&universe_),
          reinterpret_cast<char*>(&other->universe_));
  swap(action_, other->action_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PatchPortRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UniverseNameRequest::InitAsDefaultInstance() {
}
class UniverseNameRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<UniverseNameRequest>()._has_bits_);
  static void set_has_universe(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

UniverseNameRequest::UniverseNameRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ola.proto.UniverseNameRequest)
}
UniverseNameRequest::UniverseNameRequest(const UniverseNameRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  universe_ = from.universe_;
  // @@protoc_insertion_point(copy_constructor:ola.proto.UniverseNameRequest)
}

void UniverseNameRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UniverseNameRequest_Ola_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  universe_ = 0;
}

UniverseNameRequest::~UniverseNameRequest() {
  // @@protoc_insertion_point(destructor:ola.proto.UniverseNameRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UniverseNameRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UniverseNameRequest::ArenaDtor(void* object) {
  UniverseNameRequest* _this = reinterpret_cast< UniverseNameRequest* >(object);
  (void)_this;
}
void UniverseNameRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UniverseNameRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UniverseNameRequest& UniverseNameRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UniverseNameRequest_Ola_2eproto.base);
  return *internal_default_instance();
}


void UniverseNameRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ola.proto.UniverseNameRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmpty();
  }
  universe_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UniverseNameRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 universe = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_universe(&has_bits);
          universe_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ola.proto.UniverseNameRequest.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UniverseNameRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ola.proto.UniverseNameRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 universe = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_universe(), target);
  }

  // required string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ola.proto.UniverseNameRequest.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ola.proto.UniverseNameRequest)
  return target;
}

size_t UniverseNameRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ola.proto.UniverseNameRequest)
  size_t total_size = 0;

  if (_internal_has_name()) {
    // required string name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (_internal_has_universe()) {
    // required int32 universe = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_universe());
  }

  return total_size;
}
size_t UniverseNameRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ola.proto.UniverseNameRequest)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());

    // required int32 universe = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_universe());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UniverseNameRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ola.proto.UniverseNameRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UniverseNameRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UniverseNameRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ola.proto.UniverseNameRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ola.proto.UniverseNameRequest)
    MergeFrom(*source);
  }
}

void UniverseNameRequest::MergeFrom(const UniverseNameRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ola.proto.UniverseNameRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      universe_ = from.universe_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UniverseNameRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ola.proto.UniverseNameRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UniverseNameRequest::CopyFrom(const UniverseNameRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ola.proto.UniverseNameRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UniverseNameRequest::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void UniverseNameRequest::InternalSwap(UniverseNameRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(universe_, other->universe_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UniverseNameRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MergeModeRequest::InitAsDefaultInstance() {
}
class MergeModeRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<MergeModeRequest>()._has_bits_);
  static void set_has_universe(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_merge_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

MergeModeRequest::MergeModeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ola.proto.MergeModeRequest)
}
MergeModeRequest::MergeModeRequest(const MergeModeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&universe_, &from.universe_,
    static_cast<size_t>(reinterpret_cast<char*>(&merge_mode_) -
    reinterpret_cast<char*>(&universe_)) + sizeof(merge_mode_));
  // @@protoc_insertion_point(copy_constructor:ola.proto.MergeModeRequest)
}

void MergeModeRequest::SharedCtor() {
  universe_ = 0;
  merge_mode_ = 1;
}

MergeModeRequest::~MergeModeRequest() {
  // @@protoc_insertion_point(destructor:ola.proto.MergeModeRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MergeModeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MergeModeRequest::ArenaDtor(void* object) {
  MergeModeRequest* _this = reinterpret_cast< MergeModeRequest* >(object);
  (void)_this;
}
void MergeModeRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MergeModeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MergeModeRequest& MergeModeRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MergeModeRequest_Ola_2eproto.base);
  return *internal_default_instance();
}


void MergeModeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ola.proto.MergeModeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    universe_ = 0;
    merge_mode_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MergeModeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 universe = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_universe(&has_bits);
          universe_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .ola.proto.MergeMode merge_mode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ola::proto::MergeMode_IsValid(val))) {
            _internal_set_merge_mode(static_cast<::ola::proto::MergeMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MergeModeRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ola.proto.MergeModeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 universe = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_universe(), target);
  }

  // required .ola.proto.MergeMode merge_mode = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_merge_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ola.proto.MergeModeRequest)
  return target;
}

size_t MergeModeRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ola.proto.MergeModeRequest)
  size_t total_size = 0;

  if (_internal_has_universe()) {
    // required int32 universe = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_universe());
  }

  if (_internal_has_merge_mode()) {
    // required .ola.proto.MergeMode merge_mode = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_merge_mode());
  }

  return total_size;
}
size_t MergeModeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ola.proto.MergeModeRequest)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 universe = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_universe());

    // required .ola.proto.MergeMode merge_mode = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_merge_mode());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MergeModeRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ola.proto.MergeModeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const MergeModeRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MergeModeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ola.proto.MergeModeRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ola.proto.MergeModeRequest)
    MergeFrom(*source);
  }
}

void MergeModeRequest::MergeFrom(const MergeModeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ola.proto.MergeModeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      universe_ = from.universe_;
    }
    if (cached_has_bits & 0x00000002u) {
      merge_mode_ = from.merge_mode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MergeModeRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ola.proto.MergeModeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MergeModeRequest::CopyFrom(const MergeModeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ola.proto.MergeModeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MergeModeRequest::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void MergeModeRequest::InternalSwap(MergeModeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(universe_, other->universe_);
  swap(merge_mode_, other->merge_mode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MergeModeRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OptionalUniverseRequest::InitAsDefaultInstance() {
}
class OptionalUniverseRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<OptionalUniverseRequest>()._has_bits_);
  static void set_has_universe(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

OptionalUniverseRequest::OptionalUniverseRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ola.proto.OptionalUniverseRequest)
}
OptionalUniverseRequest::OptionalUniverseRequest(const OptionalUniverseRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  universe_ = from.universe_;
  // @@protoc_insertion_point(copy_constructor:ola.proto.OptionalUniverseRequest)
}

void OptionalUniverseRequest::SharedCtor() {
  universe_ = 0;
}

OptionalUniverseRequest::~OptionalUniverseRequest() {
  // @@protoc_insertion_point(destructor:ola.proto.OptionalUniverseRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OptionalUniverseRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void OptionalUniverseRequest::ArenaDtor(void* object) {
  OptionalUniverseRequest* _this = reinterpret_cast< OptionalUniverseRequest* >(object);
  (void)_this;
}
void OptionalUniverseRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OptionalUniverseRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OptionalUniverseRequest& OptionalUniverseRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OptionalUniverseRequest_Ola_2eproto.base);
  return *internal_default_instance();
}


void OptionalUniverseRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ola.proto.OptionalUniverseRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  universe_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OptionalUniverseRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 universe = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_universe(&has_bits);
          universe_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OptionalUniverseRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ola.proto.OptionalUniverseRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 universe = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_universe(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ola.proto.OptionalUniverseRequest)
  return target;
}

size_t OptionalUniverseRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ola.proto.OptionalUniverseRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 universe = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_universe());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OptionalUniverseRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ola.proto.OptionalUniverseRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const OptionalUniverseRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OptionalUniverseRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ola.proto.OptionalUniverseRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ola.proto.OptionalUniverseRequest)
    MergeFrom(*source);
  }
}

void OptionalUniverseRequest::MergeFrom(const OptionalUniverseRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ola.proto.OptionalUniverseRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_universe()) {
    _internal_set_universe(from._internal_universe());
  }
}

void OptionalUniverseRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ola.proto.OptionalUniverseRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OptionalUniverseRequest::CopyFrom(const OptionalUniverseRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ola.proto.OptionalUniverseRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OptionalUniverseRequest::IsInitialized() const {
  return true;
}

void OptionalUniverseRequest::InternalSwap(OptionalUniverseRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(universe_, other->universe_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OptionalUniverseRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UniverseInfo::InitAsDefaultInstance() {
}
class UniverseInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<UniverseInfo>()._has_bits_);
  static void set_has_universe(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_merge_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_input_port_count(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_output_port_count(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_rdm_devices(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000003f) ^ 0x0000003f) != 0;
  }
};

UniverseInfo::UniverseInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  input_ports_(arena),
  output_ports_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ola.proto.UniverseInfo)
}
UniverseInfo::UniverseInfo(const UniverseInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      input_ports_(from.input_ports_),
      output_ports_(from.output_ports_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  ::memcpy(&universe_, &from.universe_,
    static_cast<size_t>(reinterpret_cast<char*>(&merge_mode_) -
    reinterpret_cast<char*>(&universe_)) + sizeof(merge_mode_));
  // @@protoc_insertion_point(copy_constructor:ola.proto.UniverseInfo)
}

void UniverseInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UniverseInfo_Ola_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&universe_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rdm_devices_) -
      reinterpret_cast<char*>(&universe_)) + sizeof(rdm_devices_));
  merge_mode_ = 1;
}

UniverseInfo::~UniverseInfo() {
  // @@protoc_insertion_point(destructor:ola.proto.UniverseInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UniverseInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UniverseInfo::ArenaDtor(void* object) {
  UniverseInfo* _this = reinterpret_cast< UniverseInfo* >(object);
  (void)_this;
}
void UniverseInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UniverseInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UniverseInfo& UniverseInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UniverseInfo_Ola_2eproto.base);
  return *internal_default_instance();
}


void UniverseInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ola.proto.UniverseInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  input_ports_.Clear();
  output_ports_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&universe_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&rdm_devices_) -
        reinterpret_cast<char*>(&universe_)) + sizeof(rdm_devices_));
    merge_mode_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UniverseInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 universe = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_universe(&has_bits);
          universe_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ola.proto.UniverseInfo.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .ola.proto.MergeMode merge_mode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ola::proto::MergeMode_IsValid(val))) {
            _internal_set_merge_mode(static_cast<::ola::proto::MergeMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required int32 input_port_count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_input_port_count(&has_bits);
          input_port_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 output_port_count = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_output_port_count(&has_bits);
          output_port_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 rdm_devices = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_rdm_devices(&has_bits);
          rdm_devices_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ola.proto.PortInfo input_ports = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_input_ports(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ola.proto.PortInfo output_ports = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_output_ports(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UniverseInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ola.proto.UniverseInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 universe = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_universe(), target);
  }

  // required string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ola.proto.UniverseInfo.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // required .ola.proto.MergeMode merge_mode = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_merge_mode(), target);
  }

  // required int32 input_port_count = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_input_port_count(), target);
  }

  // required int32 output_port_count = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_output_port_count(), target);
  }

  // required int32 rdm_devices = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_rdm_devices(), target);
  }

  // repeated .ola.proto.PortInfo input_ports = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_input_ports_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_input_ports(i), target, stream);
  }

  // repeated .ola.proto.PortInfo output_ports = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_output_ports_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_output_ports(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ola.proto.UniverseInfo)
  return target;
}

size_t UniverseInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ola.proto.UniverseInfo)
  size_t total_size = 0;

  if (_internal_has_name()) {
    // required string name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (_internal_has_universe()) {
    // required int32 universe = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_universe());
  }

  if (_internal_has_input_port_count()) {
    // required int32 input_port_count = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_input_port_count());
  }

  if (_internal_has_output_port_count()) {
    // required int32 output_port_count = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_output_port_count());
  }

  if (_internal_has_rdm_devices()) {
    // required int32 rdm_devices = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_rdm_devices());
  }

  if (_internal_has_merge_mode()) {
    // required .ola.proto.MergeMode merge_mode = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_merge_mode());
  }

  return total_size;
}
size_t UniverseInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ola.proto.UniverseInfo)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required string name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());

    // required int32 universe = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_universe());

    // required int32 input_port_count = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_input_port_count());

    // required int32 output_port_count = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_output_port_count());

    // required int32 rdm_devices = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_rdm_devices());

    // required .ola.proto.MergeMode merge_mode = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_merge_mode());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ola.proto.PortInfo input_ports = 7;
  total_size += 1UL * this->_internal_input_ports_size();
  for (const auto& msg : this->input_ports_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ola.proto.PortInfo output_ports = 8;
  total_size += 1UL * this->_internal_output_ports_size();
  for (const auto& msg : this->output_ports_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UniverseInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ola.proto.UniverseInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const UniverseInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UniverseInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ola.proto.UniverseInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ola.proto.UniverseInfo)
    MergeFrom(*source);
  }
}

void UniverseInfo::MergeFrom(const UniverseInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ola.proto.UniverseInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  input_ports_.MergeFrom(from.input_ports_);
  output_ports_.MergeFrom(from.output_ports_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      universe_ = from.universe_;
    }
    if (cached_has_bits & 0x00000004u) {
      input_port_count_ = from.input_port_count_;
    }
    if (cached_has_bits & 0x00000008u) {
      output_port_count_ = from.output_port_count_;
    }
    if (cached_has_bits & 0x00000010u) {
      rdm_devices_ = from.rdm_devices_;
    }
    if (cached_has_bits & 0x00000020u) {
      merge_mode_ = from.merge_mode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UniverseInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ola.proto.UniverseInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UniverseInfo::CopyFrom(const UniverseInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ola.proto.UniverseInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UniverseInfo::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(input_ports_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(output_ports_)) return false;
  return true;
}

void UniverseInfo::InternalSwap(UniverseInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  input_ports_.InternalSwap(&other->input_ports_);
  output_ports_.InternalSwap(&other->output_ports_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UniverseInfo, rdm_devices_)
      + sizeof(UniverseInfo::rdm_devices_)
      - PROTOBUF_FIELD_OFFSET(UniverseInfo, universe_)>(
          reinterpret_cast<char*>(&universe_),
          reinterpret_cast<char*>(&other->universe_));
  swap(merge_mode_, other->merge_mode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UniverseInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UniverseInfoReply::InitAsDefaultInstance() {
}
class UniverseInfoReply::_Internal {
 public:
};

UniverseInfoReply::UniverseInfoReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  universe_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ola.proto.UniverseInfoReply)
}
UniverseInfoReply::UniverseInfoReply(const UniverseInfoReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      universe_(from.universe_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ola.proto.UniverseInfoReply)
}

void UniverseInfoReply::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UniverseInfoReply_Ola_2eproto.base);
}

UniverseInfoReply::~UniverseInfoReply() {
  // @@protoc_insertion_point(destructor:ola.proto.UniverseInfoReply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UniverseInfoReply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UniverseInfoReply::ArenaDtor(void* object) {
  UniverseInfoReply* _this = reinterpret_cast< UniverseInfoReply* >(object);
  (void)_this;
}
void UniverseInfoReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UniverseInfoReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UniverseInfoReply& UniverseInfoReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UniverseInfoReply_Ola_2eproto.base);
  return *internal_default_instance();
}


void UniverseInfoReply::Clear() {
// @@protoc_insertion_point(message_clear_start:ola.proto.UniverseInfoReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  universe_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UniverseInfoReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .ola.proto.UniverseInfo universe = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_universe(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UniverseInfoReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ola.proto.UniverseInfoReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ola.proto.UniverseInfo universe = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_universe_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_universe(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ola.proto.UniverseInfoReply)
  return target;
}

size_t UniverseInfoReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ola.proto.UniverseInfoReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ola.proto.UniverseInfo universe = 1;
  total_size += 1UL * this->_internal_universe_size();
  for (const auto& msg : this->universe_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UniverseInfoReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ola.proto.UniverseInfoReply)
  GOOGLE_DCHECK_NE(&from, this);
  const UniverseInfoReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UniverseInfoReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ola.proto.UniverseInfoReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ola.proto.UniverseInfoReply)
    MergeFrom(*source);
  }
}

void UniverseInfoReply::MergeFrom(const UniverseInfoReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ola.proto.UniverseInfoReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  universe_.MergeFrom(from.universe_);
}

void UniverseInfoReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ola.proto.UniverseInfoReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UniverseInfoReply::CopyFrom(const UniverseInfoReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ola.proto.UniverseInfoReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UniverseInfoReply::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(universe_)) return false;
  return true;
}

void UniverseInfoReply::InternalSwap(UniverseInfoReply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  universe_.InternalSwap(&other->universe_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UniverseInfoReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PortPriorityRequest::InitAsDefaultInstance() {
}
class PortPriorityRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<PortPriorityRequest>()._has_bits_);
  static void set_has_device_alias(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_output(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_port_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_priority_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_priority(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

PortPriorityRequest::PortPriorityRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ola.proto.PortPriorityRequest)
}
PortPriorityRequest::PortPriorityRequest(const PortPriorityRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&device_alias_, &from.device_alias_,
    static_cast<size_t>(reinterpret_cast<char*>(&priority_) -
    reinterpret_cast<char*>(&device_alias_)) + sizeof(priority_));
  // @@protoc_insertion_point(copy_constructor:ola.proto.PortPriorityRequest)
}

void PortPriorityRequest::SharedCtor() {
  ::memset(&device_alias_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&priority_) -
      reinterpret_cast<char*>(&device_alias_)) + sizeof(priority_));
}

PortPriorityRequest::~PortPriorityRequest() {
  // @@protoc_insertion_point(destructor:ola.proto.PortPriorityRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PortPriorityRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PortPriorityRequest::ArenaDtor(void* object) {
  PortPriorityRequest* _this = reinterpret_cast< PortPriorityRequest* >(object);
  (void)_this;
}
void PortPriorityRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PortPriorityRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PortPriorityRequest& PortPriorityRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PortPriorityRequest_Ola_2eproto.base);
  return *internal_default_instance();
}


void PortPriorityRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ola.proto.PortPriorityRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&device_alias_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&priority_) -
        reinterpret_cast<char*>(&device_alias_)) + sizeof(priority_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PortPriorityRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 device_alias = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_device_alias(&has_bits);
          device_alias_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool is_output = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_is_output(&has_bits);
          is_output_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 port_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_port_id(&has_bits);
          port_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 priority_mode = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_priority_mode(&has_bits);
          priority_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 priority = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_priority(&has_bits);
          priority_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PortPriorityRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ola.proto.PortPriorityRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 device_alias = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_device_alias(), target);
  }

  // required bool is_output = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_output(), target);
  }

  // required int32 port_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_port_id(), target);
  }

  // required int32 priority_mode = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_priority_mode(), target);
  }

  // optional int32 priority = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_priority(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ola.proto.PortPriorityRequest)
  return target;
}

size_t PortPriorityRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ola.proto.PortPriorityRequest)
  size_t total_size = 0;

  if (_internal_has_device_alias()) {
    // required int32 device_alias = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_device_alias());
  }

  if (_internal_has_is_output()) {
    // required bool is_output = 2;
    total_size += 1 + 1;
  }

  if (_internal_has_port_id()) {
    // required int32 port_id = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_port_id());
  }

  if (_internal_has_priority_mode()) {
    // required int32 priority_mode = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_priority_mode());
  }

  return total_size;
}
size_t PortPriorityRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ola.proto.PortPriorityRequest)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required int32 device_alias = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_device_alias());

    // required bool is_output = 2;
    total_size += 1 + 1;

    // required int32 port_id = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_port_id());

    // required int32 priority_mode = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_priority_mode());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 priority = 5;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000010u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_priority());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PortPriorityRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ola.proto.PortPriorityRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PortPriorityRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PortPriorityRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ola.proto.PortPriorityRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ola.proto.PortPriorityRequest)
    MergeFrom(*source);
  }
}

void PortPriorityRequest::MergeFrom(const PortPriorityRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ola.proto.PortPriorityRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      device_alias_ = from.device_alias_;
    }
    if (cached_has_bits & 0x00000002u) {
      is_output_ = from.is_output_;
    }
    if (cached_has_bits & 0x00000004u) {
      port_id_ = from.port_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      priority_mode_ = from.priority_mode_;
    }
    if (cached_has_bits & 0x00000010u) {
      priority_ = from.priority_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PortPriorityRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ola.proto.PortPriorityRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PortPriorityRequest::CopyFrom(const PortPriorityRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ola.proto.PortPriorityRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PortPriorityRequest::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void PortPriorityRequest::InternalSwap(PortPriorityRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PortPriorityRequest, priority_)
      + sizeof(PortPriorityRequest::priority_)
      - PROTOBUF_FIELD_OFFSET(PortPriorityRequest, device_alias_)>(
          reinterpret_cast<char*>(&device_alias_),
          reinterpret_cast<char*>(&other->device_alias_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PortPriorityRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeviceConfigRequest::InitAsDefaultInstance() {
}
class DeviceConfigRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<DeviceConfigRequest>()._has_bits_);
  static void set_has_device_alias(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

DeviceConfigRequest::DeviceConfigRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ola.proto.DeviceConfigRequest)
}
DeviceConfigRequest::DeviceConfigRequest(const DeviceConfigRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_data()) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_data(),
      GetArena());
  }
  device_alias_ = from.device_alias_;
  // @@protoc_insertion_point(copy_constructor:ola.proto.DeviceConfigRequest)
}

void DeviceConfigRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeviceConfigRequest_Ola_2eproto.base);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_alias_ = 0;
}

DeviceConfigRequest::~DeviceConfigRequest() {
  // @@protoc_insertion_point(destructor:ola.proto.DeviceConfigRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeviceConfigRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeviceConfigRequest::ArenaDtor(void* object) {
  DeviceConfigRequest* _this = reinterpret_cast< DeviceConfigRequest* >(object);
  (void)_this;
}
void DeviceConfigRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeviceConfigRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeviceConfigRequest& DeviceConfigRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeviceConfigRequest_Ola_2eproto.base);
  return *internal_default_instance();
}


void DeviceConfigRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ola.proto.DeviceConfigRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    data_.ClearNonDefaultToEmpty();
  }
  device_alias_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeviceConfigRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 device_alias = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_device_alias(&has_bits);
          device_alias_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bytes data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeviceConfigRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ola.proto.DeviceConfigRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 device_alias = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_device_alias(), target);
  }

  // required bytes data = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ola.proto.DeviceConfigRequest)
  return target;
}

size_t DeviceConfigRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ola.proto.DeviceConfigRequest)
  size_t total_size = 0;

  if (_internal_has_data()) {
    // required bytes data = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  if (_internal_has_device_alias()) {
    // required int32 device_alias = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_device_alias());
  }

  return total_size;
}
size_t DeviceConfigRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ola.proto.DeviceConfigRequest)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required bytes data = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());

    // required int32 device_alias = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_device_alias());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeviceConfigRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ola.proto.DeviceConfigRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeviceConfigRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeviceConfigRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ola.proto.DeviceConfigRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ola.proto.DeviceConfigRequest)
    MergeFrom(*source);
  }
}

void DeviceConfigRequest::MergeFrom(const DeviceConfigRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ola.proto.DeviceConfigRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_data(from._internal_data());
    }
    if (cached_has_bits & 0x00000002u) {
      device_alias_ = from.device_alias_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DeviceConfigRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ola.proto.DeviceConfigRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceConfigRequest::CopyFrom(const DeviceConfigRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ola.proto.DeviceConfigRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceConfigRequest::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void DeviceConfigRequest::InternalSwap(DeviceConfigRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(device_alias_, other->device_alias_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeviceConfigRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeviceConfigReply::InitAsDefaultInstance() {
}
class DeviceConfigReply::_Internal {
 public:
  using HasBits = decltype(std::declval<DeviceConfigReply>()._has_bits_);
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

DeviceConfigReply::DeviceConfigReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ola.proto.DeviceConfigReply)
}
DeviceConfigReply::DeviceConfigReply(const DeviceConfigReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_data()) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_data(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:ola.proto.DeviceConfigReply)
}

void DeviceConfigReply::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeviceConfigReply_Ola_2eproto.base);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DeviceConfigReply::~DeviceConfigReply() {
  // @@protoc_insertion_point(destructor:ola.proto.DeviceConfigReply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeviceConfigReply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeviceConfigReply::ArenaDtor(void* object) {
  DeviceConfigReply* _this = reinterpret_cast< DeviceConfigReply* >(object);
  (void)_this;
}
void DeviceConfigReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeviceConfigReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeviceConfigReply& DeviceConfigReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeviceConfigReply_Ola_2eproto.base);
  return *internal_default_instance();
}


void DeviceConfigReply::Clear() {
// @@protoc_insertion_point(message_clear_start:ola.proto.DeviceConfigReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    data_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeviceConfigReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required bytes data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeviceConfigReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ola.proto.DeviceConfigReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes data = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ola.proto.DeviceConfigReply)
  return target;
}

size_t DeviceConfigReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ola.proto.DeviceConfigReply)
  size_t total_size = 0;

  // required bytes data = 1;
  if (_internal_has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeviceConfigReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ola.proto.DeviceConfigReply)
  GOOGLE_DCHECK_NE(&from, this);
  const DeviceConfigReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeviceConfigReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ola.proto.DeviceConfigReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ola.proto.DeviceConfigReply)
    MergeFrom(*source);
  }
}

void DeviceConfigReply::MergeFrom(const DeviceConfigReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ola.proto.DeviceConfigReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_data()) {
    _internal_set_data(from._internal_data());
  }
}

void DeviceConfigReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ola.proto.DeviceConfigReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceConfigReply::CopyFrom(const DeviceConfigReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ola.proto.DeviceConfigReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceConfigReply::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void DeviceConfigReply::InternalSwap(DeviceConfigReply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata DeviceConfigReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UID::InitAsDefaultInstance() {
}
class UID::_Internal {
 public:
  using HasBits = decltype(std::declval<UID>()._has_bits_);
  static void set_has_esta_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_device_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

UID::UID(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ola.proto.UID)
}
UID::UID(const UID& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&esta_id_, &from.esta_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&device_id_) -
    reinterpret_cast<char*>(&esta_id_)) + sizeof(device_id_));
  // @@protoc_insertion_point(copy_constructor:ola.proto.UID)
}

void UID::SharedCtor() {
  ::memset(&esta_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&device_id_) -
      reinterpret_cast<char*>(&esta_id_)) + sizeof(device_id_));
}

UID::~UID() {
  // @@protoc_insertion_point(destructor:ola.proto.UID)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UID::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UID::ArenaDtor(void* object) {
  UID* _this = reinterpret_cast< UID* >(object);
  (void)_this;
}
void UID::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UID::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UID& UID::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UID_Ola_2eproto.base);
  return *internal_default_instance();
}


void UID::Clear() {
// @@protoc_insertion_point(message_clear_start:ola.proto.UID)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&esta_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&device_id_) -
        reinterpret_cast<char*>(&esta_id_)) + sizeof(device_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UID::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 esta_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_esta_id(&has_bits);
          esta_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required fixed32 device_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_device_id(&has_bits);
          device_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UID::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ola.proto.UID)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 esta_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_esta_id(), target);
  }

  // required fixed32 device_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(2, this->_internal_device_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ola.proto.UID)
  return target;
}

size_t UID::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ola.proto.UID)
  size_t total_size = 0;

  if (_internal_has_esta_id()) {
    // required int32 esta_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_esta_id());
  }

  if (_internal_has_device_id()) {
    // required fixed32 device_id = 2;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t UID::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ola.proto.UID)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 esta_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_esta_id());

    // required fixed32 device_id = 2;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UID::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ola.proto.UID)
  GOOGLE_DCHECK_NE(&from, this);
  const UID* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UID>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ola.proto.UID)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ola.proto.UID)
    MergeFrom(*source);
  }
}

void UID::MergeFrom(const UID& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ola.proto.UID)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      esta_id_ = from.esta_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      device_id_ = from.device_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UID::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ola.proto.UID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UID::CopyFrom(const UID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ola.proto.UID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UID::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void UID::InternalSwap(UID* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UID, device_id_)
      + sizeof(UID::device_id_)
      - PROTOBUF_FIELD_OFFSET(UID, esta_id_)>(
          reinterpret_cast<char*>(&esta_id_),
          reinterpret_cast<char*>(&other->esta_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UID::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UniverseRequest::InitAsDefaultInstance() {
}
class UniverseRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<UniverseRequest>()._has_bits_);
  static void set_has_universe(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

UniverseRequest::UniverseRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ola.proto.UniverseRequest)
}
UniverseRequest::UniverseRequest(const UniverseRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  universe_ = from.universe_;
  // @@protoc_insertion_point(copy_constructor:ola.proto.UniverseRequest)
}

void UniverseRequest::SharedCtor() {
  universe_ = 0;
}

UniverseRequest::~UniverseRequest() {
  // @@protoc_insertion_point(destructor:ola.proto.UniverseRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UniverseRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UniverseRequest::ArenaDtor(void* object) {
  UniverseRequest* _this = reinterpret_cast< UniverseRequest* >(object);
  (void)_this;
}
void UniverseRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UniverseRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UniverseRequest& UniverseRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UniverseRequest_Ola_2eproto.base);
  return *internal_default_instance();
}


void UniverseRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ola.proto.UniverseRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  universe_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UniverseRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 universe = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_universe(&has_bits);
          universe_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UniverseRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ola.proto.UniverseRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 universe = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_universe(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ola.proto.UniverseRequest)
  return target;
}

size_t UniverseRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ola.proto.UniverseRequest)
  size_t total_size = 0;

  // required int32 universe = 1;
  if (_internal_has_universe()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_universe());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UniverseRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ola.proto.UniverseRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UniverseRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UniverseRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ola.proto.UniverseRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ola.proto.UniverseRequest)
    MergeFrom(*source);
  }
}

void UniverseRequest::MergeFrom(const UniverseRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ola.proto.UniverseRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_universe()) {
    _internal_set_universe(from._internal_universe());
  }
}

void UniverseRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ola.proto.UniverseRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UniverseRequest::CopyFrom(const UniverseRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ola.proto.UniverseRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UniverseRequest::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void UniverseRequest::InternalSwap(UniverseRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(universe_, other->universe_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UniverseRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DiscoveryRequest::InitAsDefaultInstance() {
}
class DiscoveryRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<DiscoveryRequest>()._has_bits_);
  static void set_has_universe(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_full(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

DiscoveryRequest::DiscoveryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ola.proto.DiscoveryRequest)
}
DiscoveryRequest::DiscoveryRequest(const DiscoveryRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&universe_, &from.universe_,
    static_cast<size_t>(reinterpret_cast<char*>(&full_) -
    reinterpret_cast<char*>(&universe_)) + sizeof(full_));
  // @@protoc_insertion_point(copy_constructor:ola.proto.DiscoveryRequest)
}

void DiscoveryRequest::SharedCtor() {
  ::memset(&universe_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&full_) -
      reinterpret_cast<char*>(&universe_)) + sizeof(full_));
}

DiscoveryRequest::~DiscoveryRequest() {
  // @@protoc_insertion_point(destructor:ola.proto.DiscoveryRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DiscoveryRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DiscoveryRequest::ArenaDtor(void* object) {
  DiscoveryRequest* _this = reinterpret_cast< DiscoveryRequest* >(object);
  (void)_this;
}
void DiscoveryRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DiscoveryRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DiscoveryRequest& DiscoveryRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DiscoveryRequest_Ola_2eproto.base);
  return *internal_default_instance();
}


void DiscoveryRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ola.proto.DiscoveryRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&universe_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&full_) -
        reinterpret_cast<char*>(&universe_)) + sizeof(full_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DiscoveryRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 universe = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_universe(&has_bits);
          universe_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool full = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_full(&has_bits);
          full_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DiscoveryRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ola.proto.DiscoveryRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 universe = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_universe(), target);
  }

  // required bool full = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_full(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ola.proto.DiscoveryRequest)
  return target;
}

size_t DiscoveryRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ola.proto.DiscoveryRequest)
  size_t total_size = 0;

  if (_internal_has_universe()) {
    // required int32 universe = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_universe());
  }

  if (_internal_has_full()) {
    // required bool full = 2;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t DiscoveryRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ola.proto.DiscoveryRequest)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 universe = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_universe());

    // required bool full = 2;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DiscoveryRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ola.proto.DiscoveryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DiscoveryRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DiscoveryRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ola.proto.DiscoveryRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ola.proto.DiscoveryRequest)
    MergeFrom(*source);
  }
}

void DiscoveryRequest::MergeFrom(const DiscoveryRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ola.proto.DiscoveryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      universe_ = from.universe_;
    }
    if (cached_has_bits & 0x00000002u) {
      full_ = from.full_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DiscoveryRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ola.proto.DiscoveryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DiscoveryRequest::CopyFrom(const DiscoveryRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ola.proto.DiscoveryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DiscoveryRequest::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void DiscoveryRequest::InternalSwap(DiscoveryRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DiscoveryRequest, full_)
      + sizeof(DiscoveryRequest::full_)
      - PROTOBUF_FIELD_OFFSET(DiscoveryRequest, universe_)>(
          reinterpret_cast<char*>(&universe_),
          reinterpret_cast<char*>(&other->universe_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DiscoveryRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UIDListReply::InitAsDefaultInstance() {
}
class UIDListReply::_Internal {
 public:
  using HasBits = decltype(std::declval<UIDListReply>()._has_bits_);
  static void set_has_universe(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

UIDListReply::UIDListReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  uid_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ola.proto.UIDListReply)
}
UIDListReply::UIDListReply(const UIDListReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      uid_(from.uid_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  universe_ = from.universe_;
  // @@protoc_insertion_point(copy_constructor:ola.proto.UIDListReply)
}

void UIDListReply::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UIDListReply_Ola_2eproto.base);
  universe_ = 0;
}

UIDListReply::~UIDListReply() {
  // @@protoc_insertion_point(destructor:ola.proto.UIDListReply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UIDListReply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UIDListReply::ArenaDtor(void* object) {
  UIDListReply* _this = reinterpret_cast< UIDListReply* >(object);
  (void)_this;
}
void UIDListReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UIDListReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UIDListReply& UIDListReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UIDListReply_Ola_2eproto.base);
  return *internal_default_instance();
}


void UIDListReply::Clear() {
// @@protoc_insertion_point(message_clear_start:ola.proto.UIDListReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uid_.Clear();
  universe_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UIDListReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 universe = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_universe(&has_bits);
          universe_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ola.proto.UID uid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_uid(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UIDListReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ola.proto.UIDListReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 universe = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_universe(), target);
  }

  // repeated .ola.proto.UID uid = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_uid_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_uid(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ola.proto.UIDListReply)
  return target;
}

size_t UIDListReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ola.proto.UIDListReply)
  size_t total_size = 0;

  // required int32 universe = 1;
  if (_internal_has_universe()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_universe());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ola.proto.UID uid = 2;
  total_size += 1UL * this->_internal_uid_size();
  for (const auto& msg : this->uid_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UIDListReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ola.proto.UIDListReply)
  GOOGLE_DCHECK_NE(&from, this);
  const UIDListReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UIDListReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ola.proto.UIDListReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ola.proto.UIDListReply)
    MergeFrom(*source);
  }
}

void UIDListReply::MergeFrom(const UIDListReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ola.proto.UIDListReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  uid_.MergeFrom(from.uid_);
  if (from._internal_has_universe()) {
    _internal_set_universe(from._internal_universe());
  }
}

void UIDListReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ola.proto.UIDListReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UIDListReply::CopyFrom(const UIDListReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ola.proto.UIDListReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UIDListReply::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(uid_)) return false;
  return true;
}

void UIDListReply::InternalSwap(UIDListReply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  uid_.InternalSwap(&other->uid_);
  swap(universe_, other->universe_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UIDListReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RDMRequestOverrideOptions::InitAsDefaultInstance() {
}
class RDMRequestOverrideOptions::_Internal {
 public:
  using HasBits = decltype(std::declval<RDMRequestOverrideOptions>()._has_bits_);
  static void set_has_sub_start_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_message_length(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_message_count(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_checksum(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

RDMRequestOverrideOptions::RDMRequestOverrideOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ola.proto.RDMRequestOverrideOptions)
}
RDMRequestOverrideOptions::RDMRequestOverrideOptions(const RDMRequestOverrideOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&sub_start_code_, &from.sub_start_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&checksum_) -
    reinterpret_cast<char*>(&sub_start_code_)) + sizeof(checksum_));
  // @@protoc_insertion_point(copy_constructor:ola.proto.RDMRequestOverrideOptions)
}

void RDMRequestOverrideOptions::SharedCtor() {
  ::memset(&sub_start_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&checksum_) -
      reinterpret_cast<char*>(&sub_start_code_)) + sizeof(checksum_));
}

RDMRequestOverrideOptions::~RDMRequestOverrideOptions() {
  // @@protoc_insertion_point(destructor:ola.proto.RDMRequestOverrideOptions)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RDMRequestOverrideOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RDMRequestOverrideOptions::ArenaDtor(void* object) {
  RDMRequestOverrideOptions* _this = reinterpret_cast< RDMRequestOverrideOptions* >(object);
  (void)_this;
}
void RDMRequestOverrideOptions::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RDMRequestOverrideOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RDMRequestOverrideOptions& RDMRequestOverrideOptions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RDMRequestOverrideOptions_Ola_2eproto.base);
  return *internal_default_instance();
}


void RDMRequestOverrideOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:ola.proto.RDMRequestOverrideOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&sub_start_code_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&checksum_) -
        reinterpret_cast<char*>(&sub_start_code_)) + sizeof(checksum_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RDMRequestOverrideOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 sub_start_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_sub_start_code(&has_bits);
          sub_start_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 message_length = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_message_length(&has_bits);
          message_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 message_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_message_count(&has_bits);
          message_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 checksum = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_checksum(&has_bits);
          checksum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RDMRequestOverrideOptions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ola.proto.RDMRequestOverrideOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 sub_start_code = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_sub_start_code(), target);
  }

  // optional uint32 message_length = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_message_length(), target);
  }

  // optional uint32 message_count = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_message_count(), target);
  }

  // optional uint32 checksum = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_checksum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ola.proto.RDMRequestOverrideOptions)
  return target;
}

size_t RDMRequestOverrideOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ola.proto.RDMRequestOverrideOptions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 sub_start_code = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_sub_start_code());
    }

    // optional uint32 message_length = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_message_length());
    }

    // optional uint32 message_count = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_message_count());
    }

    // optional uint32 checksum = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_checksum());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RDMRequestOverrideOptions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ola.proto.RDMRequestOverrideOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const RDMRequestOverrideOptions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RDMRequestOverrideOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ola.proto.RDMRequestOverrideOptions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ola.proto.RDMRequestOverrideOptions)
    MergeFrom(*source);
  }
}

void RDMRequestOverrideOptions::MergeFrom(const RDMRequestOverrideOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ola.proto.RDMRequestOverrideOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      sub_start_code_ = from.sub_start_code_;
    }
    if (cached_has_bits & 0x00000002u) {
      message_length_ = from.message_length_;
    }
    if (cached_has_bits & 0x00000004u) {
      message_count_ = from.message_count_;
    }
    if (cached_has_bits & 0x00000008u) {
      checksum_ = from.checksum_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RDMRequestOverrideOptions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ola.proto.RDMRequestOverrideOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RDMRequestOverrideOptions::CopyFrom(const RDMRequestOverrideOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ola.proto.RDMRequestOverrideOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RDMRequestOverrideOptions::IsInitialized() const {
  return true;
}

void RDMRequestOverrideOptions::InternalSwap(RDMRequestOverrideOptions* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RDMRequestOverrideOptions, checksum_)
      + sizeof(RDMRequestOverrideOptions::checksum_)
      - PROTOBUF_FIELD_OFFSET(RDMRequestOverrideOptions, sub_start_code_)>(
          reinterpret_cast<char*>(&sub_start_code_),
          reinterpret_cast<char*>(&other->sub_start_code_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RDMRequestOverrideOptions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RDMRequest::InitAsDefaultInstance() {
  ::ola::proto::_RDMRequest_default_instance_._instance.get_mutable()->uid_ = const_cast< ::ola::proto::UID*>(
      ::ola::proto::UID::internal_default_instance());
  ::ola::proto::_RDMRequest_default_instance_._instance.get_mutable()->options_ = const_cast< ::ola::proto::RDMRequestOverrideOptions*>(
      ::ola::proto::RDMRequestOverrideOptions::internal_default_instance());
}
class RDMRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<RDMRequest>()._has_bits_);
  static void set_has_universe(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::ola::proto::UID& uid(const RDMRequest* msg);
  static void set_has_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_sub_device(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_param_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_set(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_include_raw_response(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::ola::proto::RDMRequestOverrideOptions& options(const RDMRequest* msg);
  static void set_has_options(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000007b) ^ 0x0000007b) != 0;
  }
};

const ::ola::proto::UID&
RDMRequest::_Internal::uid(const RDMRequest* msg) {
  return *msg->uid_;
}
const ::ola::proto::RDMRequestOverrideOptions&
RDMRequest::_Internal::options(const RDMRequest* msg) {
  return *msg->options_;
}
RDMRequest::RDMRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ola.proto.RDMRequest)
}
RDMRequest::RDMRequest(const RDMRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_data()) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_data(),
      GetArena());
  }
  if (from._internal_has_uid()) {
    uid_ = new ::ola::proto::UID(*from.uid_);
  } else {
    uid_ = nullptr;
  }
  if (from._internal_has_options()) {
    options_ = new ::ola::proto::RDMRequestOverrideOptions(*from.options_);
  } else {
    options_ = nullptr;
  }
  ::memcpy(&universe_, &from.universe_,
    static_cast<size_t>(reinterpret_cast<char*>(&include_raw_response_) -
    reinterpret_cast<char*>(&universe_)) + sizeof(include_raw_response_));
  // @@protoc_insertion_point(copy_constructor:ola.proto.RDMRequest)
}

void RDMRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RDMRequest_Ola_2eproto.base);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&include_raw_response_) -
      reinterpret_cast<char*>(&uid_)) + sizeof(include_raw_response_));
}

RDMRequest::~RDMRequest() {
  // @@protoc_insertion_point(destructor:ola.proto.RDMRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RDMRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete uid_;
  if (this != internal_default_instance()) delete options_;
}

void RDMRequest::ArenaDtor(void* object) {
  RDMRequest* _this = reinterpret_cast< RDMRequest* >(object);
  (void)_this;
}
void RDMRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RDMRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RDMRequest& RDMRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RDMRequest_Ola_2eproto.base);
  return *internal_default_instance();
}


void RDMRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ola.proto.RDMRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      data_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(uid_ != nullptr);
      uid_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(options_ != nullptr);
      options_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&universe_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&include_raw_response_) -
        reinterpret_cast<char*>(&universe_)) + sizeof(include_raw_response_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RDMRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 universe = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_universe(&has_bits);
          universe_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .ola.proto.UID uid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_uid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 sub_device = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_sub_device(&has_bits);
          sub_device_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 param_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_param_id(&has_bits);
          param_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bytes data = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool is_set = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_is_set(&has_bits);
          is_set_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool include_raw_response = 7 [default = false];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_include_raw_response(&has_bits);
          include_raw_response_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ola.proto.RDMRequestOverrideOptions options = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RDMRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ola.proto.RDMRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 universe = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_universe(), target);
  }

  // required .ola.proto.UID uid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::uid(this), target, stream);
  }

  // required int32 sub_device = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_sub_device(), target);
  }

  // required int32 param_id = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_param_id(), target);
  }

  // required bytes data = 5;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_data(), target);
  }

  // required bool is_set = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_is_set(), target);
  }

  // optional bool include_raw_response = 7 [default = false];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_include_raw_response(), target);
  }

  // optional .ola.proto.RDMRequestOverrideOptions options = 8;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::options(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ola.proto.RDMRequest)
  return target;
}

size_t RDMRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ola.proto.RDMRequest)
  size_t total_size = 0;

  if (_internal_has_data()) {
    // required bytes data = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  if (_internal_has_uid()) {
    // required .ola.proto.UID uid = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *uid_);
  }

  if (_internal_has_universe()) {
    // required int32 universe = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_universe());
  }

  if (_internal_has_sub_device()) {
    // required int32 sub_device = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sub_device());
  }

  if (_internal_has_param_id()) {
    // required int32 param_id = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_param_id());
  }

  if (_internal_has_is_set()) {
    // required bool is_set = 6;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t RDMRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ola.proto.RDMRequest)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000007b) ^ 0x0000007b) == 0) {  // All required fields are present.
    // required bytes data = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());

    // required .ola.proto.UID uid = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *uid_);

    // required int32 universe = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_universe());

    // required int32 sub_device = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sub_device());

    // required int32 param_id = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_param_id());

    // required bool is_set = 6;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .ola.proto.RDMRequestOverrideOptions options = 8;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *options_);
  }

  // optional bool include_raw_response = 7 [default = false];
  if (cached_has_bits & 0x00000080u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RDMRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ola.proto.RDMRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RDMRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RDMRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ola.proto.RDMRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ola.proto.RDMRequest)
    MergeFrom(*source);
  }
}

void RDMRequest::MergeFrom(const RDMRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ola.proto.RDMRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_data(from._internal_data());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_uid()->::ola::proto::UID::MergeFrom(from._internal_uid());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_options()->::ola::proto::RDMRequestOverrideOptions::MergeFrom(from._internal_options());
    }
    if (cached_has_bits & 0x00000008u) {
      universe_ = from.universe_;
    }
    if (cached_has_bits & 0x00000010u) {
      sub_device_ = from.sub_device_;
    }
    if (cached_has_bits & 0x00000020u) {
      param_id_ = from.param_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      is_set_ = from.is_set_;
    }
    if (cached_has_bits & 0x00000080u) {
      include_raw_response_ = from.include_raw_response_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RDMRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ola.proto.RDMRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RDMRequest::CopyFrom(const RDMRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ola.proto.RDMRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RDMRequest::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_uid()) {
    if (!uid_->IsInitialized()) return false;
  }
  return true;
}

void RDMRequest::InternalSwap(RDMRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RDMRequest, include_raw_response_)
      + sizeof(RDMRequest::include_raw_response_)
      - PROTOBUF_FIELD_OFFSET(RDMRequest, uid_)>(
          reinterpret_cast<char*>(&uid_),
          reinterpret_cast<char*>(&other->uid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RDMRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RDMDiscoveryRequest::InitAsDefaultInstance() {
  ::ola::proto::_RDMDiscoveryRequest_default_instance_._instance.get_mutable()->uid_ = const_cast< ::ola::proto::UID*>(
      ::ola::proto::UID::internal_default_instance());
  ::ola::proto::_RDMDiscoveryRequest_default_instance_._instance.get_mutable()->options_ = const_cast< ::ola::proto::RDMRequestOverrideOptions*>(
      ::ola::proto::RDMRequestOverrideOptions::internal_default_instance());
}
class RDMDiscoveryRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<RDMDiscoveryRequest>()._has_bits_);
  static void set_has_universe(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::ola::proto::UID& uid(const RDMDiscoveryRequest* msg);
  static void set_has_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_sub_device(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_param_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_include_raw_response(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::ola::proto::RDMRequestOverrideOptions& options(const RDMDiscoveryRequest* msg);
  static void set_has_options(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000003b) ^ 0x0000003b) != 0;
  }
};

const ::ola::proto::UID&
RDMDiscoveryRequest::_Internal::uid(const RDMDiscoveryRequest* msg) {
  return *msg->uid_;
}
const ::ola::proto::RDMRequestOverrideOptions&
RDMDiscoveryRequest::_Internal::options(const RDMDiscoveryRequest* msg) {
  return *msg->options_;
}
RDMDiscoveryRequest::RDMDiscoveryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ola.proto.RDMDiscoveryRequest)
}
RDMDiscoveryRequest::RDMDiscoveryRequest(const RDMDiscoveryRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_data()) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_data(),
      GetArena());
  }
  if (from._internal_has_uid()) {
    uid_ = new ::ola::proto::UID(*from.uid_);
  } else {
    uid_ = nullptr;
  }
  if (from._internal_has_options()) {
    options_ = new ::ola::proto::RDMRequestOverrideOptions(*from.options_);
  } else {
    options_ = nullptr;
  }
  ::memcpy(&universe_, &from.universe_,
    static_cast<size_t>(reinterpret_cast<char*>(&include_raw_response_) -
    reinterpret_cast<char*>(&universe_)) + sizeof(include_raw_response_));
  // @@protoc_insertion_point(copy_constructor:ola.proto.RDMDiscoveryRequest)
}

void RDMDiscoveryRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RDMDiscoveryRequest_Ola_2eproto.base);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&include_raw_response_) -
      reinterpret_cast<char*>(&uid_)) + sizeof(include_raw_response_));
}

RDMDiscoveryRequest::~RDMDiscoveryRequest() {
  // @@protoc_insertion_point(destructor:ola.proto.RDMDiscoveryRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RDMDiscoveryRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete uid_;
  if (this != internal_default_instance()) delete options_;
}

void RDMDiscoveryRequest::ArenaDtor(void* object) {
  RDMDiscoveryRequest* _this = reinterpret_cast< RDMDiscoveryRequest* >(object);
  (void)_this;
}
void RDMDiscoveryRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RDMDiscoveryRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RDMDiscoveryRequest& RDMDiscoveryRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RDMDiscoveryRequest_Ola_2eproto.base);
  return *internal_default_instance();
}


void RDMDiscoveryRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ola.proto.RDMDiscoveryRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      data_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(uid_ != nullptr);
      uid_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(options_ != nullptr);
      options_->Clear();
    }
  }
  if (cached_has_bits & 0x00000078u) {
    ::memset(&universe_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&include_raw_response_) -
        reinterpret_cast<char*>(&universe_)) + sizeof(include_raw_response_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RDMDiscoveryRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 universe = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_universe(&has_bits);
          universe_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .ola.proto.UID uid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_uid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 sub_device = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_sub_device(&has_bits);
          sub_device_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 param_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_param_id(&has_bits);
          param_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bytes data = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool include_raw_response = 6 [default = false];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_include_raw_response(&has_bits);
          include_raw_response_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ola.proto.RDMRequestOverrideOptions options = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RDMDiscoveryRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ola.proto.RDMDiscoveryRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 universe = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_universe(), target);
  }

  // required .ola.proto.UID uid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::uid(this), target, stream);
  }

  // required int32 sub_device = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_sub_device(), target);
  }

  // required int32 param_id = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_param_id(), target);
  }

  // required bytes data = 5;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_data(), target);
  }

  // optional bool include_raw_response = 6 [default = false];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_include_raw_response(), target);
  }

  // optional .ola.proto.RDMRequestOverrideOptions options = 8;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::options(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ola.proto.RDMDiscoveryRequest)
  return target;
}

size_t RDMDiscoveryRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ola.proto.RDMDiscoveryRequest)
  size_t total_size = 0;

  if (_internal_has_data()) {
    // required bytes data = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  if (_internal_has_uid()) {
    // required .ola.proto.UID uid = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *uid_);
  }

  if (_internal_has_universe()) {
    // required int32 universe = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_universe());
  }

  if (_internal_has_sub_device()) {
    // required int32 sub_device = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sub_device());
  }

  if (_internal_has_param_id()) {
    // required int32 param_id = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_param_id());
  }

  return total_size;
}
size_t RDMDiscoveryRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ola.proto.RDMDiscoveryRequest)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000003b) ^ 0x0000003b) == 0) {  // All required fields are present.
    // required bytes data = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());

    // required .ola.proto.UID uid = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *uid_);

    // required int32 universe = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_universe());

    // required int32 sub_device = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sub_device());

    // required int32 param_id = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_param_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .ola.proto.RDMRequestOverrideOptions options = 8;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *options_);
  }

  // optional bool include_raw_response = 6 [default = false];
  if (cached_has_bits & 0x00000040u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RDMDiscoveryRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ola.proto.RDMDiscoveryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RDMDiscoveryRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RDMDiscoveryRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ola.proto.RDMDiscoveryRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ola.proto.RDMDiscoveryRequest)
    MergeFrom(*source);
  }
}

void RDMDiscoveryRequest::MergeFrom(const RDMDiscoveryRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ola.proto.RDMDiscoveryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_data(from._internal_data());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_uid()->::ola::proto::UID::MergeFrom(from._internal_uid());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_options()->::ola::proto::RDMRequestOverrideOptions::MergeFrom(from._internal_options());
    }
    if (cached_has_bits & 0x00000008u) {
      universe_ = from.universe_;
    }
    if (cached_has_bits & 0x00000010u) {
      sub_device_ = from.sub_device_;
    }
    if (cached_has_bits & 0x00000020u) {
      param_id_ = from.param_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      include_raw_response_ = from.include_raw_response_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RDMDiscoveryRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ola.proto.RDMDiscoveryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RDMDiscoveryRequest::CopyFrom(const RDMDiscoveryRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ola.proto.RDMDiscoveryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RDMDiscoveryRequest::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_uid()) {
    if (!uid_->IsInitialized()) return false;
  }
  return true;
}

void RDMDiscoveryRequest::InternalSwap(RDMDiscoveryRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RDMDiscoveryRequest, include_raw_response_)
      + sizeof(RDMDiscoveryRequest::include_raw_response_)
      - PROTOBUF_FIELD_OFFSET(RDMDiscoveryRequest, uid_)>(
          reinterpret_cast<char*>(&uid_),
          reinterpret_cast<char*>(&other->uid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RDMDiscoveryRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RDMFrameTiming::InitAsDefaultInstance() {
}
class RDMFrameTiming::_Internal {
 public:
  using HasBits = decltype(std::declval<RDMFrameTiming>()._has_bits_);
  static void set_has_response_delay(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_break_time(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_mark_time(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_data_time(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

RDMFrameTiming::RDMFrameTiming(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ola.proto.RDMFrameTiming)
}
RDMFrameTiming::RDMFrameTiming(const RDMFrameTiming& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&response_delay_, &from.response_delay_,
    static_cast<size_t>(reinterpret_cast<char*>(&data_time_) -
    reinterpret_cast<char*>(&response_delay_)) + sizeof(data_time_));
  // @@protoc_insertion_point(copy_constructor:ola.proto.RDMFrameTiming)
}

void RDMFrameTiming::SharedCtor() {
  ::memset(&response_delay_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&data_time_) -
      reinterpret_cast<char*>(&response_delay_)) + sizeof(data_time_));
}

RDMFrameTiming::~RDMFrameTiming() {
  // @@protoc_insertion_point(destructor:ola.proto.RDMFrameTiming)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RDMFrameTiming::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RDMFrameTiming::ArenaDtor(void* object) {
  RDMFrameTiming* _this = reinterpret_cast< RDMFrameTiming* >(object);
  (void)_this;
}
void RDMFrameTiming::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RDMFrameTiming::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RDMFrameTiming& RDMFrameTiming::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RDMFrameTiming_Ola_2eproto.base);
  return *internal_default_instance();
}


void RDMFrameTiming::Clear() {
// @@protoc_insertion_point(message_clear_start:ola.proto.RDMFrameTiming)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&response_delay_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&data_time_) -
        reinterpret_cast<char*>(&response_delay_)) + sizeof(data_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RDMFrameTiming::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 response_delay = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_response_delay(&has_bits);
          response_delay_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 break_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_break_time(&has_bits);
          break_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 mark_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_mark_time(&has_bits);
          mark_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 data_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_data_time(&has_bits);
          data_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RDMFrameTiming::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ola.proto.RDMFrameTiming)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 response_delay = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_response_delay(), target);
  }

  // optional int32 break_time = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_break_time(), target);
  }

  // optional int32 mark_time = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_mark_time(), target);
  }

  // optional int32 data_time = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_data_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ola.proto.RDMFrameTiming)
  return target;
}

size_t RDMFrameTiming::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ola.proto.RDMFrameTiming)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional int32 response_delay = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_response_delay());
    }

    // optional int32 break_time = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_break_time());
    }

    // optional int32 mark_time = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_mark_time());
    }

    // optional int32 data_time = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_data_time());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RDMFrameTiming::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ola.proto.RDMFrameTiming)
  GOOGLE_DCHECK_NE(&from, this);
  const RDMFrameTiming* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RDMFrameTiming>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ola.proto.RDMFrameTiming)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ola.proto.RDMFrameTiming)
    MergeFrom(*source);
  }
}

void RDMFrameTiming::MergeFrom(const RDMFrameTiming& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ola.proto.RDMFrameTiming)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      response_delay_ = from.response_delay_;
    }
    if (cached_has_bits & 0x00000002u) {
      break_time_ = from.break_time_;
    }
    if (cached_has_bits & 0x00000004u) {
      mark_time_ = from.mark_time_;
    }
    if (cached_has_bits & 0x00000008u) {
      data_time_ = from.data_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RDMFrameTiming::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ola.proto.RDMFrameTiming)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RDMFrameTiming::CopyFrom(const RDMFrameTiming& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ola.proto.RDMFrameTiming)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RDMFrameTiming::IsInitialized() const {
  return true;
}

void RDMFrameTiming::InternalSwap(RDMFrameTiming* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RDMFrameTiming, data_time_)
      + sizeof(RDMFrameTiming::data_time_)
      - PROTOBUF_FIELD_OFFSET(RDMFrameTiming, response_delay_)>(
          reinterpret_cast<char*>(&response_delay_),
          reinterpret_cast<char*>(&other->response_delay_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RDMFrameTiming::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RDMFrame::InitAsDefaultInstance() {
  ::ola::proto::_RDMFrame_default_instance_._instance.get_mutable()->timing_ = const_cast< ::ola::proto::RDMFrameTiming*>(
      ::ola::proto::RDMFrameTiming::internal_default_instance());
}
class RDMFrame::_Internal {
 public:
  using HasBits = decltype(std::declval<RDMFrame>()._has_bits_);
  static void set_has_raw_response(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ola::proto::RDMFrameTiming& timing(const RDMFrame* msg);
  static void set_has_timing(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::ola::proto::RDMFrameTiming&
RDMFrame::_Internal::timing(const RDMFrame* msg) {
  return *msg->timing_;
}
RDMFrame::RDMFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ola.proto.RDMFrame)
}
RDMFrame::RDMFrame(const RDMFrame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  raw_response_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_raw_response()) {
    raw_response_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_raw_response(),
      GetArena());
  }
  if (from._internal_has_timing()) {
    timing_ = new ::ola::proto::RDMFrameTiming(*from.timing_);
  } else {
    timing_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ola.proto.RDMFrame)
}

void RDMFrame::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RDMFrame_Ola_2eproto.base);
  raw_response_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  timing_ = nullptr;
}

RDMFrame::~RDMFrame() {
  // @@protoc_insertion_point(destructor:ola.proto.RDMFrame)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RDMFrame::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  raw_response_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete timing_;
}

void RDMFrame::ArenaDtor(void* object) {
  RDMFrame* _this = reinterpret_cast< RDMFrame* >(object);
  (void)_this;
}
void RDMFrame::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RDMFrame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RDMFrame& RDMFrame::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RDMFrame_Ola_2eproto.base);
  return *internal_default_instance();
}


void RDMFrame::Clear() {
// @@protoc_insertion_point(message_clear_start:ola.proto.RDMFrame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      raw_response_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(timing_ != nullptr);
      timing_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RDMFrame::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bytes raw_response = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_raw_response();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ola.proto.RDMFrameTiming timing = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_timing(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RDMFrame::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ola.proto.RDMFrame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes raw_response = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_raw_response(), target);
  }

  // optional .ola.proto.RDMFrameTiming timing = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::timing(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ola.proto.RDMFrame)
  return target;
}

size_t RDMFrame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ola.proto.RDMFrame)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes raw_response = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_raw_response());
    }

    // optional .ola.proto.RDMFrameTiming timing = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *timing_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RDMFrame::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ola.proto.RDMFrame)
  GOOGLE_DCHECK_NE(&from, this);
  const RDMFrame* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RDMFrame>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ola.proto.RDMFrame)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ola.proto.RDMFrame)
    MergeFrom(*source);
  }
}

void RDMFrame::MergeFrom(const RDMFrame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ola.proto.RDMFrame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_raw_response(from._internal_raw_response());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_timing()->::ola::proto::RDMFrameTiming::MergeFrom(from._internal_timing());
    }
  }
}

void RDMFrame::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ola.proto.RDMFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RDMFrame::CopyFrom(const RDMFrame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ola.proto.RDMFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RDMFrame::IsInitialized() const {
  return true;
}

void RDMFrame::InternalSwap(RDMFrame* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  raw_response_.Swap(&other->raw_response_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(timing_, other->timing_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RDMFrame::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RDMResponse::InitAsDefaultInstance() {
  ::ola::proto::_RDMResponse_default_instance_._instance.get_mutable()->source_uid_ = const_cast< ::ola::proto::UID*>(
      ::ola::proto::UID::internal_default_instance());
  ::ola::proto::_RDMResponse_default_instance_._instance.get_mutable()->dest_uid_ = const_cast< ::ola::proto::UID*>(
      ::ola::proto::UID::internal_default_instance());
}
class RDMResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<RDMResponse>()._has_bits_);
  static void set_has_response_code(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::ola::proto::UID& source_uid(const RDMResponse* msg);
  static void set_has_source_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::ola::proto::UID& dest_uid(const RDMResponse* msg);
  static void set_has_dest_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_transaction_number(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_response_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_message_count(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_sub_device(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_command_class(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_param_id(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000008) ^ 0x00000008) != 0;
  }
};

const ::ola::proto::UID&
RDMResponse::_Internal::source_uid(const RDMResponse* msg) {
  return *msg->source_uid_;
}
const ::ola::proto::UID&
RDMResponse::_Internal::dest_uid(const RDMResponse* msg) {
  return *msg->dest_uid_;
}
RDMResponse::RDMResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  raw_response_(arena),
  raw_frame_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ola.proto.RDMResponse)
}
RDMResponse::RDMResponse(const RDMResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      raw_response_(from.raw_response_),
      raw_frame_(from.raw_frame_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_data()) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_data(),
      GetArena());
  }
  if (from._internal_has_source_uid()) {
    source_uid_ = new ::ola::proto::UID(*from.source_uid_);
  } else {
    source_uid_ = nullptr;
  }
  if (from._internal_has_dest_uid()) {
    dest_uid_ = new ::ola::proto::UID(*from.dest_uid_);
  } else {
    dest_uid_ = nullptr;
  }
  ::memcpy(&response_code_, &from.response_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&transaction_number_) -
    reinterpret_cast<char*>(&response_code_)) + sizeof(transaction_number_));
  // @@protoc_insertion_point(copy_constructor:ola.proto.RDMResponse)
}

void RDMResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RDMResponse_Ola_2eproto.base);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&source_uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&transaction_number_) -
      reinterpret_cast<char*>(&source_uid_)) + sizeof(transaction_number_));
}

RDMResponse::~RDMResponse() {
  // @@protoc_insertion_point(destructor:ola.proto.RDMResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RDMResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete source_uid_;
  if (this != internal_default_instance()) delete dest_uid_;
}

void RDMResponse::ArenaDtor(void* object) {
  RDMResponse* _this = reinterpret_cast< RDMResponse* >(object);
  (void)_this;
}
void RDMResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RDMResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RDMResponse& RDMResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RDMResponse_Ola_2eproto.base);
  return *internal_default_instance();
}


void RDMResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ola.proto.RDMResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  raw_response_.Clear();
  raw_frame_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      data_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(source_uid_ != nullptr);
      source_uid_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(dest_uid_ != nullptr);
      dest_uid_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&response_code_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&command_class_) -
        reinterpret_cast<char*>(&response_code_)) + sizeof(command_class_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&sub_device_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&transaction_number_) -
        reinterpret_cast<char*>(&sub_device_)) + sizeof(transaction_number_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RDMResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .ola.proto.RDMResponseCode response_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ola::proto::RDMResponseCode_IsValid(val))) {
            _internal_set_response_code(static_cast<::ola::proto::RDMResponseCode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .ola.proto.RDMResponseType response_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ola::proto::RDMResponseType_IsValid(val))) {
            _internal_set_response_type(static_cast<::ola::proto::RDMResponseType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 message_count = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_message_count(&has_bits);
          message_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes data = 4 [default = ""];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 param_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_param_id(&has_bits);
          param_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ola.proto.RDMCommandClass command_class = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ola::proto::RDMCommandClass_IsValid(val))) {
            _internal_set_command_class(static_cast<::ola::proto::RDMCommandClass>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 sub_device = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_sub_device(&has_bits);
          sub_device_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bytes raw_response = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_raw_response();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .ola.proto.UID source_uid = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_source_uid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ola.proto.UID dest_uid = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_dest_uid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 transaction_number = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_transaction_number(&has_bits);
          transaction_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ola.proto.RDMFrame raw_frame = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_raw_frame(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RDMResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ola.proto.RDMResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ola.proto.RDMResponseCode response_code = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_response_code(), target);
  }

  // optional .ola.proto.RDMResponseType response_type = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_response_type(), target);
  }

  // optional uint32 message_count = 3 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_message_count(), target);
  }

  // optional bytes data = 4 [default = ""];
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_data(), target);
  }

  // optional uint32 param_id = 5;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_param_id(), target);
  }

  // optional .ola.proto.RDMCommandClass command_class = 6;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_command_class(), target);
  }

  // optional uint32 sub_device = 7;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_sub_device(), target);
  }

  // repeated bytes raw_response = 8;
  for (int i = 0, n = this->_internal_raw_response_size(); i < n; i++) {
    const auto& s = this->_internal_raw_response(i);
    target = stream->WriteBytes(8, s, target);
  }

  // optional .ola.proto.UID source_uid = 9;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::source_uid(this), target, stream);
  }

  // optional .ola.proto.UID dest_uid = 10;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::dest_uid(this), target, stream);
  }

  // optional int32 transaction_number = 11;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_transaction_number(), target);
  }

  // repeated .ola.proto.RDMFrame raw_frame = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_raw_frame_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, this->_internal_raw_frame(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ola.proto.RDMResponse)
  return target;
}

size_t RDMResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ola.proto.RDMResponse)
  size_t total_size = 0;

  // required .ola.proto.RDMResponseCode response_code = 1;
  if (_internal_has_response_code()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_response_code());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes raw_response = 8;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(raw_response_.size());
  for (int i = 0, n = raw_response_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      raw_response_.Get(i));
  }

  // repeated .ola.proto.RDMFrame raw_frame = 12;
  total_size += 1UL * this->_internal_raw_frame_size();
  for (const auto& msg : this->raw_frame_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes data = 4 [default = ""];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_data());
    }

    // optional .ola.proto.UID source_uid = 9;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *source_uid_);
    }

    // optional .ola.proto.UID dest_uid = 10;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *dest_uid_);
    }

  }
  if (cached_has_bits & 0x000000f0u) {
    // optional .ola.proto.RDMResponseType response_type = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_response_type());
    }

    // optional uint32 message_count = 3 [default = 0];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_message_count());
    }

    // optional uint32 param_id = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_param_id());
    }

    // optional .ola.proto.RDMCommandClass command_class = 6;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_command_class());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional uint32 sub_device = 7;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_sub_device());
    }

    // optional int32 transaction_number = 11;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_transaction_number());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RDMResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ola.proto.RDMResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RDMResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RDMResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ola.proto.RDMResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ola.proto.RDMResponse)
    MergeFrom(*source);
  }
}

void RDMResponse::MergeFrom(const RDMResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ola.proto.RDMResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  raw_response_.MergeFrom(from.raw_response_);
  raw_frame_.MergeFrom(from.raw_frame_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_data(from._internal_data());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_source_uid()->::ola::proto::UID::MergeFrom(from._internal_source_uid());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_dest_uid()->::ola::proto::UID::MergeFrom(from._internal_dest_uid());
    }
    if (cached_has_bits & 0x00000008u) {
      response_code_ = from.response_code_;
    }
    if (cached_has_bits & 0x00000010u) {
      response_type_ = from.response_type_;
    }
    if (cached_has_bits & 0x00000020u) {
      message_count_ = from.message_count_;
    }
    if (cached_has_bits & 0x00000040u) {
      param_id_ = from.param_id_;
    }
    if (cached_has_bits & 0x00000080u) {
      command_class_ = from.command_class_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      sub_device_ = from.sub_device_;
    }
    if (cached_has_bits & 0x00000200u) {
      transaction_number_ = from.transaction_number_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RDMResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ola.proto.RDMResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RDMResponse::CopyFrom(const RDMResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ola.proto.RDMResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RDMResponse::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_source_uid()) {
    if (!source_uid_->IsInitialized()) return false;
  }
  if (_internal_has_dest_uid()) {
    if (!dest_uid_->IsInitialized()) return false;
  }
  return true;
}

void RDMResponse::InternalSwap(RDMResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  raw_response_.InternalSwap(&other->raw_response_);
  raw_frame_.InternalSwap(&other->raw_frame_);
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RDMResponse, transaction_number_)
      + sizeof(RDMResponse::transaction_number_)
      - PROTOBUF_FIELD_OFFSET(RDMResponse, source_uid_)>(
          reinterpret_cast<char*>(&source_uid_),
          reinterpret_cast<char*>(&other->source_uid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RDMResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TimeCode::InitAsDefaultInstance() {
}
class TimeCode::_Internal {
 public:
  using HasBits = decltype(std::declval<TimeCode>()._has_bits_);
  static void set_has_hours(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_minutes(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_seconds(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_frames(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000001f) ^ 0x0000001f) != 0;
  }
};

TimeCode::TimeCode(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ola.proto.TimeCode)
}
TimeCode::TimeCode(const TimeCode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&hours_, &from.hours_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&hours_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:ola.proto.TimeCode)
}

void TimeCode::SharedCtor() {
  ::memset(&hours_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&hours_)) + sizeof(type_));
}

TimeCode::~TimeCode() {
  // @@protoc_insertion_point(destructor:ola.proto.TimeCode)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TimeCode::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TimeCode::ArenaDtor(void* object) {
  TimeCode* _this = reinterpret_cast< TimeCode* >(object);
  (void)_this;
}
void TimeCode::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TimeCode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TimeCode& TimeCode::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TimeCode_Ola_2eproto.base);
  return *internal_default_instance();
}


void TimeCode::Clear() {
// @@protoc_insertion_point(message_clear_start:ola.proto.TimeCode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&hours_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&type_) -
        reinterpret_cast<char*>(&hours_)) + sizeof(type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TimeCode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 hours = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_hours(&has_bits);
          hours_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 minutes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_minutes(&has_bits);
          minutes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 seconds = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_seconds(&has_bits);
          seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 frames = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_frames(&has_bits);
          frames_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .ola.proto.TimeCodeType type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ola::proto::TimeCodeType_IsValid(val))) {
            _internal_set_type(static_cast<::ola::proto::TimeCodeType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TimeCode::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ola.proto.TimeCode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 hours = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_hours(), target);
  }

  // required uint32 minutes = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_minutes(), target);
  }

  // required uint32 seconds = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_seconds(), target);
  }

  // required uint32 frames = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_frames(), target);
  }

  // required .ola.proto.TimeCodeType type = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ola.proto.TimeCode)
  return target;
}

size_t TimeCode::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ola.proto.TimeCode)
  size_t total_size = 0;

  if (_internal_has_hours()) {
    // required uint32 hours = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_hours());
  }

  if (_internal_has_minutes()) {
    // required uint32 minutes = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_minutes());
  }

  if (_internal_has_seconds()) {
    // required uint32 seconds = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_seconds());
  }

  if (_internal_has_frames()) {
    // required uint32 frames = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_frames());
  }

  if (_internal_has_type()) {
    // required .ola.proto.TimeCodeType type = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  return total_size;
}
size_t TimeCode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ola.proto.TimeCode)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required uint32 hours = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_hours());

    // required uint32 minutes = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_minutes());

    // required uint32 seconds = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_seconds());

    // required uint32 frames = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_frames());

    // required .ola.proto.TimeCodeType type = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TimeCode::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ola.proto.TimeCode)
  GOOGLE_DCHECK_NE(&from, this);
  const TimeCode* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TimeCode>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ola.proto.TimeCode)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ola.proto.TimeCode)
    MergeFrom(*source);
  }
}

void TimeCode::MergeFrom(const TimeCode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ola.proto.TimeCode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      hours_ = from.hours_;
    }
    if (cached_has_bits & 0x00000002u) {
      minutes_ = from.minutes_;
    }
    if (cached_has_bits & 0x00000004u) {
      seconds_ = from.seconds_;
    }
    if (cached_has_bits & 0x00000008u) {
      frames_ = from.frames_;
    }
    if (cached_has_bits & 0x00000010u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TimeCode::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ola.proto.TimeCode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimeCode::CopyFrom(const TimeCode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ola.proto.TimeCode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeCode::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void TimeCode::InternalSwap(TimeCode* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TimeCode, type_)
      + sizeof(TimeCode::type_)
      - PROTOBUF_FIELD_OFFSET(TimeCode, hours_)>(
          reinterpret_cast<char*>(&hours_),
          reinterpret_cast<char*>(&other->hours_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TimeCode::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace ola
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ola::proto::STREAMING_NO_RESPONSE* Arena::CreateMaybeMessage< ::ola::proto::STREAMING_NO_RESPONSE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ola::proto::STREAMING_NO_RESPONSE >(arena);
}
template<> PROTOBUF_NOINLINE ::ola::proto::Ack* Arena::CreateMaybeMessage< ::ola::proto::Ack >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ola::proto::Ack >(arena);
}
template<> PROTOBUF_NOINLINE ::ola::proto::PluginListRequest* Arena::CreateMaybeMessage< ::ola::proto::PluginListRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ola::proto::PluginListRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ola::proto::PluginReloadRequest* Arena::CreateMaybeMessage< ::ola::proto::PluginReloadRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ola::proto::PluginReloadRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ola::proto::PluginInfo* Arena::CreateMaybeMessage< ::ola::proto::PluginInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ola::proto::PluginInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::ola::proto::PluginListReply* Arena::CreateMaybeMessage< ::ola::proto::PluginListReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ola::proto::PluginListReply >(arena);
}
template<> PROTOBUF_NOINLINE ::ola::proto::PluginDescriptionRequest* Arena::CreateMaybeMessage< ::ola::proto::PluginDescriptionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ola::proto::PluginDescriptionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ola::proto::PluginDescriptionReply* Arena::CreateMaybeMessage< ::ola::proto::PluginDescriptionReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ola::proto::PluginDescriptionReply >(arena);
}
template<> PROTOBUF_NOINLINE ::ola::proto::PluginStateRequest* Arena::CreateMaybeMessage< ::ola::proto::PluginStateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ola::proto::PluginStateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ola::proto::PluginStateReply* Arena::CreateMaybeMessage< ::ola::proto::PluginStateReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ola::proto::PluginStateReply >(arena);
}
template<> PROTOBUF_NOINLINE ::ola::proto::PluginStateChangeRequest* Arena::CreateMaybeMessage< ::ola::proto::PluginStateChangeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ola::proto::PluginStateChangeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ola::proto::DeviceInfoRequest* Arena::CreateMaybeMessage< ::ola::proto::DeviceInfoRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ola::proto::DeviceInfoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ola::proto::PortInfo* Arena::CreateMaybeMessage< ::ola::proto::PortInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ola::proto::PortInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::ola::proto::DeviceInfo* Arena::CreateMaybeMessage< ::ola::proto::DeviceInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ola::proto::DeviceInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::ola::proto::DeviceInfoReply* Arena::CreateMaybeMessage< ::ola::proto::DeviceInfoReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ola::proto::DeviceInfoReply >(arena);
}
template<> PROTOBUF_NOINLINE ::ola::proto::DmxData* Arena::CreateMaybeMessage< ::ola::proto::DmxData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ola::proto::DmxData >(arena);
}
template<> PROTOBUF_NOINLINE ::ola::proto::RegisterDmxRequest* Arena::CreateMaybeMessage< ::ola::proto::RegisterDmxRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ola::proto::RegisterDmxRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ola::proto::PatchPortRequest* Arena::CreateMaybeMessage< ::ola::proto::PatchPortRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ola::proto::PatchPortRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ola::proto::UniverseNameRequest* Arena::CreateMaybeMessage< ::ola::proto::UniverseNameRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ola::proto::UniverseNameRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ola::proto::MergeModeRequest* Arena::CreateMaybeMessage< ::ola::proto::MergeModeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ola::proto::MergeModeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ola::proto::OptionalUniverseRequest* Arena::CreateMaybeMessage< ::ola::proto::OptionalUniverseRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ola::proto::OptionalUniverseRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ola::proto::UniverseInfo* Arena::CreateMaybeMessage< ::ola::proto::UniverseInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ola::proto::UniverseInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::ola::proto::UniverseInfoReply* Arena::CreateMaybeMessage< ::ola::proto::UniverseInfoReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ola::proto::UniverseInfoReply >(arena);
}
template<> PROTOBUF_NOINLINE ::ola::proto::PortPriorityRequest* Arena::CreateMaybeMessage< ::ola::proto::PortPriorityRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ola::proto::PortPriorityRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ola::proto::DeviceConfigRequest* Arena::CreateMaybeMessage< ::ola::proto::DeviceConfigRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ola::proto::DeviceConfigRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ola::proto::DeviceConfigReply* Arena::CreateMaybeMessage< ::ola::proto::DeviceConfigReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ola::proto::DeviceConfigReply >(arena);
}
template<> PROTOBUF_NOINLINE ::ola::proto::UID* Arena::CreateMaybeMessage< ::ola::proto::UID >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ola::proto::UID >(arena);
}
template<> PROTOBUF_NOINLINE ::ola::proto::UniverseRequest* Arena::CreateMaybeMessage< ::ola::proto::UniverseRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ola::proto::UniverseRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ola::proto::DiscoveryRequest* Arena::CreateMaybeMessage< ::ola::proto::DiscoveryRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ola::proto::DiscoveryRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ola::proto::UIDListReply* Arena::CreateMaybeMessage< ::ola::proto::UIDListReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ola::proto::UIDListReply >(arena);
}
template<> PROTOBUF_NOINLINE ::ola::proto::RDMRequestOverrideOptions* Arena::CreateMaybeMessage< ::ola::proto::RDMRequestOverrideOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ola::proto::RDMRequestOverrideOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::ola::proto::RDMRequest* Arena::CreateMaybeMessage< ::ola::proto::RDMRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ola::proto::RDMRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ola::proto::RDMDiscoveryRequest* Arena::CreateMaybeMessage< ::ola::proto::RDMDiscoveryRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ola::proto::RDMDiscoveryRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ola::proto::RDMFrameTiming* Arena::CreateMaybeMessage< ::ola::proto::RDMFrameTiming >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ola::proto::RDMFrameTiming >(arena);
}
template<> PROTOBUF_NOINLINE ::ola::proto::RDMFrame* Arena::CreateMaybeMessage< ::ola::proto::RDMFrame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ola::proto::RDMFrame >(arena);
}
template<> PROTOBUF_NOINLINE ::ola::proto::RDMResponse* Arena::CreateMaybeMessage< ::ola::proto::RDMResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ola::proto::RDMResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ola::proto::TimeCode* Arena::CreateMaybeMessage< ::ola::proto::TimeCode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ola::proto::TimeCode >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
