// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: UsbProConfigMessages.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_UsbProConfigMessages_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_UsbProConfigMessages_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_UsbProConfigMessages_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_UsbProConfigMessages_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_UsbProConfigMessages_2eproto;
namespace ola {
namespace plugin {
namespace usbpro {
class ParameterReply;
class ParameterReplyDefaultTypeInternal;
extern ParameterReplyDefaultTypeInternal _ParameterReply_default_instance_;
class ParameterRequest;
class ParameterRequestDefaultTypeInternal;
extern ParameterRequestDefaultTypeInternal _ParameterRequest_default_instance_;
class PortAssignmentReply;
class PortAssignmentReplyDefaultTypeInternal;
extern PortAssignmentReplyDefaultTypeInternal _PortAssignmentReply_default_instance_;
class Reply;
class ReplyDefaultTypeInternal;
extern ReplyDefaultTypeInternal _Reply_default_instance_;
class Request;
class RequestDefaultTypeInternal;
extern RequestDefaultTypeInternal _Request_default_instance_;
class SerialNumberReply;
class SerialNumberReplyDefaultTypeInternal;
extern SerialNumberReplyDefaultTypeInternal _SerialNumberReply_default_instance_;
}  // namespace usbpro
}  // namespace plugin
}  // namespace ola
PROTOBUF_NAMESPACE_OPEN
template<> ::ola::plugin::usbpro::ParameterReply* Arena::CreateMaybeMessage<::ola::plugin::usbpro::ParameterReply>(Arena*);
template<> ::ola::plugin::usbpro::ParameterRequest* Arena::CreateMaybeMessage<::ola::plugin::usbpro::ParameterRequest>(Arena*);
template<> ::ola::plugin::usbpro::PortAssignmentReply* Arena::CreateMaybeMessage<::ola::plugin::usbpro::PortAssignmentReply>(Arena*);
template<> ::ola::plugin::usbpro::Reply* Arena::CreateMaybeMessage<::ola::plugin::usbpro::Reply>(Arena*);
template<> ::ola::plugin::usbpro::Request* Arena::CreateMaybeMessage<::ola::plugin::usbpro::Request>(Arena*);
template<> ::ola::plugin::usbpro::SerialNumberReply* Arena::CreateMaybeMessage<::ola::plugin::usbpro::SerialNumberReply>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ola {
namespace plugin {
namespace usbpro {

enum Request_RequestType : int {
  Request_RequestType_USBPRO_PARAMETER_REQUEST = 1,
  Request_RequestType_USBPRO_SERIAL_REQUEST = 2,
  Request_RequestType_USBPRO_PORT_ASSIGNMENT_REQUEST = 3
};
bool Request_RequestType_IsValid(int value);
constexpr Request_RequestType Request_RequestType_RequestType_MIN = Request_RequestType_USBPRO_PARAMETER_REQUEST;
constexpr Request_RequestType Request_RequestType_RequestType_MAX = Request_RequestType_USBPRO_PORT_ASSIGNMENT_REQUEST;
constexpr int Request_RequestType_RequestType_ARRAYSIZE = Request_RequestType_RequestType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Request_RequestType_descriptor();
template<typename T>
inline const std::string& Request_RequestType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Request_RequestType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Request_RequestType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Request_RequestType_descriptor(), enum_t_value);
}
inline bool Request_RequestType_Parse(
    const std::string& name, Request_RequestType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Request_RequestType>(
    Request_RequestType_descriptor(), name, value);
}
enum Reply_ReplyType : int {
  Reply_ReplyType_USBPRO_PARAMETER_REPLY = 1,
  Reply_ReplyType_USBPRO_SERIAL_REPLY = 2,
  Reply_ReplyType_USBPRO_PORT_ASSIGNMENT_REPLY = 3
};
bool Reply_ReplyType_IsValid(int value);
constexpr Reply_ReplyType Reply_ReplyType_ReplyType_MIN = Reply_ReplyType_USBPRO_PARAMETER_REPLY;
constexpr Reply_ReplyType Reply_ReplyType_ReplyType_MAX = Reply_ReplyType_USBPRO_PORT_ASSIGNMENT_REPLY;
constexpr int Reply_ReplyType_ReplyType_ARRAYSIZE = Reply_ReplyType_ReplyType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Reply_ReplyType_descriptor();
template<typename T>
inline const std::string& Reply_ReplyType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Reply_ReplyType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Reply_ReplyType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Reply_ReplyType_descriptor(), enum_t_value);
}
inline bool Reply_ReplyType_Parse(
    const std::string& name, Reply_ReplyType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Reply_ReplyType>(
    Reply_ReplyType_descriptor(), name, value);
}
// ===================================================================

class ParameterReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ola.plugin.usbpro.ParameterReply) */ {
 public:
  inline ParameterReply() : ParameterReply(nullptr) {};
  virtual ~ParameterReply();

  ParameterReply(const ParameterReply& from);
  ParameterReply(ParameterReply&& from) noexcept
    : ParameterReply() {
    *this = ::std::move(from);
  }

  inline ParameterReply& operator=(const ParameterReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline ParameterReply& operator=(ParameterReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ParameterReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ParameterReply* internal_default_instance() {
    return reinterpret_cast<const ParameterReply*>(
               &_ParameterReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ParameterReply& a, ParameterReply& b) {
    a.Swap(&b);
  }
  inline void Swap(ParameterReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ParameterReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ParameterReply* New() const final {
    return CreateMaybeMessage<ParameterReply>(nullptr);
  }

  ParameterReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ParameterReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ParameterReply& from);
  void MergeFrom(const ParameterReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ParameterReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ola.plugin.usbpro.ParameterReply";
  }
  protected:
  explicit ParameterReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_UsbProConfigMessages_2eproto);
    return ::descriptor_table_UsbProConfigMessages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFirmwareHighFieldNumber = 1,
    kFirmwareFieldNumber = 2,
    kBreakTimeFieldNumber = 3,
    kMabTimeFieldNumber = 4,
    kRateFieldNumber = 5,
  };
  // required uint32 firmware_high = 1;
  bool has_firmware_high() const;
  private:
  bool _internal_has_firmware_high() const;
  public:
  void clear_firmware_high();
  ::PROTOBUF_NAMESPACE_ID::uint32 firmware_high() const;
  void set_firmware_high(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_firmware_high() const;
  void _internal_set_firmware_high(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 firmware = 2;
  bool has_firmware() const;
  private:
  bool _internal_has_firmware() const;
  public:
  void clear_firmware();
  ::PROTOBUF_NAMESPACE_ID::uint32 firmware() const;
  void set_firmware(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_firmware() const;
  void _internal_set_firmware(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 break_time = 3;
  bool has_break_time() const;
  private:
  bool _internal_has_break_time() const;
  public:
  void clear_break_time();
  ::PROTOBUF_NAMESPACE_ID::uint32 break_time() const;
  void set_break_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_break_time() const;
  void _internal_set_break_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 mab_time = 4;
  bool has_mab_time() const;
  private:
  bool _internal_has_mab_time() const;
  public:
  void clear_mab_time();
  ::PROTOBUF_NAMESPACE_ID::uint32 mab_time() const;
  void set_mab_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_mab_time() const;
  void _internal_set_mab_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 rate = 5;
  bool has_rate() const;
  private:
  bool _internal_has_rate() const;
  public:
  void clear_rate();
  ::PROTOBUF_NAMESPACE_ID::uint32 rate() const;
  void set_rate(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rate() const;
  void _internal_set_rate(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:ola.plugin.usbpro.ParameterReply)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 firmware_high_;
  ::PROTOBUF_NAMESPACE_ID::uint32 firmware_;
  ::PROTOBUF_NAMESPACE_ID::uint32 break_time_;
  ::PROTOBUF_NAMESPACE_ID::uint32 mab_time_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rate_;
  friend struct ::TableStruct_UsbProConfigMessages_2eproto;
};
// -------------------------------------------------------------------

class ParameterRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ola.plugin.usbpro.ParameterRequest) */ {
 public:
  inline ParameterRequest() : ParameterRequest(nullptr) {};
  virtual ~ParameterRequest();

  ParameterRequest(const ParameterRequest& from);
  ParameterRequest(ParameterRequest&& from) noexcept
    : ParameterRequest() {
    *this = ::std::move(from);
  }

  inline ParameterRequest& operator=(const ParameterRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ParameterRequest& operator=(ParameterRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ParameterRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ParameterRequest* internal_default_instance() {
    return reinterpret_cast<const ParameterRequest*>(
               &_ParameterRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ParameterRequest& a, ParameterRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ParameterRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ParameterRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ParameterRequest* New() const final {
    return CreateMaybeMessage<ParameterRequest>(nullptr);
  }

  ParameterRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ParameterRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ParameterRequest& from);
  void MergeFrom(const ParameterRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ParameterRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ola.plugin.usbpro.ParameterRequest";
  }
  protected:
  explicit ParameterRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_UsbProConfigMessages_2eproto);
    return ::descriptor_table_UsbProConfigMessages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBreakTimeFieldNumber = 1,
    kMabTimeFieldNumber = 2,
    kRateFieldNumber = 3,
    kPortIdFieldNumber = 4,
  };
  // optional uint32 break_time = 1;
  bool has_break_time() const;
  private:
  bool _internal_has_break_time() const;
  public:
  void clear_break_time();
  ::PROTOBUF_NAMESPACE_ID::uint32 break_time() const;
  void set_break_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_break_time() const;
  void _internal_set_break_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 mab_time = 2;
  bool has_mab_time() const;
  private:
  bool _internal_has_mab_time() const;
  public:
  void clear_mab_time();
  ::PROTOBUF_NAMESPACE_ID::uint32 mab_time() const;
  void set_mab_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_mab_time() const;
  void _internal_set_mab_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 rate = 3;
  bool has_rate() const;
  private:
  bool _internal_has_rate() const;
  public:
  void clear_rate();
  ::PROTOBUF_NAMESPACE_ID::uint32 rate() const;
  void set_rate(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rate() const;
  void _internal_set_rate(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 port_id = 4;
  bool has_port_id() const;
  private:
  bool _internal_has_port_id() const;
  public:
  void clear_port_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 port_id() const;
  void set_port_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_port_id() const;
  void _internal_set_port_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:ola.plugin.usbpro.ParameterRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 break_time_;
  ::PROTOBUF_NAMESPACE_ID::uint32 mab_time_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rate_;
  ::PROTOBUF_NAMESPACE_ID::uint32 port_id_;
  friend struct ::TableStruct_UsbProConfigMessages_2eproto;
};
// -------------------------------------------------------------------

class SerialNumberReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ola.plugin.usbpro.SerialNumberReply) */ {
 public:
  inline SerialNumberReply() : SerialNumberReply(nullptr) {};
  virtual ~SerialNumberReply();

  SerialNumberReply(const SerialNumberReply& from);
  SerialNumberReply(SerialNumberReply&& from) noexcept
    : SerialNumberReply() {
    *this = ::std::move(from);
  }

  inline SerialNumberReply& operator=(const SerialNumberReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline SerialNumberReply& operator=(SerialNumberReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SerialNumberReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SerialNumberReply* internal_default_instance() {
    return reinterpret_cast<const SerialNumberReply*>(
               &_SerialNumberReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SerialNumberReply& a, SerialNumberReply& b) {
    a.Swap(&b);
  }
  inline void Swap(SerialNumberReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SerialNumberReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SerialNumberReply* New() const final {
    return CreateMaybeMessage<SerialNumberReply>(nullptr);
  }

  SerialNumberReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SerialNumberReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SerialNumberReply& from);
  void MergeFrom(const SerialNumberReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SerialNumberReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ola.plugin.usbpro.SerialNumberReply";
  }
  protected:
  explicit SerialNumberReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_UsbProConfigMessages_2eproto);
    return ::descriptor_table_UsbProConfigMessages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSerialFieldNumber = 1,
  };
  // required string serial = 1;
  bool has_serial() const;
  private:
  bool _internal_has_serial() const;
  public:
  void clear_serial();
  const std::string& serial() const;
  void set_serial(const std::string& value);
  void set_serial(std::string&& value);
  void set_serial(const char* value);
  void set_serial(const char* value, size_t size);
  std::string* mutable_serial();
  std::string* release_serial();
  void set_allocated_serial(std::string* serial);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_serial();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_serial(
      std::string* serial);
  private:
  const std::string& _internal_serial() const;
  void _internal_set_serial(const std::string& value);
  std::string* _internal_mutable_serial();
  public:

  // @@protoc_insertion_point(class_scope:ola.plugin.usbpro.SerialNumberReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr serial_;
  friend struct ::TableStruct_UsbProConfigMessages_2eproto;
};
// -------------------------------------------------------------------

class PortAssignmentReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ola.plugin.usbpro.PortAssignmentReply) */ {
 public:
  inline PortAssignmentReply() : PortAssignmentReply(nullptr) {};
  virtual ~PortAssignmentReply();

  PortAssignmentReply(const PortAssignmentReply& from);
  PortAssignmentReply(PortAssignmentReply&& from) noexcept
    : PortAssignmentReply() {
    *this = ::std::move(from);
  }

  inline PortAssignmentReply& operator=(const PortAssignmentReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline PortAssignmentReply& operator=(PortAssignmentReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PortAssignmentReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PortAssignmentReply* internal_default_instance() {
    return reinterpret_cast<const PortAssignmentReply*>(
               &_PortAssignmentReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PortAssignmentReply& a, PortAssignmentReply& b) {
    a.Swap(&b);
  }
  inline void Swap(PortAssignmentReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PortAssignmentReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PortAssignmentReply* New() const final {
    return CreateMaybeMessage<PortAssignmentReply>(nullptr);
  }

  PortAssignmentReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PortAssignmentReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PortAssignmentReply& from);
  void MergeFrom(const PortAssignmentReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PortAssignmentReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ola.plugin.usbpro.PortAssignmentReply";
  }
  protected:
  explicit PortAssignmentReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_UsbProConfigMessages_2eproto);
    return ::descriptor_table_UsbProConfigMessages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPortAssignment1FieldNumber = 1,
    kPortAssignment2FieldNumber = 2,
  };
  // required uint32 port_assignment1 = 1;
  bool has_port_assignment1() const;
  private:
  bool _internal_has_port_assignment1() const;
  public:
  void clear_port_assignment1();
  ::PROTOBUF_NAMESPACE_ID::uint32 port_assignment1() const;
  void set_port_assignment1(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_port_assignment1() const;
  void _internal_set_port_assignment1(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 port_assignment2 = 2;
  bool has_port_assignment2() const;
  private:
  bool _internal_has_port_assignment2() const;
  public:
  void clear_port_assignment2();
  ::PROTOBUF_NAMESPACE_ID::uint32 port_assignment2() const;
  void set_port_assignment2(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_port_assignment2() const;
  void _internal_set_port_assignment2(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:ola.plugin.usbpro.PortAssignmentReply)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 port_assignment1_;
  ::PROTOBUF_NAMESPACE_ID::uint32 port_assignment2_;
  friend struct ::TableStruct_UsbProConfigMessages_2eproto;
};
// -------------------------------------------------------------------

class Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ola.plugin.usbpro.Request) */ {
 public:
  inline Request() : Request(nullptr) {};
  virtual ~Request();

  Request(const Request& from);
  Request(Request&& from) noexcept
    : Request() {
    *this = ::std::move(from);
  }

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline Request& operator=(Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Request* internal_default_instance() {
    return reinterpret_cast<const Request*>(
               &_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Request& a, Request& b) {
    a.Swap(&b);
  }
  inline void Swap(Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Request* New() const final {
    return CreateMaybeMessage<Request>(nullptr);
  }

  Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ola.plugin.usbpro.Request";
  }
  protected:
  explicit Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_UsbProConfigMessages_2eproto);
    return ::descriptor_table_UsbProConfigMessages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Request_RequestType RequestType;
  static constexpr RequestType USBPRO_PARAMETER_REQUEST =
    Request_RequestType_USBPRO_PARAMETER_REQUEST;
  static constexpr RequestType USBPRO_SERIAL_REQUEST =
    Request_RequestType_USBPRO_SERIAL_REQUEST;
  static constexpr RequestType USBPRO_PORT_ASSIGNMENT_REQUEST =
    Request_RequestType_USBPRO_PORT_ASSIGNMENT_REQUEST;
  static inline bool RequestType_IsValid(int value) {
    return Request_RequestType_IsValid(value);
  }
  static constexpr RequestType RequestType_MIN =
    Request_RequestType_RequestType_MIN;
  static constexpr RequestType RequestType_MAX =
    Request_RequestType_RequestType_MAX;
  static constexpr int RequestType_ARRAYSIZE =
    Request_RequestType_RequestType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  RequestType_descriptor() {
    return Request_RequestType_descriptor();
  }
  template<typename T>
  static inline const std::string& RequestType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, RequestType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function RequestType_Name.");
    return Request_RequestType_Name(enum_t_value);
  }
  static inline bool RequestType_Parse(const std::string& name,
      RequestType* value) {
    return Request_RequestType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kParametersFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // optional .ola.plugin.usbpro.ParameterRequest parameters = 2;
  bool has_parameters() const;
  private:
  bool _internal_has_parameters() const;
  public:
  void clear_parameters();
  const ::ola::plugin::usbpro::ParameterRequest& parameters() const;
  ::ola::plugin::usbpro::ParameterRequest* release_parameters();
  ::ola::plugin::usbpro::ParameterRequest* mutable_parameters();
  void set_allocated_parameters(::ola::plugin::usbpro::ParameterRequest* parameters);
  private:
  const ::ola::plugin::usbpro::ParameterRequest& _internal_parameters() const;
  ::ola::plugin::usbpro::ParameterRequest* _internal_mutable_parameters();
  public:
  void unsafe_arena_set_allocated_parameters(
      ::ola::plugin::usbpro::ParameterRequest* parameters);
  ::ola::plugin::usbpro::ParameterRequest* unsafe_arena_release_parameters();

  // required .ola.plugin.usbpro.Request.RequestType type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::ola::plugin::usbpro::Request_RequestType type() const;
  void set_type(::ola::plugin::usbpro::Request_RequestType value);
  private:
  ::ola::plugin::usbpro::Request_RequestType _internal_type() const;
  void _internal_set_type(::ola::plugin::usbpro::Request_RequestType value);
  public:

  // @@protoc_insertion_point(class_scope:ola.plugin.usbpro.Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::ola::plugin::usbpro::ParameterRequest* parameters_;
  int type_;
  friend struct ::TableStruct_UsbProConfigMessages_2eproto;
};
// -------------------------------------------------------------------

class Reply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ola.plugin.usbpro.Reply) */ {
 public:
  inline Reply() : Reply(nullptr) {};
  virtual ~Reply();

  Reply(const Reply& from);
  Reply(Reply&& from) noexcept
    : Reply() {
    *this = ::std::move(from);
  }

  inline Reply& operator=(const Reply& from) {
    CopyFrom(from);
    return *this;
  }
  inline Reply& operator=(Reply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Reply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Reply* internal_default_instance() {
    return reinterpret_cast<const Reply*>(
               &_Reply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Reply& a, Reply& b) {
    a.Swap(&b);
  }
  inline void Swap(Reply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Reply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Reply* New() const final {
    return CreateMaybeMessage<Reply>(nullptr);
  }

  Reply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Reply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Reply& from);
  void MergeFrom(const Reply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Reply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ola.plugin.usbpro.Reply";
  }
  protected:
  explicit Reply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_UsbProConfigMessages_2eproto);
    return ::descriptor_table_UsbProConfigMessages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Reply_ReplyType ReplyType;
  static constexpr ReplyType USBPRO_PARAMETER_REPLY =
    Reply_ReplyType_USBPRO_PARAMETER_REPLY;
  static constexpr ReplyType USBPRO_SERIAL_REPLY =
    Reply_ReplyType_USBPRO_SERIAL_REPLY;
  static constexpr ReplyType USBPRO_PORT_ASSIGNMENT_REPLY =
    Reply_ReplyType_USBPRO_PORT_ASSIGNMENT_REPLY;
  static inline bool ReplyType_IsValid(int value) {
    return Reply_ReplyType_IsValid(value);
  }
  static constexpr ReplyType ReplyType_MIN =
    Reply_ReplyType_ReplyType_MIN;
  static constexpr ReplyType ReplyType_MAX =
    Reply_ReplyType_ReplyType_MAX;
  static constexpr int ReplyType_ARRAYSIZE =
    Reply_ReplyType_ReplyType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ReplyType_descriptor() {
    return Reply_ReplyType_descriptor();
  }
  template<typename T>
  static inline const std::string& ReplyType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ReplyType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ReplyType_Name.");
    return Reply_ReplyType_Name(enum_t_value);
  }
  static inline bool ReplyType_Parse(const std::string& name,
      ReplyType* value) {
    return Reply_ReplyType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kParametersFieldNumber = 2,
    kSerialNumberFieldNumber = 3,
    kPortAssignmentFieldNumber = 4,
    kTypeFieldNumber = 1,
  };
  // optional .ola.plugin.usbpro.ParameterReply parameters = 2;
  bool has_parameters() const;
  private:
  bool _internal_has_parameters() const;
  public:
  void clear_parameters();
  const ::ola::plugin::usbpro::ParameterReply& parameters() const;
  ::ola::plugin::usbpro::ParameterReply* release_parameters();
  ::ola::plugin::usbpro::ParameterReply* mutable_parameters();
  void set_allocated_parameters(::ola::plugin::usbpro::ParameterReply* parameters);
  private:
  const ::ola::plugin::usbpro::ParameterReply& _internal_parameters() const;
  ::ola::plugin::usbpro::ParameterReply* _internal_mutable_parameters();
  public:
  void unsafe_arena_set_allocated_parameters(
      ::ola::plugin::usbpro::ParameterReply* parameters);
  ::ola::plugin::usbpro::ParameterReply* unsafe_arena_release_parameters();

  // optional .ola.plugin.usbpro.SerialNumberReply serial_number = 3;
  bool has_serial_number() const;
  private:
  bool _internal_has_serial_number() const;
  public:
  void clear_serial_number();
  const ::ola::plugin::usbpro::SerialNumberReply& serial_number() const;
  ::ola::plugin::usbpro::SerialNumberReply* release_serial_number();
  ::ola::plugin::usbpro::SerialNumberReply* mutable_serial_number();
  void set_allocated_serial_number(::ola::plugin::usbpro::SerialNumberReply* serial_number);
  private:
  const ::ola::plugin::usbpro::SerialNumberReply& _internal_serial_number() const;
  ::ola::plugin::usbpro::SerialNumberReply* _internal_mutable_serial_number();
  public:
  void unsafe_arena_set_allocated_serial_number(
      ::ola::plugin::usbpro::SerialNumberReply* serial_number);
  ::ola::plugin::usbpro::SerialNumberReply* unsafe_arena_release_serial_number();

  // optional .ola.plugin.usbpro.PortAssignmentReply port_assignment = 4;
  bool has_port_assignment() const;
  private:
  bool _internal_has_port_assignment() const;
  public:
  void clear_port_assignment();
  const ::ola::plugin::usbpro::PortAssignmentReply& port_assignment() const;
  ::ola::plugin::usbpro::PortAssignmentReply* release_port_assignment();
  ::ola::plugin::usbpro::PortAssignmentReply* mutable_port_assignment();
  void set_allocated_port_assignment(::ola::plugin::usbpro::PortAssignmentReply* port_assignment);
  private:
  const ::ola::plugin::usbpro::PortAssignmentReply& _internal_port_assignment() const;
  ::ola::plugin::usbpro::PortAssignmentReply* _internal_mutable_port_assignment();
  public:
  void unsafe_arena_set_allocated_port_assignment(
      ::ola::plugin::usbpro::PortAssignmentReply* port_assignment);
  ::ola::plugin::usbpro::PortAssignmentReply* unsafe_arena_release_port_assignment();

  // required .ola.plugin.usbpro.Reply.ReplyType type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::ola::plugin::usbpro::Reply_ReplyType type() const;
  void set_type(::ola::plugin::usbpro::Reply_ReplyType value);
  private:
  ::ola::plugin::usbpro::Reply_ReplyType _internal_type() const;
  void _internal_set_type(::ola::plugin::usbpro::Reply_ReplyType value);
  public:

  // @@protoc_insertion_point(class_scope:ola.plugin.usbpro.Reply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::ola::plugin::usbpro::ParameterReply* parameters_;
  ::ola::plugin::usbpro::SerialNumberReply* serial_number_;
  ::ola::plugin::usbpro::PortAssignmentReply* port_assignment_;
  int type_;
  friend struct ::TableStruct_UsbProConfigMessages_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ParameterReply

// required uint32 firmware_high = 1;
inline bool ParameterReply::_internal_has_firmware_high() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ParameterReply::has_firmware_high() const {
  return _internal_has_firmware_high();
}
inline void ParameterReply::clear_firmware_high() {
  firmware_high_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ParameterReply::_internal_firmware_high() const {
  return firmware_high_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ParameterReply::firmware_high() const {
  // @@protoc_insertion_point(field_get:ola.plugin.usbpro.ParameterReply.firmware_high)
  return _internal_firmware_high();
}
inline void ParameterReply::_internal_set_firmware_high(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  firmware_high_ = value;
}
inline void ParameterReply::set_firmware_high(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_firmware_high(value);
  // @@protoc_insertion_point(field_set:ola.plugin.usbpro.ParameterReply.firmware_high)
}

// required uint32 firmware = 2;
inline bool ParameterReply::_internal_has_firmware() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ParameterReply::has_firmware() const {
  return _internal_has_firmware();
}
inline void ParameterReply::clear_firmware() {
  firmware_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ParameterReply::_internal_firmware() const {
  return firmware_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ParameterReply::firmware() const {
  // @@protoc_insertion_point(field_get:ola.plugin.usbpro.ParameterReply.firmware)
  return _internal_firmware();
}
inline void ParameterReply::_internal_set_firmware(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  firmware_ = value;
}
inline void ParameterReply::set_firmware(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_firmware(value);
  // @@protoc_insertion_point(field_set:ola.plugin.usbpro.ParameterReply.firmware)
}

// required uint32 break_time = 3;
inline bool ParameterReply::_internal_has_break_time() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ParameterReply::has_break_time() const {
  return _internal_has_break_time();
}
inline void ParameterReply::clear_break_time() {
  break_time_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ParameterReply::_internal_break_time() const {
  return break_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ParameterReply::break_time() const {
  // @@protoc_insertion_point(field_get:ola.plugin.usbpro.ParameterReply.break_time)
  return _internal_break_time();
}
inline void ParameterReply::_internal_set_break_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  break_time_ = value;
}
inline void ParameterReply::set_break_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_break_time(value);
  // @@protoc_insertion_point(field_set:ola.plugin.usbpro.ParameterReply.break_time)
}

// required uint32 mab_time = 4;
inline bool ParameterReply::_internal_has_mab_time() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ParameterReply::has_mab_time() const {
  return _internal_has_mab_time();
}
inline void ParameterReply::clear_mab_time() {
  mab_time_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ParameterReply::_internal_mab_time() const {
  return mab_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ParameterReply::mab_time() const {
  // @@protoc_insertion_point(field_get:ola.plugin.usbpro.ParameterReply.mab_time)
  return _internal_mab_time();
}
inline void ParameterReply::_internal_set_mab_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  mab_time_ = value;
}
inline void ParameterReply::set_mab_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_mab_time(value);
  // @@protoc_insertion_point(field_set:ola.plugin.usbpro.ParameterReply.mab_time)
}

// required uint32 rate = 5;
inline bool ParameterReply::_internal_has_rate() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ParameterReply::has_rate() const {
  return _internal_has_rate();
}
inline void ParameterReply::clear_rate() {
  rate_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ParameterReply::_internal_rate() const {
  return rate_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ParameterReply::rate() const {
  // @@protoc_insertion_point(field_get:ola.plugin.usbpro.ParameterReply.rate)
  return _internal_rate();
}
inline void ParameterReply::_internal_set_rate(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  rate_ = value;
}
inline void ParameterReply::set_rate(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rate(value);
  // @@protoc_insertion_point(field_set:ola.plugin.usbpro.ParameterReply.rate)
}

// -------------------------------------------------------------------

// ParameterRequest

// required uint32 port_id = 4;
inline bool ParameterRequest::_internal_has_port_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ParameterRequest::has_port_id() const {
  return _internal_has_port_id();
}
inline void ParameterRequest::clear_port_id() {
  port_id_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ParameterRequest::_internal_port_id() const {
  return port_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ParameterRequest::port_id() const {
  // @@protoc_insertion_point(field_get:ola.plugin.usbpro.ParameterRequest.port_id)
  return _internal_port_id();
}
inline void ParameterRequest::_internal_set_port_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  port_id_ = value;
}
inline void ParameterRequest::set_port_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_port_id(value);
  // @@protoc_insertion_point(field_set:ola.plugin.usbpro.ParameterRequest.port_id)
}

// optional uint32 break_time = 1;
inline bool ParameterRequest::_internal_has_break_time() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ParameterRequest::has_break_time() const {
  return _internal_has_break_time();
}
inline void ParameterRequest::clear_break_time() {
  break_time_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ParameterRequest::_internal_break_time() const {
  return break_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ParameterRequest::break_time() const {
  // @@protoc_insertion_point(field_get:ola.plugin.usbpro.ParameterRequest.break_time)
  return _internal_break_time();
}
inline void ParameterRequest::_internal_set_break_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  break_time_ = value;
}
inline void ParameterRequest::set_break_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_break_time(value);
  // @@protoc_insertion_point(field_set:ola.plugin.usbpro.ParameterRequest.break_time)
}

// optional uint32 mab_time = 2;
inline bool ParameterRequest::_internal_has_mab_time() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ParameterRequest::has_mab_time() const {
  return _internal_has_mab_time();
}
inline void ParameterRequest::clear_mab_time() {
  mab_time_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ParameterRequest::_internal_mab_time() const {
  return mab_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ParameterRequest::mab_time() const {
  // @@protoc_insertion_point(field_get:ola.plugin.usbpro.ParameterRequest.mab_time)
  return _internal_mab_time();
}
inline void ParameterRequest::_internal_set_mab_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  mab_time_ = value;
}
inline void ParameterRequest::set_mab_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_mab_time(value);
  // @@protoc_insertion_point(field_set:ola.plugin.usbpro.ParameterRequest.mab_time)
}

// optional uint32 rate = 3;
inline bool ParameterRequest::_internal_has_rate() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ParameterRequest::has_rate() const {
  return _internal_has_rate();
}
inline void ParameterRequest::clear_rate() {
  rate_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ParameterRequest::_internal_rate() const {
  return rate_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ParameterRequest::rate() const {
  // @@protoc_insertion_point(field_get:ola.plugin.usbpro.ParameterRequest.rate)
  return _internal_rate();
}
inline void ParameterRequest::_internal_set_rate(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  rate_ = value;
}
inline void ParameterRequest::set_rate(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rate(value);
  // @@protoc_insertion_point(field_set:ola.plugin.usbpro.ParameterRequest.rate)
}

// -------------------------------------------------------------------

// SerialNumberReply

// required string serial = 1;
inline bool SerialNumberReply::_internal_has_serial() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SerialNumberReply::has_serial() const {
  return _internal_has_serial();
}
inline void SerialNumberReply::clear_serial() {
  serial_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SerialNumberReply::serial() const {
  // @@protoc_insertion_point(field_get:ola.plugin.usbpro.SerialNumberReply.serial)
  return _internal_serial();
}
inline void SerialNumberReply::set_serial(const std::string& value) {
  _internal_set_serial(value);
  // @@protoc_insertion_point(field_set:ola.plugin.usbpro.SerialNumberReply.serial)
}
inline std::string* SerialNumberReply::mutable_serial() {
  // @@protoc_insertion_point(field_mutable:ola.plugin.usbpro.SerialNumberReply.serial)
  return _internal_mutable_serial();
}
inline const std::string& SerialNumberReply::_internal_serial() const {
  return serial_.Get();
}
inline void SerialNumberReply::_internal_set_serial(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  serial_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SerialNumberReply::set_serial(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  serial_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ola.plugin.usbpro.SerialNumberReply.serial)
}
inline void SerialNumberReply::set_serial(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  serial_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ola.plugin.usbpro.SerialNumberReply.serial)
}
inline void SerialNumberReply::set_serial(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  serial_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ola.plugin.usbpro.SerialNumberReply.serial)
}
inline std::string* SerialNumberReply::_internal_mutable_serial() {
  _has_bits_[0] |= 0x00000001u;
  return serial_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SerialNumberReply::release_serial() {
  // @@protoc_insertion_point(field_release:ola.plugin.usbpro.SerialNumberReply.serial)
  if (!_internal_has_serial()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return serial_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SerialNumberReply::set_allocated_serial(std::string* serial) {
  if (serial != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  serial_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), serial,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ola.plugin.usbpro.SerialNumberReply.serial)
}
inline std::string* SerialNumberReply::unsafe_arena_release_serial() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ola.plugin.usbpro.SerialNumberReply.serial)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return serial_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SerialNumberReply::unsafe_arena_set_allocated_serial(
    std::string* serial) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (serial != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  serial_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      serial, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ola.plugin.usbpro.SerialNumberReply.serial)
}

// -------------------------------------------------------------------

// PortAssignmentReply

// required uint32 port_assignment1 = 1;
inline bool PortAssignmentReply::_internal_has_port_assignment1() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PortAssignmentReply::has_port_assignment1() const {
  return _internal_has_port_assignment1();
}
inline void PortAssignmentReply::clear_port_assignment1() {
  port_assignment1_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PortAssignmentReply::_internal_port_assignment1() const {
  return port_assignment1_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PortAssignmentReply::port_assignment1() const {
  // @@protoc_insertion_point(field_get:ola.plugin.usbpro.PortAssignmentReply.port_assignment1)
  return _internal_port_assignment1();
}
inline void PortAssignmentReply::_internal_set_port_assignment1(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  port_assignment1_ = value;
}
inline void PortAssignmentReply::set_port_assignment1(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_port_assignment1(value);
  // @@protoc_insertion_point(field_set:ola.plugin.usbpro.PortAssignmentReply.port_assignment1)
}

// required uint32 port_assignment2 = 2;
inline bool PortAssignmentReply::_internal_has_port_assignment2() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PortAssignmentReply::has_port_assignment2() const {
  return _internal_has_port_assignment2();
}
inline void PortAssignmentReply::clear_port_assignment2() {
  port_assignment2_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PortAssignmentReply::_internal_port_assignment2() const {
  return port_assignment2_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PortAssignmentReply::port_assignment2() const {
  // @@protoc_insertion_point(field_get:ola.plugin.usbpro.PortAssignmentReply.port_assignment2)
  return _internal_port_assignment2();
}
inline void PortAssignmentReply::_internal_set_port_assignment2(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  port_assignment2_ = value;
}
inline void PortAssignmentReply::set_port_assignment2(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_port_assignment2(value);
  // @@protoc_insertion_point(field_set:ola.plugin.usbpro.PortAssignmentReply.port_assignment2)
}

// -------------------------------------------------------------------

// Request

// required .ola.plugin.usbpro.Request.RequestType type = 1;
inline bool Request::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Request::has_type() const {
  return _internal_has_type();
}
inline void Request::clear_type() {
  type_ = 1;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::ola::plugin::usbpro::Request_RequestType Request::_internal_type() const {
  return static_cast< ::ola::plugin::usbpro::Request_RequestType >(type_);
}
inline ::ola::plugin::usbpro::Request_RequestType Request::type() const {
  // @@protoc_insertion_point(field_get:ola.plugin.usbpro.Request.type)
  return _internal_type();
}
inline void Request::_internal_set_type(::ola::plugin::usbpro::Request_RequestType value) {
  assert(::ola::plugin::usbpro::Request_RequestType_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  type_ = value;
}
inline void Request::set_type(::ola::plugin::usbpro::Request_RequestType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:ola.plugin.usbpro.Request.type)
}

// optional .ola.plugin.usbpro.ParameterRequest parameters = 2;
inline bool Request::_internal_has_parameters() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || parameters_ != nullptr);
  return value;
}
inline bool Request::has_parameters() const {
  return _internal_has_parameters();
}
inline void Request::clear_parameters() {
  if (parameters_ != nullptr) parameters_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::ola::plugin::usbpro::ParameterRequest& Request::_internal_parameters() const {
  const ::ola::plugin::usbpro::ParameterRequest* p = parameters_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ola::plugin::usbpro::ParameterRequest*>(
      &::ola::plugin::usbpro::_ParameterRequest_default_instance_);
}
inline const ::ola::plugin::usbpro::ParameterRequest& Request::parameters() const {
  // @@protoc_insertion_point(field_get:ola.plugin.usbpro.Request.parameters)
  return _internal_parameters();
}
inline void Request::unsafe_arena_set_allocated_parameters(
    ::ola::plugin::usbpro::ParameterRequest* parameters) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(parameters_);
  }
  parameters_ = parameters;
  if (parameters) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ola.plugin.usbpro.Request.parameters)
}
inline ::ola::plugin::usbpro::ParameterRequest* Request::release_parameters() {
  auto temp = unsafe_arena_release_parameters();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ola::plugin::usbpro::ParameterRequest* Request::unsafe_arena_release_parameters() {
  // @@protoc_insertion_point(field_release:ola.plugin.usbpro.Request.parameters)
  _has_bits_[0] &= ~0x00000001u;
  ::ola::plugin::usbpro::ParameterRequest* temp = parameters_;
  parameters_ = nullptr;
  return temp;
}
inline ::ola::plugin::usbpro::ParameterRequest* Request::_internal_mutable_parameters() {
  _has_bits_[0] |= 0x00000001u;
  if (parameters_ == nullptr) {
    auto* p = CreateMaybeMessage<::ola::plugin::usbpro::ParameterRequest>(GetArena());
    parameters_ = p;
  }
  return parameters_;
}
inline ::ola::plugin::usbpro::ParameterRequest* Request::mutable_parameters() {
  // @@protoc_insertion_point(field_mutable:ola.plugin.usbpro.Request.parameters)
  return _internal_mutable_parameters();
}
inline void Request::set_allocated_parameters(::ola::plugin::usbpro::ParameterRequest* parameters) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete parameters_;
  }
  if (parameters) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(parameters);
    if (message_arena != submessage_arena) {
      parameters = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, parameters, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  parameters_ = parameters;
  // @@protoc_insertion_point(field_set_allocated:ola.plugin.usbpro.Request.parameters)
}

// -------------------------------------------------------------------

// Reply

// required .ola.plugin.usbpro.Reply.ReplyType type = 1;
inline bool Reply::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Reply::has_type() const {
  return _internal_has_type();
}
inline void Reply::clear_type() {
  type_ = 1;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::ola::plugin::usbpro::Reply_ReplyType Reply::_internal_type() const {
  return static_cast< ::ola::plugin::usbpro::Reply_ReplyType >(type_);
}
inline ::ola::plugin::usbpro::Reply_ReplyType Reply::type() const {
  // @@protoc_insertion_point(field_get:ola.plugin.usbpro.Reply.type)
  return _internal_type();
}
inline void Reply::_internal_set_type(::ola::plugin::usbpro::Reply_ReplyType value) {
  assert(::ola::plugin::usbpro::Reply_ReplyType_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  type_ = value;
}
inline void Reply::set_type(::ola::plugin::usbpro::Reply_ReplyType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:ola.plugin.usbpro.Reply.type)
}

// optional .ola.plugin.usbpro.ParameterReply parameters = 2;
inline bool Reply::_internal_has_parameters() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || parameters_ != nullptr);
  return value;
}
inline bool Reply::has_parameters() const {
  return _internal_has_parameters();
}
inline void Reply::clear_parameters() {
  if (parameters_ != nullptr) parameters_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::ola::plugin::usbpro::ParameterReply& Reply::_internal_parameters() const {
  const ::ola::plugin::usbpro::ParameterReply* p = parameters_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ola::plugin::usbpro::ParameterReply*>(
      &::ola::plugin::usbpro::_ParameterReply_default_instance_);
}
inline const ::ola::plugin::usbpro::ParameterReply& Reply::parameters() const {
  // @@protoc_insertion_point(field_get:ola.plugin.usbpro.Reply.parameters)
  return _internal_parameters();
}
inline void Reply::unsafe_arena_set_allocated_parameters(
    ::ola::plugin::usbpro::ParameterReply* parameters) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(parameters_);
  }
  parameters_ = parameters;
  if (parameters) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ola.plugin.usbpro.Reply.parameters)
}
inline ::ola::plugin::usbpro::ParameterReply* Reply::release_parameters() {
  auto temp = unsafe_arena_release_parameters();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ola::plugin::usbpro::ParameterReply* Reply::unsafe_arena_release_parameters() {
  // @@protoc_insertion_point(field_release:ola.plugin.usbpro.Reply.parameters)
  _has_bits_[0] &= ~0x00000001u;
  ::ola::plugin::usbpro::ParameterReply* temp = parameters_;
  parameters_ = nullptr;
  return temp;
}
inline ::ola::plugin::usbpro::ParameterReply* Reply::_internal_mutable_parameters() {
  _has_bits_[0] |= 0x00000001u;
  if (parameters_ == nullptr) {
    auto* p = CreateMaybeMessage<::ola::plugin::usbpro::ParameterReply>(GetArena());
    parameters_ = p;
  }
  return parameters_;
}
inline ::ola::plugin::usbpro::ParameterReply* Reply::mutable_parameters() {
  // @@protoc_insertion_point(field_mutable:ola.plugin.usbpro.Reply.parameters)
  return _internal_mutable_parameters();
}
inline void Reply::set_allocated_parameters(::ola::plugin::usbpro::ParameterReply* parameters) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete parameters_;
  }
  if (parameters) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(parameters);
    if (message_arena != submessage_arena) {
      parameters = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, parameters, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  parameters_ = parameters;
  // @@protoc_insertion_point(field_set_allocated:ola.plugin.usbpro.Reply.parameters)
}

// optional .ola.plugin.usbpro.SerialNumberReply serial_number = 3;
inline bool Reply::_internal_has_serial_number() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || serial_number_ != nullptr);
  return value;
}
inline bool Reply::has_serial_number() const {
  return _internal_has_serial_number();
}
inline void Reply::clear_serial_number() {
  if (serial_number_ != nullptr) serial_number_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::ola::plugin::usbpro::SerialNumberReply& Reply::_internal_serial_number() const {
  const ::ola::plugin::usbpro::SerialNumberReply* p = serial_number_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ola::plugin::usbpro::SerialNumberReply*>(
      &::ola::plugin::usbpro::_SerialNumberReply_default_instance_);
}
inline const ::ola::plugin::usbpro::SerialNumberReply& Reply::serial_number() const {
  // @@protoc_insertion_point(field_get:ola.plugin.usbpro.Reply.serial_number)
  return _internal_serial_number();
}
inline void Reply::unsafe_arena_set_allocated_serial_number(
    ::ola::plugin::usbpro::SerialNumberReply* serial_number) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(serial_number_);
  }
  serial_number_ = serial_number;
  if (serial_number) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ola.plugin.usbpro.Reply.serial_number)
}
inline ::ola::plugin::usbpro::SerialNumberReply* Reply::release_serial_number() {
  auto temp = unsafe_arena_release_serial_number();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ola::plugin::usbpro::SerialNumberReply* Reply::unsafe_arena_release_serial_number() {
  // @@protoc_insertion_point(field_release:ola.plugin.usbpro.Reply.serial_number)
  _has_bits_[0] &= ~0x00000002u;
  ::ola::plugin::usbpro::SerialNumberReply* temp = serial_number_;
  serial_number_ = nullptr;
  return temp;
}
inline ::ola::plugin::usbpro::SerialNumberReply* Reply::_internal_mutable_serial_number() {
  _has_bits_[0] |= 0x00000002u;
  if (serial_number_ == nullptr) {
    auto* p = CreateMaybeMessage<::ola::plugin::usbpro::SerialNumberReply>(GetArena());
    serial_number_ = p;
  }
  return serial_number_;
}
inline ::ola::plugin::usbpro::SerialNumberReply* Reply::mutable_serial_number() {
  // @@protoc_insertion_point(field_mutable:ola.plugin.usbpro.Reply.serial_number)
  return _internal_mutable_serial_number();
}
inline void Reply::set_allocated_serial_number(::ola::plugin::usbpro::SerialNumberReply* serial_number) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete serial_number_;
  }
  if (serial_number) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(serial_number);
    if (message_arena != submessage_arena) {
      serial_number = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, serial_number, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  serial_number_ = serial_number;
  // @@protoc_insertion_point(field_set_allocated:ola.plugin.usbpro.Reply.serial_number)
}

// optional .ola.plugin.usbpro.PortAssignmentReply port_assignment = 4;
inline bool Reply::_internal_has_port_assignment() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || port_assignment_ != nullptr);
  return value;
}
inline bool Reply::has_port_assignment() const {
  return _internal_has_port_assignment();
}
inline void Reply::clear_port_assignment() {
  if (port_assignment_ != nullptr) port_assignment_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::ola::plugin::usbpro::PortAssignmentReply& Reply::_internal_port_assignment() const {
  const ::ola::plugin::usbpro::PortAssignmentReply* p = port_assignment_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ola::plugin::usbpro::PortAssignmentReply*>(
      &::ola::plugin::usbpro::_PortAssignmentReply_default_instance_);
}
inline const ::ola::plugin::usbpro::PortAssignmentReply& Reply::port_assignment() const {
  // @@protoc_insertion_point(field_get:ola.plugin.usbpro.Reply.port_assignment)
  return _internal_port_assignment();
}
inline void Reply::unsafe_arena_set_allocated_port_assignment(
    ::ola::plugin::usbpro::PortAssignmentReply* port_assignment) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(port_assignment_);
  }
  port_assignment_ = port_assignment;
  if (port_assignment) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ola.plugin.usbpro.Reply.port_assignment)
}
inline ::ola::plugin::usbpro::PortAssignmentReply* Reply::release_port_assignment() {
  auto temp = unsafe_arena_release_port_assignment();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ola::plugin::usbpro::PortAssignmentReply* Reply::unsafe_arena_release_port_assignment() {
  // @@protoc_insertion_point(field_release:ola.plugin.usbpro.Reply.port_assignment)
  _has_bits_[0] &= ~0x00000004u;
  ::ola::plugin::usbpro::PortAssignmentReply* temp = port_assignment_;
  port_assignment_ = nullptr;
  return temp;
}
inline ::ola::plugin::usbpro::PortAssignmentReply* Reply::_internal_mutable_port_assignment() {
  _has_bits_[0] |= 0x00000004u;
  if (port_assignment_ == nullptr) {
    auto* p = CreateMaybeMessage<::ola::plugin::usbpro::PortAssignmentReply>(GetArena());
    port_assignment_ = p;
  }
  return port_assignment_;
}
inline ::ola::plugin::usbpro::PortAssignmentReply* Reply::mutable_port_assignment() {
  // @@protoc_insertion_point(field_mutable:ola.plugin.usbpro.Reply.port_assignment)
  return _internal_mutable_port_assignment();
}
inline void Reply::set_allocated_port_assignment(::ola::plugin::usbpro::PortAssignmentReply* port_assignment) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete port_assignment_;
  }
  if (port_assignment) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(port_assignment);
    if (message_arena != submessage_arena) {
      port_assignment = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, port_assignment, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  port_assignment_ = port_assignment;
  // @@protoc_insertion_point(field_set_allocated:ola.plugin.usbpro.Reply.port_assignment)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace usbpro
}  // namespace plugin
}  // namespace ola

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::ola::plugin::usbpro::Request_RequestType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ola::plugin::usbpro::Request_RequestType>() {
  return ::ola::plugin::usbpro::Request_RequestType_descriptor();
}
template <> struct is_proto_enum< ::ola::plugin::usbpro::Reply_ReplyType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ola::plugin::usbpro::Reply_ReplyType>() {
  return ::ola::plugin::usbpro::Reply_ReplyType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_UsbProConfigMessages_2eproto
