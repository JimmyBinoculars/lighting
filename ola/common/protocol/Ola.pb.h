// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Ola.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Ola_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Ola_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Ola_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Ola_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[37]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Ola_2eproto;
namespace ola {
namespace proto {
class Ack;
class AckDefaultTypeInternal;
extern AckDefaultTypeInternal _Ack_default_instance_;
class DeviceConfigReply;
class DeviceConfigReplyDefaultTypeInternal;
extern DeviceConfigReplyDefaultTypeInternal _DeviceConfigReply_default_instance_;
class DeviceConfigRequest;
class DeviceConfigRequestDefaultTypeInternal;
extern DeviceConfigRequestDefaultTypeInternal _DeviceConfigRequest_default_instance_;
class DeviceInfo;
class DeviceInfoDefaultTypeInternal;
extern DeviceInfoDefaultTypeInternal _DeviceInfo_default_instance_;
class DeviceInfoReply;
class DeviceInfoReplyDefaultTypeInternal;
extern DeviceInfoReplyDefaultTypeInternal _DeviceInfoReply_default_instance_;
class DeviceInfoRequest;
class DeviceInfoRequestDefaultTypeInternal;
extern DeviceInfoRequestDefaultTypeInternal _DeviceInfoRequest_default_instance_;
class DiscoveryRequest;
class DiscoveryRequestDefaultTypeInternal;
extern DiscoveryRequestDefaultTypeInternal _DiscoveryRequest_default_instance_;
class DmxData;
class DmxDataDefaultTypeInternal;
extern DmxDataDefaultTypeInternal _DmxData_default_instance_;
class MergeModeRequest;
class MergeModeRequestDefaultTypeInternal;
extern MergeModeRequestDefaultTypeInternal _MergeModeRequest_default_instance_;
class OptionalUniverseRequest;
class OptionalUniverseRequestDefaultTypeInternal;
extern OptionalUniverseRequestDefaultTypeInternal _OptionalUniverseRequest_default_instance_;
class PatchPortRequest;
class PatchPortRequestDefaultTypeInternal;
extern PatchPortRequestDefaultTypeInternal _PatchPortRequest_default_instance_;
class PluginDescriptionReply;
class PluginDescriptionReplyDefaultTypeInternal;
extern PluginDescriptionReplyDefaultTypeInternal _PluginDescriptionReply_default_instance_;
class PluginDescriptionRequest;
class PluginDescriptionRequestDefaultTypeInternal;
extern PluginDescriptionRequestDefaultTypeInternal _PluginDescriptionRequest_default_instance_;
class PluginInfo;
class PluginInfoDefaultTypeInternal;
extern PluginInfoDefaultTypeInternal _PluginInfo_default_instance_;
class PluginListReply;
class PluginListReplyDefaultTypeInternal;
extern PluginListReplyDefaultTypeInternal _PluginListReply_default_instance_;
class PluginListRequest;
class PluginListRequestDefaultTypeInternal;
extern PluginListRequestDefaultTypeInternal _PluginListRequest_default_instance_;
class PluginReloadRequest;
class PluginReloadRequestDefaultTypeInternal;
extern PluginReloadRequestDefaultTypeInternal _PluginReloadRequest_default_instance_;
class PluginStateChangeRequest;
class PluginStateChangeRequestDefaultTypeInternal;
extern PluginStateChangeRequestDefaultTypeInternal _PluginStateChangeRequest_default_instance_;
class PluginStateReply;
class PluginStateReplyDefaultTypeInternal;
extern PluginStateReplyDefaultTypeInternal _PluginStateReply_default_instance_;
class PluginStateRequest;
class PluginStateRequestDefaultTypeInternal;
extern PluginStateRequestDefaultTypeInternal _PluginStateRequest_default_instance_;
class PortInfo;
class PortInfoDefaultTypeInternal;
extern PortInfoDefaultTypeInternal _PortInfo_default_instance_;
class PortPriorityRequest;
class PortPriorityRequestDefaultTypeInternal;
extern PortPriorityRequestDefaultTypeInternal _PortPriorityRequest_default_instance_;
class RDMDiscoveryRequest;
class RDMDiscoveryRequestDefaultTypeInternal;
extern RDMDiscoveryRequestDefaultTypeInternal _RDMDiscoveryRequest_default_instance_;
class RDMFrame;
class RDMFrameDefaultTypeInternal;
extern RDMFrameDefaultTypeInternal _RDMFrame_default_instance_;
class RDMFrameTiming;
class RDMFrameTimingDefaultTypeInternal;
extern RDMFrameTimingDefaultTypeInternal _RDMFrameTiming_default_instance_;
class RDMRequest;
class RDMRequestDefaultTypeInternal;
extern RDMRequestDefaultTypeInternal _RDMRequest_default_instance_;
class RDMRequestOverrideOptions;
class RDMRequestOverrideOptionsDefaultTypeInternal;
extern RDMRequestOverrideOptionsDefaultTypeInternal _RDMRequestOverrideOptions_default_instance_;
class RDMResponse;
class RDMResponseDefaultTypeInternal;
extern RDMResponseDefaultTypeInternal _RDMResponse_default_instance_;
class RegisterDmxRequest;
class RegisterDmxRequestDefaultTypeInternal;
extern RegisterDmxRequestDefaultTypeInternal _RegisterDmxRequest_default_instance_;
class STREAMING_NO_RESPONSE;
class STREAMING_NO_RESPONSEDefaultTypeInternal;
extern STREAMING_NO_RESPONSEDefaultTypeInternal _STREAMING_NO_RESPONSE_default_instance_;
class TimeCode;
class TimeCodeDefaultTypeInternal;
extern TimeCodeDefaultTypeInternal _TimeCode_default_instance_;
class UID;
class UIDDefaultTypeInternal;
extern UIDDefaultTypeInternal _UID_default_instance_;
class UIDListReply;
class UIDListReplyDefaultTypeInternal;
extern UIDListReplyDefaultTypeInternal _UIDListReply_default_instance_;
class UniverseInfo;
class UniverseInfoDefaultTypeInternal;
extern UniverseInfoDefaultTypeInternal _UniverseInfo_default_instance_;
class UniverseInfoReply;
class UniverseInfoReplyDefaultTypeInternal;
extern UniverseInfoReplyDefaultTypeInternal _UniverseInfoReply_default_instance_;
class UniverseNameRequest;
class UniverseNameRequestDefaultTypeInternal;
extern UniverseNameRequestDefaultTypeInternal _UniverseNameRequest_default_instance_;
class UniverseRequest;
class UniverseRequestDefaultTypeInternal;
extern UniverseRequestDefaultTypeInternal _UniverseRequest_default_instance_;
}  // namespace proto
}  // namespace ola
PROTOBUF_NAMESPACE_OPEN
template<> ::ola::proto::Ack* Arena::CreateMaybeMessage<::ola::proto::Ack>(Arena*);
template<> ::ola::proto::DeviceConfigReply* Arena::CreateMaybeMessage<::ola::proto::DeviceConfigReply>(Arena*);
template<> ::ola::proto::DeviceConfigRequest* Arena::CreateMaybeMessage<::ola::proto::DeviceConfigRequest>(Arena*);
template<> ::ola::proto::DeviceInfo* Arena::CreateMaybeMessage<::ola::proto::DeviceInfo>(Arena*);
template<> ::ola::proto::DeviceInfoReply* Arena::CreateMaybeMessage<::ola::proto::DeviceInfoReply>(Arena*);
template<> ::ola::proto::DeviceInfoRequest* Arena::CreateMaybeMessage<::ola::proto::DeviceInfoRequest>(Arena*);
template<> ::ola::proto::DiscoveryRequest* Arena::CreateMaybeMessage<::ola::proto::DiscoveryRequest>(Arena*);
template<> ::ola::proto::DmxData* Arena::CreateMaybeMessage<::ola::proto::DmxData>(Arena*);
template<> ::ola::proto::MergeModeRequest* Arena::CreateMaybeMessage<::ola::proto::MergeModeRequest>(Arena*);
template<> ::ola::proto::OptionalUniverseRequest* Arena::CreateMaybeMessage<::ola::proto::OptionalUniverseRequest>(Arena*);
template<> ::ola::proto::PatchPortRequest* Arena::CreateMaybeMessage<::ola::proto::PatchPortRequest>(Arena*);
template<> ::ola::proto::PluginDescriptionReply* Arena::CreateMaybeMessage<::ola::proto::PluginDescriptionReply>(Arena*);
template<> ::ola::proto::PluginDescriptionRequest* Arena::CreateMaybeMessage<::ola::proto::PluginDescriptionRequest>(Arena*);
template<> ::ola::proto::PluginInfo* Arena::CreateMaybeMessage<::ola::proto::PluginInfo>(Arena*);
template<> ::ola::proto::PluginListReply* Arena::CreateMaybeMessage<::ola::proto::PluginListReply>(Arena*);
template<> ::ola::proto::PluginListRequest* Arena::CreateMaybeMessage<::ola::proto::PluginListRequest>(Arena*);
template<> ::ola::proto::PluginReloadRequest* Arena::CreateMaybeMessage<::ola::proto::PluginReloadRequest>(Arena*);
template<> ::ola::proto::PluginStateChangeRequest* Arena::CreateMaybeMessage<::ola::proto::PluginStateChangeRequest>(Arena*);
template<> ::ola::proto::PluginStateReply* Arena::CreateMaybeMessage<::ola::proto::PluginStateReply>(Arena*);
template<> ::ola::proto::PluginStateRequest* Arena::CreateMaybeMessage<::ola::proto::PluginStateRequest>(Arena*);
template<> ::ola::proto::PortInfo* Arena::CreateMaybeMessage<::ola::proto::PortInfo>(Arena*);
template<> ::ola::proto::PortPriorityRequest* Arena::CreateMaybeMessage<::ola::proto::PortPriorityRequest>(Arena*);
template<> ::ola::proto::RDMDiscoveryRequest* Arena::CreateMaybeMessage<::ola::proto::RDMDiscoveryRequest>(Arena*);
template<> ::ola::proto::RDMFrame* Arena::CreateMaybeMessage<::ola::proto::RDMFrame>(Arena*);
template<> ::ola::proto::RDMFrameTiming* Arena::CreateMaybeMessage<::ola::proto::RDMFrameTiming>(Arena*);
template<> ::ola::proto::RDMRequest* Arena::CreateMaybeMessage<::ola::proto::RDMRequest>(Arena*);
template<> ::ola::proto::RDMRequestOverrideOptions* Arena::CreateMaybeMessage<::ola::proto::RDMRequestOverrideOptions>(Arena*);
template<> ::ola::proto::RDMResponse* Arena::CreateMaybeMessage<::ola::proto::RDMResponse>(Arena*);
template<> ::ola::proto::RegisterDmxRequest* Arena::CreateMaybeMessage<::ola::proto::RegisterDmxRequest>(Arena*);
template<> ::ola::proto::STREAMING_NO_RESPONSE* Arena::CreateMaybeMessage<::ola::proto::STREAMING_NO_RESPONSE>(Arena*);
template<> ::ola::proto::TimeCode* Arena::CreateMaybeMessage<::ola::proto::TimeCode>(Arena*);
template<> ::ola::proto::UID* Arena::CreateMaybeMessage<::ola::proto::UID>(Arena*);
template<> ::ola::proto::UIDListReply* Arena::CreateMaybeMessage<::ola::proto::UIDListReply>(Arena*);
template<> ::ola::proto::UniverseInfo* Arena::CreateMaybeMessage<::ola::proto::UniverseInfo>(Arena*);
template<> ::ola::proto::UniverseInfoReply* Arena::CreateMaybeMessage<::ola::proto::UniverseInfoReply>(Arena*);
template<> ::ola::proto::UniverseNameRequest* Arena::CreateMaybeMessage<::ola::proto::UniverseNameRequest>(Arena*);
template<> ::ola::proto::UniverseRequest* Arena::CreateMaybeMessage<::ola::proto::UniverseRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ola {
namespace proto {

enum RegisterAction : int {
  REGISTER = 1,
  UNREGISTER = 2
};
bool RegisterAction_IsValid(int value);
constexpr RegisterAction RegisterAction_MIN = REGISTER;
constexpr RegisterAction RegisterAction_MAX = UNREGISTER;
constexpr int RegisterAction_ARRAYSIZE = RegisterAction_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RegisterAction_descriptor();
template<typename T>
inline const std::string& RegisterAction_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RegisterAction>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RegisterAction_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RegisterAction_descriptor(), enum_t_value);
}
inline bool RegisterAction_Parse(
    const std::string& name, RegisterAction* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RegisterAction>(
    RegisterAction_descriptor(), name, value);
}
enum PatchAction : int {
  PATCH = 1,
  UNPATCH = 2
};
bool PatchAction_IsValid(int value);
constexpr PatchAction PatchAction_MIN = PATCH;
constexpr PatchAction PatchAction_MAX = UNPATCH;
constexpr int PatchAction_ARRAYSIZE = PatchAction_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PatchAction_descriptor();
template<typename T>
inline const std::string& PatchAction_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PatchAction>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PatchAction_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PatchAction_descriptor(), enum_t_value);
}
inline bool PatchAction_Parse(
    const std::string& name, PatchAction* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PatchAction>(
    PatchAction_descriptor(), name, value);
}
enum MergeMode : int {
  HTP = 1,
  LTP = 2
};
bool MergeMode_IsValid(int value);
constexpr MergeMode MergeMode_MIN = HTP;
constexpr MergeMode MergeMode_MAX = LTP;
constexpr int MergeMode_ARRAYSIZE = MergeMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MergeMode_descriptor();
template<typename T>
inline const std::string& MergeMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MergeMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MergeMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MergeMode_descriptor(), enum_t_value);
}
inline bool MergeMode_Parse(
    const std::string& name, MergeMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MergeMode>(
    MergeMode_descriptor(), name, value);
}
enum PluginIds : int {
  OLA_PLUGIN_ALL = 0,
  OLA_PLUGIN_DUMMY = 1,
  OLA_PLUGIN_ARTNET = 2,
  OLA_PLUGIN_SHOWNET = 3,
  OLA_PLUGIN_ESPNET = 4,
  OLA_PLUGIN_USBPRO = 5,
  OLA_PLUGIN_OPENDMX = 6,
  OLA_PLUGIN_SANDNET = 7,
  OLA_PLUGIN_STAGEPROFI = 8,
  OLA_PLUGIN_PATHPORT = 9,
  OLA_PLUGIN_DMX4LINUX = 10,
  OLA_PLUGIN_E131 = 11,
  OLA_PLUGIN_USBDMX = 12,
  OLA_PLUGIN_FTDIDMX = 13,
  OLA_PLUGIN_OSC = 14,
  OLA_PLUGIN_SPI = 15,
  OLA_PLUGIN_KINET = 16,
  OLA_PLUGIN_KARATE = 17,
  OLA_PLUGIN_MILINST = 18,
  OLA_PLUGIN_RENARD = 19,
  OLA_PLUGIN_UARTDMX = 20,
  OLA_PLUGIN_OPENPIXELCONTROL = 21,
  OLA_PLUGIN_GPIO = 22,
  OLA_PLUGIN_SPIDMX = 23,
  OLA_PLUGIN_NANOLEAF = 24
};
bool PluginIds_IsValid(int value);
constexpr PluginIds PluginIds_MIN = OLA_PLUGIN_ALL;
constexpr PluginIds PluginIds_MAX = OLA_PLUGIN_NANOLEAF;
constexpr int PluginIds_ARRAYSIZE = PluginIds_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PluginIds_descriptor();
template<typename T>
inline const std::string& PluginIds_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PluginIds>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PluginIds_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PluginIds_descriptor(), enum_t_value);
}
inline bool PluginIds_Parse(
    const std::string& name, PluginIds* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PluginIds>(
    PluginIds_descriptor(), name, value);
}
enum RDMResponseCode : int {
  RDM_COMPLETED_OK = 0,
  RDM_WAS_BROADCAST = 1,
  RDM_FAILED_TO_SEND = 2,
  RDM_TIMEOUT = 3,
  RDM_INVALID_RESPONSE = 4,
  RDM_UNKNOWN_UID = 5,
  RDM_CHECKSUM_INCORRECT = 6,
  RDM_TRANSACTION_MISMATCH = 7,
  RDM_SUB_DEVICE_MISMATCH = 8,
  RDM_SRC_UID_MISMATCH = 9,
  RDM_DEST_UID_MISMATCH = 10,
  RDM_WRONG_SUB_START_CODE = 11,
  RDM_PACKET_TOO_SHORT = 12,
  RDM_PACKET_LENGTH_MISMATCH = 13,
  RDM_PARAM_LENGTH_MISMATCH = 14,
  RDM_INVALID_COMMAND_CLASS = 15,
  RDM_COMMAND_CLASS_MISMATCH = 16,
  RDM_INVALID_RESPONSE_TYPE = 17,
  RDM_PLUGIN_DISCOVERY_NOT_SUPPORTED = 18,
  RDM_DUB_RESPONSE = 19
};
bool RDMResponseCode_IsValid(int value);
constexpr RDMResponseCode RDMResponseCode_MIN = RDM_COMPLETED_OK;
constexpr RDMResponseCode RDMResponseCode_MAX = RDM_DUB_RESPONSE;
constexpr int RDMResponseCode_ARRAYSIZE = RDMResponseCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RDMResponseCode_descriptor();
template<typename T>
inline const std::string& RDMResponseCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RDMResponseCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RDMResponseCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RDMResponseCode_descriptor(), enum_t_value);
}
inline bool RDMResponseCode_Parse(
    const std::string& name, RDMResponseCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RDMResponseCode>(
    RDMResponseCode_descriptor(), name, value);
}
enum RDMResponseType : int {
  RDM_ACK = 0,
  RDM_ACK_TIMER = 1,
  RDM_NACK_REASON = 2
};
bool RDMResponseType_IsValid(int value);
constexpr RDMResponseType RDMResponseType_MIN = RDM_ACK;
constexpr RDMResponseType RDMResponseType_MAX = RDM_NACK_REASON;
constexpr int RDMResponseType_ARRAYSIZE = RDMResponseType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RDMResponseType_descriptor();
template<typename T>
inline const std::string& RDMResponseType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RDMResponseType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RDMResponseType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RDMResponseType_descriptor(), enum_t_value);
}
inline bool RDMResponseType_Parse(
    const std::string& name, RDMResponseType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RDMResponseType>(
    RDMResponseType_descriptor(), name, value);
}
enum RDMCommandClass : int {
  RDM_GET_RESPONSE = 0,
  RDM_SET_RESPONSE = 1,
  RDM_DISCOVERY_RESPONSE = 2
};
bool RDMCommandClass_IsValid(int value);
constexpr RDMCommandClass RDMCommandClass_MIN = RDM_GET_RESPONSE;
constexpr RDMCommandClass RDMCommandClass_MAX = RDM_DISCOVERY_RESPONSE;
constexpr int RDMCommandClass_ARRAYSIZE = RDMCommandClass_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RDMCommandClass_descriptor();
template<typename T>
inline const std::string& RDMCommandClass_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RDMCommandClass>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RDMCommandClass_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RDMCommandClass_descriptor(), enum_t_value);
}
inline bool RDMCommandClass_Parse(
    const std::string& name, RDMCommandClass* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RDMCommandClass>(
    RDMCommandClass_descriptor(), name, value);
}
enum TimeCodeType : int {
  TIMECODE_FILM = 0,
  TIMECODE_EBU = 1,
  TIMECODE_DF = 2,
  TIMECODE_SMPTE = 3
};
bool TimeCodeType_IsValid(int value);
constexpr TimeCodeType TimeCodeType_MIN = TIMECODE_FILM;
constexpr TimeCodeType TimeCodeType_MAX = TIMECODE_SMPTE;
constexpr int TimeCodeType_ARRAYSIZE = TimeCodeType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TimeCodeType_descriptor();
template<typename T>
inline const std::string& TimeCodeType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TimeCodeType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TimeCodeType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TimeCodeType_descriptor(), enum_t_value);
}
inline bool TimeCodeType_Parse(
    const std::string& name, TimeCodeType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TimeCodeType>(
    TimeCodeType_descriptor(), name, value);
}
// ===================================================================

class STREAMING_NO_RESPONSE PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ola.proto.STREAMING_NO_RESPONSE) */ {
 public:
  inline STREAMING_NO_RESPONSE() : STREAMING_NO_RESPONSE(nullptr) {};
  virtual ~STREAMING_NO_RESPONSE();

  STREAMING_NO_RESPONSE(const STREAMING_NO_RESPONSE& from);
  STREAMING_NO_RESPONSE(STREAMING_NO_RESPONSE&& from) noexcept
    : STREAMING_NO_RESPONSE() {
    *this = ::std::move(from);
  }

  inline STREAMING_NO_RESPONSE& operator=(const STREAMING_NO_RESPONSE& from) {
    CopyFrom(from);
    return *this;
  }
  inline STREAMING_NO_RESPONSE& operator=(STREAMING_NO_RESPONSE&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const STREAMING_NO_RESPONSE& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const STREAMING_NO_RESPONSE* internal_default_instance() {
    return reinterpret_cast<const STREAMING_NO_RESPONSE*>(
               &_STREAMING_NO_RESPONSE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(STREAMING_NO_RESPONSE& a, STREAMING_NO_RESPONSE& b) {
    a.Swap(&b);
  }
  inline void Swap(STREAMING_NO_RESPONSE* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(STREAMING_NO_RESPONSE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline STREAMING_NO_RESPONSE* New() const final {
    return CreateMaybeMessage<STREAMING_NO_RESPONSE>(nullptr);
  }

  STREAMING_NO_RESPONSE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<STREAMING_NO_RESPONSE>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const STREAMING_NO_RESPONSE& from);
  void MergeFrom(const STREAMING_NO_RESPONSE& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(STREAMING_NO_RESPONSE* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ola.proto.STREAMING_NO_RESPONSE";
  }
  protected:
  explicit STREAMING_NO_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Ola_2eproto);
    return ::descriptor_table_Ola_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ola.proto.STREAMING_NO_RESPONSE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Ola_2eproto;
};
// -------------------------------------------------------------------

class Ack PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ola.proto.Ack) */ {
 public:
  inline Ack() : Ack(nullptr) {};
  virtual ~Ack();

  Ack(const Ack& from);
  Ack(Ack&& from) noexcept
    : Ack() {
    *this = ::std::move(from);
  }

  inline Ack& operator=(const Ack& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ack& operator=(Ack&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Ack& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ack* internal_default_instance() {
    return reinterpret_cast<const Ack*>(
               &_Ack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Ack& a, Ack& b) {
    a.Swap(&b);
  }
  inline void Swap(Ack* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ack* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Ack* New() const final {
    return CreateMaybeMessage<Ack>(nullptr);
  }

  Ack* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Ack>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Ack& from);
  void MergeFrom(const Ack& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ack* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ola.proto.Ack";
  }
  protected:
  explicit Ack(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Ola_2eproto);
    return ::descriptor_table_Ola_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ola.proto.Ack)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Ola_2eproto;
};
// -------------------------------------------------------------------

class PluginListRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ola.proto.PluginListRequest) */ {
 public:
  inline PluginListRequest() : PluginListRequest(nullptr) {};
  virtual ~PluginListRequest();

  PluginListRequest(const PluginListRequest& from);
  PluginListRequest(PluginListRequest&& from) noexcept
    : PluginListRequest() {
    *this = ::std::move(from);
  }

  inline PluginListRequest& operator=(const PluginListRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PluginListRequest& operator=(PluginListRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PluginListRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PluginListRequest* internal_default_instance() {
    return reinterpret_cast<const PluginListRequest*>(
               &_PluginListRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PluginListRequest& a, PluginListRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PluginListRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PluginListRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PluginListRequest* New() const final {
    return CreateMaybeMessage<PluginListRequest>(nullptr);
  }

  PluginListRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PluginListRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PluginListRequest& from);
  void MergeFrom(const PluginListRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PluginListRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ola.proto.PluginListRequest";
  }
  protected:
  explicit PluginListRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Ola_2eproto);
    return ::descriptor_table_Ola_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ola.proto.PluginListRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Ola_2eproto;
};
// -------------------------------------------------------------------

class PluginReloadRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ola.proto.PluginReloadRequest) */ {
 public:
  inline PluginReloadRequest() : PluginReloadRequest(nullptr) {};
  virtual ~PluginReloadRequest();

  PluginReloadRequest(const PluginReloadRequest& from);
  PluginReloadRequest(PluginReloadRequest&& from) noexcept
    : PluginReloadRequest() {
    *this = ::std::move(from);
  }

  inline PluginReloadRequest& operator=(const PluginReloadRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PluginReloadRequest& operator=(PluginReloadRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PluginReloadRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PluginReloadRequest* internal_default_instance() {
    return reinterpret_cast<const PluginReloadRequest*>(
               &_PluginReloadRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PluginReloadRequest& a, PluginReloadRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PluginReloadRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PluginReloadRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PluginReloadRequest* New() const final {
    return CreateMaybeMessage<PluginReloadRequest>(nullptr);
  }

  PluginReloadRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PluginReloadRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PluginReloadRequest& from);
  void MergeFrom(const PluginReloadRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PluginReloadRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ola.proto.PluginReloadRequest";
  }
  protected:
  explicit PluginReloadRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Ola_2eproto);
    return ::descriptor_table_Ola_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ola.proto.PluginReloadRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Ola_2eproto;
};
// -------------------------------------------------------------------

class PluginInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ola.proto.PluginInfo) */ {
 public:
  inline PluginInfo() : PluginInfo(nullptr) {};
  virtual ~PluginInfo();

  PluginInfo(const PluginInfo& from);
  PluginInfo(PluginInfo&& from) noexcept
    : PluginInfo() {
    *this = ::std::move(from);
  }

  inline PluginInfo& operator=(const PluginInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline PluginInfo& operator=(PluginInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PluginInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PluginInfo* internal_default_instance() {
    return reinterpret_cast<const PluginInfo*>(
               &_PluginInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PluginInfo& a, PluginInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(PluginInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PluginInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PluginInfo* New() const final {
    return CreateMaybeMessage<PluginInfo>(nullptr);
  }

  PluginInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PluginInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PluginInfo& from);
  void MergeFrom(const PluginInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PluginInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ola.proto.PluginInfo";
  }
  protected:
  explicit PluginInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Ola_2eproto);
    return ::descriptor_table_Ola_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kPluginIdFieldNumber = 1,
    kActiveFieldNumber = 3,
    kEnabledFieldNumber = 4,
  };
  // required string name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // required int32 plugin_id = 1;
  bool has_plugin_id() const;
  private:
  bool _internal_has_plugin_id() const;
  public:
  void clear_plugin_id();
  ::PROTOBUF_NAMESPACE_ID::int32 plugin_id() const;
  void set_plugin_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_plugin_id() const;
  void _internal_set_plugin_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required bool active = 3;
  bool has_active() const;
  private:
  bool _internal_has_active() const;
  public:
  void clear_active();
  bool active() const;
  void set_active(bool value);
  private:
  bool _internal_active() const;
  void _internal_set_active(bool value);
  public:

  // optional bool enabled = 4;
  bool has_enabled() const;
  private:
  bool _internal_has_enabled() const;
  public:
  void clear_enabled();
  bool enabled() const;
  void set_enabled(bool value);
  private:
  bool _internal_enabled() const;
  void _internal_set_enabled(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ola.proto.PluginInfo)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int32 plugin_id_;
  bool active_;
  bool enabled_;
  friend struct ::TableStruct_Ola_2eproto;
};
// -------------------------------------------------------------------

class PluginListReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ola.proto.PluginListReply) */ {
 public:
  inline PluginListReply() : PluginListReply(nullptr) {};
  virtual ~PluginListReply();

  PluginListReply(const PluginListReply& from);
  PluginListReply(PluginListReply&& from) noexcept
    : PluginListReply() {
    *this = ::std::move(from);
  }

  inline PluginListReply& operator=(const PluginListReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline PluginListReply& operator=(PluginListReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PluginListReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PluginListReply* internal_default_instance() {
    return reinterpret_cast<const PluginListReply*>(
               &_PluginListReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(PluginListReply& a, PluginListReply& b) {
    a.Swap(&b);
  }
  inline void Swap(PluginListReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PluginListReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PluginListReply* New() const final {
    return CreateMaybeMessage<PluginListReply>(nullptr);
  }

  PluginListReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PluginListReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PluginListReply& from);
  void MergeFrom(const PluginListReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PluginListReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ola.proto.PluginListReply";
  }
  protected:
  explicit PluginListReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Ola_2eproto);
    return ::descriptor_table_Ola_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPluginFieldNumber = 1,
  };
  // repeated .ola.proto.PluginInfo plugin = 1;
  int plugin_size() const;
  private:
  int _internal_plugin_size() const;
  public:
  void clear_plugin();
  ::ola::proto::PluginInfo* mutable_plugin(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ola::proto::PluginInfo >*
      mutable_plugin();
  private:
  const ::ola::proto::PluginInfo& _internal_plugin(int index) const;
  ::ola::proto::PluginInfo* _internal_add_plugin();
  public:
  const ::ola::proto::PluginInfo& plugin(int index) const;
  ::ola::proto::PluginInfo* add_plugin();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ola::proto::PluginInfo >&
      plugin() const;

  // @@protoc_insertion_point(class_scope:ola.proto.PluginListReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ola::proto::PluginInfo > plugin_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Ola_2eproto;
};
// -------------------------------------------------------------------

class PluginDescriptionRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ola.proto.PluginDescriptionRequest) */ {
 public:
  inline PluginDescriptionRequest() : PluginDescriptionRequest(nullptr) {};
  virtual ~PluginDescriptionRequest();

  PluginDescriptionRequest(const PluginDescriptionRequest& from);
  PluginDescriptionRequest(PluginDescriptionRequest&& from) noexcept
    : PluginDescriptionRequest() {
    *this = ::std::move(from);
  }

  inline PluginDescriptionRequest& operator=(const PluginDescriptionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PluginDescriptionRequest& operator=(PluginDescriptionRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PluginDescriptionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PluginDescriptionRequest* internal_default_instance() {
    return reinterpret_cast<const PluginDescriptionRequest*>(
               &_PluginDescriptionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(PluginDescriptionRequest& a, PluginDescriptionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PluginDescriptionRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PluginDescriptionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PluginDescriptionRequest* New() const final {
    return CreateMaybeMessage<PluginDescriptionRequest>(nullptr);
  }

  PluginDescriptionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PluginDescriptionRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PluginDescriptionRequest& from);
  void MergeFrom(const PluginDescriptionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PluginDescriptionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ola.proto.PluginDescriptionRequest";
  }
  protected:
  explicit PluginDescriptionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Ola_2eproto);
    return ::descriptor_table_Ola_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPluginIdFieldNumber = 1,
  };
  // required int32 plugin_id = 1;
  bool has_plugin_id() const;
  private:
  bool _internal_has_plugin_id() const;
  public:
  void clear_plugin_id();
  ::PROTOBUF_NAMESPACE_ID::int32 plugin_id() const;
  void set_plugin_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_plugin_id() const;
  void _internal_set_plugin_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ola.proto.PluginDescriptionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 plugin_id_;
  friend struct ::TableStruct_Ola_2eproto;
};
// -------------------------------------------------------------------

class PluginDescriptionReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ola.proto.PluginDescriptionReply) */ {
 public:
  inline PluginDescriptionReply() : PluginDescriptionReply(nullptr) {};
  virtual ~PluginDescriptionReply();

  PluginDescriptionReply(const PluginDescriptionReply& from);
  PluginDescriptionReply(PluginDescriptionReply&& from) noexcept
    : PluginDescriptionReply() {
    *this = ::std::move(from);
  }

  inline PluginDescriptionReply& operator=(const PluginDescriptionReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline PluginDescriptionReply& operator=(PluginDescriptionReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PluginDescriptionReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PluginDescriptionReply* internal_default_instance() {
    return reinterpret_cast<const PluginDescriptionReply*>(
               &_PluginDescriptionReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(PluginDescriptionReply& a, PluginDescriptionReply& b) {
    a.Swap(&b);
  }
  inline void Swap(PluginDescriptionReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PluginDescriptionReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PluginDescriptionReply* New() const final {
    return CreateMaybeMessage<PluginDescriptionReply>(nullptr);
  }

  PluginDescriptionReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PluginDescriptionReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PluginDescriptionReply& from);
  void MergeFrom(const PluginDescriptionReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PluginDescriptionReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ola.proto.PluginDescriptionReply";
  }
  protected:
  explicit PluginDescriptionReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Ola_2eproto);
    return ::descriptor_table_Ola_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kDescriptionFieldNumber = 2,
  };
  // required string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // required string description = 2;
  bool has_description() const;
  private:
  bool _internal_has_description() const;
  public:
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_description();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_description(
      std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // @@protoc_insertion_point(class_scope:ola.proto.PluginDescriptionReply)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  friend struct ::TableStruct_Ola_2eproto;
};
// -------------------------------------------------------------------

class PluginStateRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ola.proto.PluginStateRequest) */ {
 public:
  inline PluginStateRequest() : PluginStateRequest(nullptr) {};
  virtual ~PluginStateRequest();

  PluginStateRequest(const PluginStateRequest& from);
  PluginStateRequest(PluginStateRequest&& from) noexcept
    : PluginStateRequest() {
    *this = ::std::move(from);
  }

  inline PluginStateRequest& operator=(const PluginStateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PluginStateRequest& operator=(PluginStateRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PluginStateRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PluginStateRequest* internal_default_instance() {
    return reinterpret_cast<const PluginStateRequest*>(
               &_PluginStateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(PluginStateRequest& a, PluginStateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PluginStateRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PluginStateRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PluginStateRequest* New() const final {
    return CreateMaybeMessage<PluginStateRequest>(nullptr);
  }

  PluginStateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PluginStateRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PluginStateRequest& from);
  void MergeFrom(const PluginStateRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PluginStateRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ola.proto.PluginStateRequest";
  }
  protected:
  explicit PluginStateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Ola_2eproto);
    return ::descriptor_table_Ola_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPluginIdFieldNumber = 1,
  };
  // required int32 plugin_id = 1;
  bool has_plugin_id() const;
  private:
  bool _internal_has_plugin_id() const;
  public:
  void clear_plugin_id();
  ::PROTOBUF_NAMESPACE_ID::int32 plugin_id() const;
  void set_plugin_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_plugin_id() const;
  void _internal_set_plugin_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ola.proto.PluginStateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 plugin_id_;
  friend struct ::TableStruct_Ola_2eproto;
};
// -------------------------------------------------------------------

class PluginStateReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ola.proto.PluginStateReply) */ {
 public:
  inline PluginStateReply() : PluginStateReply(nullptr) {};
  virtual ~PluginStateReply();

  PluginStateReply(const PluginStateReply& from);
  PluginStateReply(PluginStateReply&& from) noexcept
    : PluginStateReply() {
    *this = ::std::move(from);
  }

  inline PluginStateReply& operator=(const PluginStateReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline PluginStateReply& operator=(PluginStateReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PluginStateReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PluginStateReply* internal_default_instance() {
    return reinterpret_cast<const PluginStateReply*>(
               &_PluginStateReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(PluginStateReply& a, PluginStateReply& b) {
    a.Swap(&b);
  }
  inline void Swap(PluginStateReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PluginStateReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PluginStateReply* New() const final {
    return CreateMaybeMessage<PluginStateReply>(nullptr);
  }

  PluginStateReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PluginStateReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PluginStateReply& from);
  void MergeFrom(const PluginStateReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PluginStateReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ola.proto.PluginStateReply";
  }
  protected:
  explicit PluginStateReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Ola_2eproto);
    return ::descriptor_table_Ola_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConflictsWithFieldNumber = 5,
    kNameFieldNumber = 1,
    kPreferencesSourceFieldNumber = 4,
    kEnabledFieldNumber = 2,
    kActiveFieldNumber = 3,
  };
  // repeated .ola.proto.PluginInfo conflicts_with = 5;
  int conflicts_with_size() const;
  private:
  int _internal_conflicts_with_size() const;
  public:
  void clear_conflicts_with();
  ::ola::proto::PluginInfo* mutable_conflicts_with(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ola::proto::PluginInfo >*
      mutable_conflicts_with();
  private:
  const ::ola::proto::PluginInfo& _internal_conflicts_with(int index) const;
  ::ola::proto::PluginInfo* _internal_add_conflicts_with();
  public:
  const ::ola::proto::PluginInfo& conflicts_with(int index) const;
  ::ola::proto::PluginInfo* add_conflicts_with();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ola::proto::PluginInfo >&
      conflicts_with() const;

  // required string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // required string preferences_source = 4;
  bool has_preferences_source() const;
  private:
  bool _internal_has_preferences_source() const;
  public:
  void clear_preferences_source();
  const std::string& preferences_source() const;
  void set_preferences_source(const std::string& value);
  void set_preferences_source(std::string&& value);
  void set_preferences_source(const char* value);
  void set_preferences_source(const char* value, size_t size);
  std::string* mutable_preferences_source();
  std::string* release_preferences_source();
  void set_allocated_preferences_source(std::string* preferences_source);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_preferences_source();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_preferences_source(
      std::string* preferences_source);
  private:
  const std::string& _internal_preferences_source() const;
  void _internal_set_preferences_source(const std::string& value);
  std::string* _internal_mutable_preferences_source();
  public:

  // required bool enabled = 2;
  bool has_enabled() const;
  private:
  bool _internal_has_enabled() const;
  public:
  void clear_enabled();
  bool enabled() const;
  void set_enabled(bool value);
  private:
  bool _internal_enabled() const;
  void _internal_set_enabled(bool value);
  public:

  // required bool active = 3;
  bool has_active() const;
  private:
  bool _internal_has_active() const;
  public:
  void clear_active();
  bool active() const;
  void set_active(bool value);
  private:
  bool _internal_active() const;
  void _internal_set_active(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ola.proto.PluginStateReply)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ola::proto::PluginInfo > conflicts_with_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr preferences_source_;
  bool enabled_;
  bool active_;
  friend struct ::TableStruct_Ola_2eproto;
};
// -------------------------------------------------------------------

class PluginStateChangeRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ola.proto.PluginStateChangeRequest) */ {
 public:
  inline PluginStateChangeRequest() : PluginStateChangeRequest(nullptr) {};
  virtual ~PluginStateChangeRequest();

  PluginStateChangeRequest(const PluginStateChangeRequest& from);
  PluginStateChangeRequest(PluginStateChangeRequest&& from) noexcept
    : PluginStateChangeRequest() {
    *this = ::std::move(from);
  }

  inline PluginStateChangeRequest& operator=(const PluginStateChangeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PluginStateChangeRequest& operator=(PluginStateChangeRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PluginStateChangeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PluginStateChangeRequest* internal_default_instance() {
    return reinterpret_cast<const PluginStateChangeRequest*>(
               &_PluginStateChangeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(PluginStateChangeRequest& a, PluginStateChangeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PluginStateChangeRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PluginStateChangeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PluginStateChangeRequest* New() const final {
    return CreateMaybeMessage<PluginStateChangeRequest>(nullptr);
  }

  PluginStateChangeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PluginStateChangeRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PluginStateChangeRequest& from);
  void MergeFrom(const PluginStateChangeRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PluginStateChangeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ola.proto.PluginStateChangeRequest";
  }
  protected:
  explicit PluginStateChangeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Ola_2eproto);
    return ::descriptor_table_Ola_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPluginIdFieldNumber = 1,
    kEnabledFieldNumber = 2,
  };
  // required int32 plugin_id = 1;
  bool has_plugin_id() const;
  private:
  bool _internal_has_plugin_id() const;
  public:
  void clear_plugin_id();
  ::PROTOBUF_NAMESPACE_ID::int32 plugin_id() const;
  void set_plugin_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_plugin_id() const;
  void _internal_set_plugin_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required bool enabled = 2;
  bool has_enabled() const;
  private:
  bool _internal_has_enabled() const;
  public:
  void clear_enabled();
  bool enabled() const;
  void set_enabled(bool value);
  private:
  bool _internal_enabled() const;
  void _internal_set_enabled(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ola.proto.PluginStateChangeRequest)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 plugin_id_;
  bool enabled_;
  friend struct ::TableStruct_Ola_2eproto;
};
// -------------------------------------------------------------------

class DeviceInfoRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ola.proto.DeviceInfoRequest) */ {
 public:
  inline DeviceInfoRequest() : DeviceInfoRequest(nullptr) {};
  virtual ~DeviceInfoRequest();

  DeviceInfoRequest(const DeviceInfoRequest& from);
  DeviceInfoRequest(DeviceInfoRequest&& from) noexcept
    : DeviceInfoRequest() {
    *this = ::std::move(from);
  }

  inline DeviceInfoRequest& operator=(const DeviceInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceInfoRequest& operator=(DeviceInfoRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeviceInfoRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeviceInfoRequest* internal_default_instance() {
    return reinterpret_cast<const DeviceInfoRequest*>(
               &_DeviceInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(DeviceInfoRequest& a, DeviceInfoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceInfoRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceInfoRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeviceInfoRequest* New() const final {
    return CreateMaybeMessage<DeviceInfoRequest>(nullptr);
  }

  DeviceInfoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeviceInfoRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeviceInfoRequest& from);
  void MergeFrom(const DeviceInfoRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeviceInfoRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ola.proto.DeviceInfoRequest";
  }
  protected:
  explicit DeviceInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Ola_2eproto);
    return ::descriptor_table_Ola_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPluginIdFieldNumber = 1,
  };
  // optional int32 plugin_id = 1;
  bool has_plugin_id() const;
  private:
  bool _internal_has_plugin_id() const;
  public:
  void clear_plugin_id();
  ::PROTOBUF_NAMESPACE_ID::int32 plugin_id() const;
  void set_plugin_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_plugin_id() const;
  void _internal_set_plugin_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ola.proto.DeviceInfoRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 plugin_id_;
  friend struct ::TableStruct_Ola_2eproto;
};
// -------------------------------------------------------------------

class PortInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ola.proto.PortInfo) */ {
 public:
  inline PortInfo() : PortInfo(nullptr) {};
  virtual ~PortInfo();

  PortInfo(const PortInfo& from);
  PortInfo(PortInfo&& from) noexcept
    : PortInfo() {
    *this = ::std::move(from);
  }

  inline PortInfo& operator=(const PortInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline PortInfo& operator=(PortInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PortInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PortInfo* internal_default_instance() {
    return reinterpret_cast<const PortInfo*>(
               &_PortInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(PortInfo& a, PortInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(PortInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PortInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PortInfo* New() const final {
    return CreateMaybeMessage<PortInfo>(nullptr);
  }

  PortInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PortInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PortInfo& from);
  void MergeFrom(const PortInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PortInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ola.proto.PortInfo";
  }
  protected:
  explicit PortInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Ola_2eproto);
    return ::descriptor_table_Ola_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDescriptionFieldNumber = 5,
    kPortIdFieldNumber = 1,
    kPriorityCapabilityFieldNumber = 2,
    kUniverseFieldNumber = 3,
    kPriorityModeFieldNumber = 6,
    kActiveFieldNumber = 4,
    kSupportsRdmFieldNumber = 8,
    kPriorityFieldNumber = 7,
  };
  // required string description = 5;
  bool has_description() const;
  private:
  bool _internal_has_description() const;
  public:
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_description();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_description(
      std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // required int32 port_id = 1;
  bool has_port_id() const;
  private:
  bool _internal_has_port_id() const;
  public:
  void clear_port_id();
  ::PROTOBUF_NAMESPACE_ID::int32 port_id() const;
  void set_port_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_port_id() const;
  void _internal_set_port_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 priority_capability = 2;
  bool has_priority_capability() const;
  private:
  bool _internal_has_priority_capability() const;
  public:
  void clear_priority_capability();
  ::PROTOBUF_NAMESPACE_ID::int32 priority_capability() const;
  void set_priority_capability(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_priority_capability() const;
  void _internal_set_priority_capability(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 universe = 3;
  bool has_universe() const;
  private:
  bool _internal_has_universe() const;
  public:
  void clear_universe();
  ::PROTOBUF_NAMESPACE_ID::int32 universe() const;
  void set_universe(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_universe() const;
  void _internal_set_universe(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 priority_mode = 6;
  bool has_priority_mode() const;
  private:
  bool _internal_has_priority_mode() const;
  public:
  void clear_priority_mode();
  ::PROTOBUF_NAMESPACE_ID::int32 priority_mode() const;
  void set_priority_mode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_priority_mode() const;
  void _internal_set_priority_mode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool active = 4;
  bool has_active() const;
  private:
  bool _internal_has_active() const;
  public:
  void clear_active();
  bool active() const;
  void set_active(bool value);
  private:
  bool _internal_active() const;
  void _internal_set_active(bool value);
  public:

  // optional bool supports_rdm = 8 [default = false];
  bool has_supports_rdm() const;
  private:
  bool _internal_has_supports_rdm() const;
  public:
  void clear_supports_rdm();
  bool supports_rdm() const;
  void set_supports_rdm(bool value);
  private:
  bool _internal_supports_rdm() const;
  void _internal_set_supports_rdm(bool value);
  public:

  // optional int32 priority = 7;
  bool has_priority() const;
  private:
  bool _internal_has_priority() const;
  public:
  void clear_priority();
  ::PROTOBUF_NAMESPACE_ID::int32 priority() const;
  void set_priority(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_priority() const;
  void _internal_set_priority(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ola.proto.PortInfo)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::int32 port_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 priority_capability_;
  ::PROTOBUF_NAMESPACE_ID::int32 universe_;
  ::PROTOBUF_NAMESPACE_ID::int32 priority_mode_;
  bool active_;
  bool supports_rdm_;
  ::PROTOBUF_NAMESPACE_ID::int32 priority_;
  friend struct ::TableStruct_Ola_2eproto;
};
// -------------------------------------------------------------------

class DeviceInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ola.proto.DeviceInfo) */ {
 public:
  inline DeviceInfo() : DeviceInfo(nullptr) {};
  virtual ~DeviceInfo();

  DeviceInfo(const DeviceInfo& from);
  DeviceInfo(DeviceInfo&& from) noexcept
    : DeviceInfo() {
    *this = ::std::move(from);
  }

  inline DeviceInfo& operator=(const DeviceInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceInfo& operator=(DeviceInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeviceInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeviceInfo* internal_default_instance() {
    return reinterpret_cast<const DeviceInfo*>(
               &_DeviceInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(DeviceInfo& a, DeviceInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeviceInfo* New() const final {
    return CreateMaybeMessage<DeviceInfo>(nullptr);
  }

  DeviceInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeviceInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeviceInfo& from);
  void MergeFrom(const DeviceInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeviceInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ola.proto.DeviceInfo";
  }
  protected:
  explicit DeviceInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Ola_2eproto);
    return ::descriptor_table_Ola_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInputPortFieldNumber = 4,
    kOutputPortFieldNumber = 5,
    kDeviceNameFieldNumber = 3,
    kDeviceIdFieldNumber = 6,
    kDeviceAliasFieldNumber = 1,
    kPluginIdFieldNumber = 2,
  };
  // repeated .ola.proto.PortInfo input_port = 4;
  int input_port_size() const;
  private:
  int _internal_input_port_size() const;
  public:
  void clear_input_port();
  ::ola::proto::PortInfo* mutable_input_port(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ola::proto::PortInfo >*
      mutable_input_port();
  private:
  const ::ola::proto::PortInfo& _internal_input_port(int index) const;
  ::ola::proto::PortInfo* _internal_add_input_port();
  public:
  const ::ola::proto::PortInfo& input_port(int index) const;
  ::ola::proto::PortInfo* add_input_port();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ola::proto::PortInfo >&
      input_port() const;

  // repeated .ola.proto.PortInfo output_port = 5;
  int output_port_size() const;
  private:
  int _internal_output_port_size() const;
  public:
  void clear_output_port();
  ::ola::proto::PortInfo* mutable_output_port(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ola::proto::PortInfo >*
      mutable_output_port();
  private:
  const ::ola::proto::PortInfo& _internal_output_port(int index) const;
  ::ola::proto::PortInfo* _internal_add_output_port();
  public:
  const ::ola::proto::PortInfo& output_port(int index) const;
  ::ola::proto::PortInfo* add_output_port();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ola::proto::PortInfo >&
      output_port() const;

  // required string device_name = 3;
  bool has_device_name() const;
  private:
  bool _internal_has_device_name() const;
  public:
  void clear_device_name();
  const std::string& device_name() const;
  void set_device_name(const std::string& value);
  void set_device_name(std::string&& value);
  void set_device_name(const char* value);
  void set_device_name(const char* value, size_t size);
  std::string* mutable_device_name();
  std::string* release_device_name();
  void set_allocated_device_name(std::string* device_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_device_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_device_name(
      std::string* device_name);
  private:
  const std::string& _internal_device_name() const;
  void _internal_set_device_name(const std::string& value);
  std::string* _internal_mutable_device_name();
  public:

  // required string device_id = 6;
  bool has_device_id() const;
  private:
  bool _internal_has_device_id() const;
  public:
  void clear_device_id();
  const std::string& device_id() const;
  void set_device_id(const std::string& value);
  void set_device_id(std::string&& value);
  void set_device_id(const char* value);
  void set_device_id(const char* value, size_t size);
  std::string* mutable_device_id();
  std::string* release_device_id();
  void set_allocated_device_id(std::string* device_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_device_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_device_id(
      std::string* device_id);
  private:
  const std::string& _internal_device_id() const;
  void _internal_set_device_id(const std::string& value);
  std::string* _internal_mutable_device_id();
  public:

  // required int32 device_alias = 1;
  bool has_device_alias() const;
  private:
  bool _internal_has_device_alias() const;
  public:
  void clear_device_alias();
  ::PROTOBUF_NAMESPACE_ID::int32 device_alias() const;
  void set_device_alias(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_device_alias() const;
  void _internal_set_device_alias(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 plugin_id = 2;
  bool has_plugin_id() const;
  private:
  bool _internal_has_plugin_id() const;
  public:
  void clear_plugin_id();
  ::PROTOBUF_NAMESPACE_ID::int32 plugin_id() const;
  void set_plugin_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_plugin_id() const;
  void _internal_set_plugin_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ola.proto.DeviceInfo)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ola::proto::PortInfo > input_port_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ola::proto::PortInfo > output_port_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 device_alias_;
  ::PROTOBUF_NAMESPACE_ID::int32 plugin_id_;
  friend struct ::TableStruct_Ola_2eproto;
};
// -------------------------------------------------------------------

class DeviceInfoReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ola.proto.DeviceInfoReply) */ {
 public:
  inline DeviceInfoReply() : DeviceInfoReply(nullptr) {};
  virtual ~DeviceInfoReply();

  DeviceInfoReply(const DeviceInfoReply& from);
  DeviceInfoReply(DeviceInfoReply&& from) noexcept
    : DeviceInfoReply() {
    *this = ::std::move(from);
  }

  inline DeviceInfoReply& operator=(const DeviceInfoReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceInfoReply& operator=(DeviceInfoReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeviceInfoReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeviceInfoReply* internal_default_instance() {
    return reinterpret_cast<const DeviceInfoReply*>(
               &_DeviceInfoReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(DeviceInfoReply& a, DeviceInfoReply& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceInfoReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceInfoReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeviceInfoReply* New() const final {
    return CreateMaybeMessage<DeviceInfoReply>(nullptr);
  }

  DeviceInfoReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeviceInfoReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeviceInfoReply& from);
  void MergeFrom(const DeviceInfoReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeviceInfoReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ola.proto.DeviceInfoReply";
  }
  protected:
  explicit DeviceInfoReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Ola_2eproto);
    return ::descriptor_table_Ola_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceFieldNumber = 1,
  };
  // repeated .ola.proto.DeviceInfo device = 1;
  int device_size() const;
  private:
  int _internal_device_size() const;
  public:
  void clear_device();
  ::ola::proto::DeviceInfo* mutable_device(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ola::proto::DeviceInfo >*
      mutable_device();
  private:
  const ::ola::proto::DeviceInfo& _internal_device(int index) const;
  ::ola::proto::DeviceInfo* _internal_add_device();
  public:
  const ::ola::proto::DeviceInfo& device(int index) const;
  ::ola::proto::DeviceInfo* add_device();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ola::proto::DeviceInfo >&
      device() const;

  // @@protoc_insertion_point(class_scope:ola.proto.DeviceInfoReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ola::proto::DeviceInfo > device_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Ola_2eproto;
};
// -------------------------------------------------------------------

class DmxData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ola.proto.DmxData) */ {
 public:
  inline DmxData() : DmxData(nullptr) {};
  virtual ~DmxData();

  DmxData(const DmxData& from);
  DmxData(DmxData&& from) noexcept
    : DmxData() {
    *this = ::std::move(from);
  }

  inline DmxData& operator=(const DmxData& from) {
    CopyFrom(from);
    return *this;
  }
  inline DmxData& operator=(DmxData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DmxData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DmxData* internal_default_instance() {
    return reinterpret_cast<const DmxData*>(
               &_DmxData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(DmxData& a, DmxData& b) {
    a.Swap(&b);
  }
  inline void Swap(DmxData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DmxData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DmxData* New() const final {
    return CreateMaybeMessage<DmxData>(nullptr);
  }

  DmxData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DmxData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DmxData& from);
  void MergeFrom(const DmxData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DmxData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ola.proto.DmxData";
  }
  protected:
  explicit DmxData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Ola_2eproto);
    return ::descriptor_table_Ola_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2,
    kUniverseFieldNumber = 1,
    kPriorityFieldNumber = 3,
  };
  // required bytes data = 2;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_data();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_data(
      std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // required int32 universe = 1;
  bool has_universe() const;
  private:
  bool _internal_has_universe() const;
  public:
  void clear_universe();
  ::PROTOBUF_NAMESPACE_ID::int32 universe() const;
  void set_universe(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_universe() const;
  void _internal_set_universe(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 priority = 3;
  bool has_priority() const;
  private:
  bool _internal_has_priority() const;
  public:
  void clear_priority();
  ::PROTOBUF_NAMESPACE_ID::int32 priority() const;
  void set_priority(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_priority() const;
  void _internal_set_priority(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ola.proto.DmxData)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::int32 universe_;
  ::PROTOBUF_NAMESPACE_ID::int32 priority_;
  friend struct ::TableStruct_Ola_2eproto;
};
// -------------------------------------------------------------------

class RegisterDmxRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ola.proto.RegisterDmxRequest) */ {
 public:
  inline RegisterDmxRequest() : RegisterDmxRequest(nullptr) {};
  virtual ~RegisterDmxRequest();

  RegisterDmxRequest(const RegisterDmxRequest& from);
  RegisterDmxRequest(RegisterDmxRequest&& from) noexcept
    : RegisterDmxRequest() {
    *this = ::std::move(from);
  }

  inline RegisterDmxRequest& operator=(const RegisterDmxRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterDmxRequest& operator=(RegisterDmxRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RegisterDmxRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegisterDmxRequest* internal_default_instance() {
    return reinterpret_cast<const RegisterDmxRequest*>(
               &_RegisterDmxRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(RegisterDmxRequest& a, RegisterDmxRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisterDmxRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegisterDmxRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RegisterDmxRequest* New() const final {
    return CreateMaybeMessage<RegisterDmxRequest>(nullptr);
  }

  RegisterDmxRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegisterDmxRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RegisterDmxRequest& from);
  void MergeFrom(const RegisterDmxRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterDmxRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ola.proto.RegisterDmxRequest";
  }
  protected:
  explicit RegisterDmxRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Ola_2eproto);
    return ::descriptor_table_Ola_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUniverseFieldNumber = 1,
    kActionFieldNumber = 2,
  };
  // required int32 universe = 1;
  bool has_universe() const;
  private:
  bool _internal_has_universe() const;
  public:
  void clear_universe();
  ::PROTOBUF_NAMESPACE_ID::int32 universe() const;
  void set_universe(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_universe() const;
  void _internal_set_universe(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required .ola.proto.RegisterAction action = 2;
  bool has_action() const;
  private:
  bool _internal_has_action() const;
  public:
  void clear_action();
  ::ola::proto::RegisterAction action() const;
  void set_action(::ola::proto::RegisterAction value);
  private:
  ::ola::proto::RegisterAction _internal_action() const;
  void _internal_set_action(::ola::proto::RegisterAction value);
  public:

  // @@protoc_insertion_point(class_scope:ola.proto.RegisterDmxRequest)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 universe_;
  int action_;
  friend struct ::TableStruct_Ola_2eproto;
};
// -------------------------------------------------------------------

class PatchPortRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ola.proto.PatchPortRequest) */ {
 public:
  inline PatchPortRequest() : PatchPortRequest(nullptr) {};
  virtual ~PatchPortRequest();

  PatchPortRequest(const PatchPortRequest& from);
  PatchPortRequest(PatchPortRequest&& from) noexcept
    : PatchPortRequest() {
    *this = ::std::move(from);
  }

  inline PatchPortRequest& operator=(const PatchPortRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PatchPortRequest& operator=(PatchPortRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PatchPortRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PatchPortRequest* internal_default_instance() {
    return reinterpret_cast<const PatchPortRequest*>(
               &_PatchPortRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(PatchPortRequest& a, PatchPortRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PatchPortRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PatchPortRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PatchPortRequest* New() const final {
    return CreateMaybeMessage<PatchPortRequest>(nullptr);
  }

  PatchPortRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PatchPortRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PatchPortRequest& from);
  void MergeFrom(const PatchPortRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PatchPortRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ola.proto.PatchPortRequest";
  }
  protected:
  explicit PatchPortRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Ola_2eproto);
    return ::descriptor_table_Ola_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUniverseFieldNumber = 1,
    kDeviceAliasFieldNumber = 2,
    kPortIdFieldNumber = 3,
    kIsOutputFieldNumber = 5,
    kActionFieldNumber = 4,
  };
  // required int32 universe = 1;
  bool has_universe() const;
  private:
  bool _internal_has_universe() const;
  public:
  void clear_universe();
  ::PROTOBUF_NAMESPACE_ID::int32 universe() const;
  void set_universe(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_universe() const;
  void _internal_set_universe(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 device_alias = 2;
  bool has_device_alias() const;
  private:
  bool _internal_has_device_alias() const;
  public:
  void clear_device_alias();
  ::PROTOBUF_NAMESPACE_ID::int32 device_alias() const;
  void set_device_alias(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_device_alias() const;
  void _internal_set_device_alias(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 port_id = 3;
  bool has_port_id() const;
  private:
  bool _internal_has_port_id() const;
  public:
  void clear_port_id();
  ::PROTOBUF_NAMESPACE_ID::int32 port_id() const;
  void set_port_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_port_id() const;
  void _internal_set_port_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required bool is_output = 5;
  bool has_is_output() const;
  private:
  bool _internal_has_is_output() const;
  public:
  void clear_is_output();
  bool is_output() const;
  void set_is_output(bool value);
  private:
  bool _internal_is_output() const;
  void _internal_set_is_output(bool value);
  public:

  // required .ola.proto.PatchAction action = 4;
  bool has_action() const;
  private:
  bool _internal_has_action() const;
  public:
  void clear_action();
  ::ola::proto::PatchAction action() const;
  void set_action(::ola::proto::PatchAction value);
  private:
  ::ola::proto::PatchAction _internal_action() const;
  void _internal_set_action(::ola::proto::PatchAction value);
  public:

  // @@protoc_insertion_point(class_scope:ola.proto.PatchPortRequest)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 universe_;
  ::PROTOBUF_NAMESPACE_ID::int32 device_alias_;
  ::PROTOBUF_NAMESPACE_ID::int32 port_id_;
  bool is_output_;
  int action_;
  friend struct ::TableStruct_Ola_2eproto;
};
// -------------------------------------------------------------------

class UniverseNameRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ola.proto.UniverseNameRequest) */ {
 public:
  inline UniverseNameRequest() : UniverseNameRequest(nullptr) {};
  virtual ~UniverseNameRequest();

  UniverseNameRequest(const UniverseNameRequest& from);
  UniverseNameRequest(UniverseNameRequest&& from) noexcept
    : UniverseNameRequest() {
    *this = ::std::move(from);
  }

  inline UniverseNameRequest& operator=(const UniverseNameRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UniverseNameRequest& operator=(UniverseNameRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UniverseNameRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UniverseNameRequest* internal_default_instance() {
    return reinterpret_cast<const UniverseNameRequest*>(
               &_UniverseNameRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(UniverseNameRequest& a, UniverseNameRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UniverseNameRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UniverseNameRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UniverseNameRequest* New() const final {
    return CreateMaybeMessage<UniverseNameRequest>(nullptr);
  }

  UniverseNameRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UniverseNameRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UniverseNameRequest& from);
  void MergeFrom(const UniverseNameRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UniverseNameRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ola.proto.UniverseNameRequest";
  }
  protected:
  explicit UniverseNameRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Ola_2eproto);
    return ::descriptor_table_Ola_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kUniverseFieldNumber = 1,
  };
  // required string name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // required int32 universe = 1;
  bool has_universe() const;
  private:
  bool _internal_has_universe() const;
  public:
  void clear_universe();
  ::PROTOBUF_NAMESPACE_ID::int32 universe() const;
  void set_universe(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_universe() const;
  void _internal_set_universe(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ola.proto.UniverseNameRequest)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int32 universe_;
  friend struct ::TableStruct_Ola_2eproto;
};
// -------------------------------------------------------------------

class MergeModeRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ola.proto.MergeModeRequest) */ {
 public:
  inline MergeModeRequest() : MergeModeRequest(nullptr) {};
  virtual ~MergeModeRequest();

  MergeModeRequest(const MergeModeRequest& from);
  MergeModeRequest(MergeModeRequest&& from) noexcept
    : MergeModeRequest() {
    *this = ::std::move(from);
  }

  inline MergeModeRequest& operator=(const MergeModeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MergeModeRequest& operator=(MergeModeRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MergeModeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MergeModeRequest* internal_default_instance() {
    return reinterpret_cast<const MergeModeRequest*>(
               &_MergeModeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(MergeModeRequest& a, MergeModeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MergeModeRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MergeModeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MergeModeRequest* New() const final {
    return CreateMaybeMessage<MergeModeRequest>(nullptr);
  }

  MergeModeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MergeModeRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MergeModeRequest& from);
  void MergeFrom(const MergeModeRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MergeModeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ola.proto.MergeModeRequest";
  }
  protected:
  explicit MergeModeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Ola_2eproto);
    return ::descriptor_table_Ola_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUniverseFieldNumber = 1,
    kMergeModeFieldNumber = 2,
  };
  // required int32 universe = 1;
  bool has_universe() const;
  private:
  bool _internal_has_universe() const;
  public:
  void clear_universe();
  ::PROTOBUF_NAMESPACE_ID::int32 universe() const;
  void set_universe(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_universe() const;
  void _internal_set_universe(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required .ola.proto.MergeMode merge_mode = 2;
  bool has_merge_mode() const;
  private:
  bool _internal_has_merge_mode() const;
  public:
  void clear_merge_mode();
  ::ola::proto::MergeMode merge_mode() const;
  void set_merge_mode(::ola::proto::MergeMode value);
  private:
  ::ola::proto::MergeMode _internal_merge_mode() const;
  void _internal_set_merge_mode(::ola::proto::MergeMode value);
  public:

  // @@protoc_insertion_point(class_scope:ola.proto.MergeModeRequest)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 universe_;
  int merge_mode_;
  friend struct ::TableStruct_Ola_2eproto;
};
// -------------------------------------------------------------------

class OptionalUniverseRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ola.proto.OptionalUniverseRequest) */ {
 public:
  inline OptionalUniverseRequest() : OptionalUniverseRequest(nullptr) {};
  virtual ~OptionalUniverseRequest();

  OptionalUniverseRequest(const OptionalUniverseRequest& from);
  OptionalUniverseRequest(OptionalUniverseRequest&& from) noexcept
    : OptionalUniverseRequest() {
    *this = ::std::move(from);
  }

  inline OptionalUniverseRequest& operator=(const OptionalUniverseRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline OptionalUniverseRequest& operator=(OptionalUniverseRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OptionalUniverseRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OptionalUniverseRequest* internal_default_instance() {
    return reinterpret_cast<const OptionalUniverseRequest*>(
               &_OptionalUniverseRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(OptionalUniverseRequest& a, OptionalUniverseRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(OptionalUniverseRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OptionalUniverseRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OptionalUniverseRequest* New() const final {
    return CreateMaybeMessage<OptionalUniverseRequest>(nullptr);
  }

  OptionalUniverseRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OptionalUniverseRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OptionalUniverseRequest& from);
  void MergeFrom(const OptionalUniverseRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OptionalUniverseRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ola.proto.OptionalUniverseRequest";
  }
  protected:
  explicit OptionalUniverseRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Ola_2eproto);
    return ::descriptor_table_Ola_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUniverseFieldNumber = 1,
  };
  // optional int32 universe = 1;
  bool has_universe() const;
  private:
  bool _internal_has_universe() const;
  public:
  void clear_universe();
  ::PROTOBUF_NAMESPACE_ID::int32 universe() const;
  void set_universe(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_universe() const;
  void _internal_set_universe(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ola.proto.OptionalUniverseRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 universe_;
  friend struct ::TableStruct_Ola_2eproto;
};
// -------------------------------------------------------------------

class UniverseInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ola.proto.UniverseInfo) */ {
 public:
  inline UniverseInfo() : UniverseInfo(nullptr) {};
  virtual ~UniverseInfo();

  UniverseInfo(const UniverseInfo& from);
  UniverseInfo(UniverseInfo&& from) noexcept
    : UniverseInfo() {
    *this = ::std::move(from);
  }

  inline UniverseInfo& operator=(const UniverseInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline UniverseInfo& operator=(UniverseInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UniverseInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UniverseInfo* internal_default_instance() {
    return reinterpret_cast<const UniverseInfo*>(
               &_UniverseInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(UniverseInfo& a, UniverseInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(UniverseInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UniverseInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UniverseInfo* New() const final {
    return CreateMaybeMessage<UniverseInfo>(nullptr);
  }

  UniverseInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UniverseInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UniverseInfo& from);
  void MergeFrom(const UniverseInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UniverseInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ola.proto.UniverseInfo";
  }
  protected:
  explicit UniverseInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Ola_2eproto);
    return ::descriptor_table_Ola_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInputPortsFieldNumber = 7,
    kOutputPortsFieldNumber = 8,
    kNameFieldNumber = 2,
    kUniverseFieldNumber = 1,
    kInputPortCountFieldNumber = 4,
    kOutputPortCountFieldNumber = 5,
    kRdmDevicesFieldNumber = 6,
    kMergeModeFieldNumber = 3,
  };
  // repeated .ola.proto.PortInfo input_ports = 7;
  int input_ports_size() const;
  private:
  int _internal_input_ports_size() const;
  public:
  void clear_input_ports();
  ::ola::proto::PortInfo* mutable_input_ports(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ola::proto::PortInfo >*
      mutable_input_ports();
  private:
  const ::ola::proto::PortInfo& _internal_input_ports(int index) const;
  ::ola::proto::PortInfo* _internal_add_input_ports();
  public:
  const ::ola::proto::PortInfo& input_ports(int index) const;
  ::ola::proto::PortInfo* add_input_ports();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ola::proto::PortInfo >&
      input_ports() const;

  // repeated .ola.proto.PortInfo output_ports = 8;
  int output_ports_size() const;
  private:
  int _internal_output_ports_size() const;
  public:
  void clear_output_ports();
  ::ola::proto::PortInfo* mutable_output_ports(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ola::proto::PortInfo >*
      mutable_output_ports();
  private:
  const ::ola::proto::PortInfo& _internal_output_ports(int index) const;
  ::ola::proto::PortInfo* _internal_add_output_ports();
  public:
  const ::ola::proto::PortInfo& output_ports(int index) const;
  ::ola::proto::PortInfo* add_output_ports();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ola::proto::PortInfo >&
      output_ports() const;

  // required string name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // required int32 universe = 1;
  bool has_universe() const;
  private:
  bool _internal_has_universe() const;
  public:
  void clear_universe();
  ::PROTOBUF_NAMESPACE_ID::int32 universe() const;
  void set_universe(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_universe() const;
  void _internal_set_universe(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 input_port_count = 4;
  bool has_input_port_count() const;
  private:
  bool _internal_has_input_port_count() const;
  public:
  void clear_input_port_count();
  ::PROTOBUF_NAMESPACE_ID::int32 input_port_count() const;
  void set_input_port_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_input_port_count() const;
  void _internal_set_input_port_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 output_port_count = 5;
  bool has_output_port_count() const;
  private:
  bool _internal_has_output_port_count() const;
  public:
  void clear_output_port_count();
  ::PROTOBUF_NAMESPACE_ID::int32 output_port_count() const;
  void set_output_port_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_output_port_count() const;
  void _internal_set_output_port_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 rdm_devices = 6;
  bool has_rdm_devices() const;
  private:
  bool _internal_has_rdm_devices() const;
  public:
  void clear_rdm_devices();
  ::PROTOBUF_NAMESPACE_ID::int32 rdm_devices() const;
  void set_rdm_devices(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_rdm_devices() const;
  void _internal_set_rdm_devices(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required .ola.proto.MergeMode merge_mode = 3;
  bool has_merge_mode() const;
  private:
  bool _internal_has_merge_mode() const;
  public:
  void clear_merge_mode();
  ::ola::proto::MergeMode merge_mode() const;
  void set_merge_mode(::ola::proto::MergeMode value);
  private:
  ::ola::proto::MergeMode _internal_merge_mode() const;
  void _internal_set_merge_mode(::ola::proto::MergeMode value);
  public:

  // @@protoc_insertion_point(class_scope:ola.proto.UniverseInfo)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ola::proto::PortInfo > input_ports_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ola::proto::PortInfo > output_ports_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int32 universe_;
  ::PROTOBUF_NAMESPACE_ID::int32 input_port_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 output_port_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 rdm_devices_;
  int merge_mode_;
  friend struct ::TableStruct_Ola_2eproto;
};
// -------------------------------------------------------------------

class UniverseInfoReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ola.proto.UniverseInfoReply) */ {
 public:
  inline UniverseInfoReply() : UniverseInfoReply(nullptr) {};
  virtual ~UniverseInfoReply();

  UniverseInfoReply(const UniverseInfoReply& from);
  UniverseInfoReply(UniverseInfoReply&& from) noexcept
    : UniverseInfoReply() {
    *this = ::std::move(from);
  }

  inline UniverseInfoReply& operator=(const UniverseInfoReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline UniverseInfoReply& operator=(UniverseInfoReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UniverseInfoReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UniverseInfoReply* internal_default_instance() {
    return reinterpret_cast<const UniverseInfoReply*>(
               &_UniverseInfoReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(UniverseInfoReply& a, UniverseInfoReply& b) {
    a.Swap(&b);
  }
  inline void Swap(UniverseInfoReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UniverseInfoReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UniverseInfoReply* New() const final {
    return CreateMaybeMessage<UniverseInfoReply>(nullptr);
  }

  UniverseInfoReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UniverseInfoReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UniverseInfoReply& from);
  void MergeFrom(const UniverseInfoReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UniverseInfoReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ola.proto.UniverseInfoReply";
  }
  protected:
  explicit UniverseInfoReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Ola_2eproto);
    return ::descriptor_table_Ola_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUniverseFieldNumber = 1,
  };
  // repeated .ola.proto.UniverseInfo universe = 1;
  int universe_size() const;
  private:
  int _internal_universe_size() const;
  public:
  void clear_universe();
  ::ola::proto::UniverseInfo* mutable_universe(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ola::proto::UniverseInfo >*
      mutable_universe();
  private:
  const ::ola::proto::UniverseInfo& _internal_universe(int index) const;
  ::ola::proto::UniverseInfo* _internal_add_universe();
  public:
  const ::ola::proto::UniverseInfo& universe(int index) const;
  ::ola::proto::UniverseInfo* add_universe();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ola::proto::UniverseInfo >&
      universe() const;

  // @@protoc_insertion_point(class_scope:ola.proto.UniverseInfoReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ola::proto::UniverseInfo > universe_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Ola_2eproto;
};
// -------------------------------------------------------------------

class PortPriorityRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ola.proto.PortPriorityRequest) */ {
 public:
  inline PortPriorityRequest() : PortPriorityRequest(nullptr) {};
  virtual ~PortPriorityRequest();

  PortPriorityRequest(const PortPriorityRequest& from);
  PortPriorityRequest(PortPriorityRequest&& from) noexcept
    : PortPriorityRequest() {
    *this = ::std::move(from);
  }

  inline PortPriorityRequest& operator=(const PortPriorityRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PortPriorityRequest& operator=(PortPriorityRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PortPriorityRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PortPriorityRequest* internal_default_instance() {
    return reinterpret_cast<const PortPriorityRequest*>(
               &_PortPriorityRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(PortPriorityRequest& a, PortPriorityRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PortPriorityRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PortPriorityRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PortPriorityRequest* New() const final {
    return CreateMaybeMessage<PortPriorityRequest>(nullptr);
  }

  PortPriorityRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PortPriorityRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PortPriorityRequest& from);
  void MergeFrom(const PortPriorityRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PortPriorityRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ola.proto.PortPriorityRequest";
  }
  protected:
  explicit PortPriorityRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Ola_2eproto);
    return ::descriptor_table_Ola_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceAliasFieldNumber = 1,
    kIsOutputFieldNumber = 2,
    kPortIdFieldNumber = 3,
    kPriorityModeFieldNumber = 4,
    kPriorityFieldNumber = 5,
  };
  // required int32 device_alias = 1;
  bool has_device_alias() const;
  private:
  bool _internal_has_device_alias() const;
  public:
  void clear_device_alias();
  ::PROTOBUF_NAMESPACE_ID::int32 device_alias() const;
  void set_device_alias(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_device_alias() const;
  void _internal_set_device_alias(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required bool is_output = 2;
  bool has_is_output() const;
  private:
  bool _internal_has_is_output() const;
  public:
  void clear_is_output();
  bool is_output() const;
  void set_is_output(bool value);
  private:
  bool _internal_is_output() const;
  void _internal_set_is_output(bool value);
  public:

  // required int32 port_id = 3;
  bool has_port_id() const;
  private:
  bool _internal_has_port_id() const;
  public:
  void clear_port_id();
  ::PROTOBUF_NAMESPACE_ID::int32 port_id() const;
  void set_port_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_port_id() const;
  void _internal_set_port_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 priority_mode = 4;
  bool has_priority_mode() const;
  private:
  bool _internal_has_priority_mode() const;
  public:
  void clear_priority_mode();
  ::PROTOBUF_NAMESPACE_ID::int32 priority_mode() const;
  void set_priority_mode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_priority_mode() const;
  void _internal_set_priority_mode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 priority = 5;
  bool has_priority() const;
  private:
  bool _internal_has_priority() const;
  public:
  void clear_priority();
  ::PROTOBUF_NAMESPACE_ID::int32 priority() const;
  void set_priority(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_priority() const;
  void _internal_set_priority(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ola.proto.PortPriorityRequest)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 device_alias_;
  bool is_output_;
  ::PROTOBUF_NAMESPACE_ID::int32 port_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 priority_mode_;
  ::PROTOBUF_NAMESPACE_ID::int32 priority_;
  friend struct ::TableStruct_Ola_2eproto;
};
// -------------------------------------------------------------------

class DeviceConfigRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ola.proto.DeviceConfigRequest) */ {
 public:
  inline DeviceConfigRequest() : DeviceConfigRequest(nullptr) {};
  virtual ~DeviceConfigRequest();

  DeviceConfigRequest(const DeviceConfigRequest& from);
  DeviceConfigRequest(DeviceConfigRequest&& from) noexcept
    : DeviceConfigRequest() {
    *this = ::std::move(from);
  }

  inline DeviceConfigRequest& operator=(const DeviceConfigRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceConfigRequest& operator=(DeviceConfigRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeviceConfigRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeviceConfigRequest* internal_default_instance() {
    return reinterpret_cast<const DeviceConfigRequest*>(
               &_DeviceConfigRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(DeviceConfigRequest& a, DeviceConfigRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceConfigRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceConfigRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeviceConfigRequest* New() const final {
    return CreateMaybeMessage<DeviceConfigRequest>(nullptr);
  }

  DeviceConfigRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeviceConfigRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeviceConfigRequest& from);
  void MergeFrom(const DeviceConfigRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeviceConfigRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ola.proto.DeviceConfigRequest";
  }
  protected:
  explicit DeviceConfigRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Ola_2eproto);
    return ::descriptor_table_Ola_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2,
    kDeviceAliasFieldNumber = 1,
  };
  // required bytes data = 2;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_data();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_data(
      std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // required int32 device_alias = 1;
  bool has_device_alias() const;
  private:
  bool _internal_has_device_alias() const;
  public:
  void clear_device_alias();
  ::PROTOBUF_NAMESPACE_ID::int32 device_alias() const;
  void set_device_alias(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_device_alias() const;
  void _internal_set_device_alias(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ola.proto.DeviceConfigRequest)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::int32 device_alias_;
  friend struct ::TableStruct_Ola_2eproto;
};
// -------------------------------------------------------------------

class DeviceConfigReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ola.proto.DeviceConfigReply) */ {
 public:
  inline DeviceConfigReply() : DeviceConfigReply(nullptr) {};
  virtual ~DeviceConfigReply();

  DeviceConfigReply(const DeviceConfigReply& from);
  DeviceConfigReply(DeviceConfigReply&& from) noexcept
    : DeviceConfigReply() {
    *this = ::std::move(from);
  }

  inline DeviceConfigReply& operator=(const DeviceConfigReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceConfigReply& operator=(DeviceConfigReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeviceConfigReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeviceConfigReply* internal_default_instance() {
    return reinterpret_cast<const DeviceConfigReply*>(
               &_DeviceConfigReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(DeviceConfigReply& a, DeviceConfigReply& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceConfigReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceConfigReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeviceConfigReply* New() const final {
    return CreateMaybeMessage<DeviceConfigReply>(nullptr);
  }

  DeviceConfigReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeviceConfigReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeviceConfigReply& from);
  void MergeFrom(const DeviceConfigReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeviceConfigReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ola.proto.DeviceConfigReply";
  }
  protected:
  explicit DeviceConfigReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Ola_2eproto);
    return ::descriptor_table_Ola_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // required bytes data = 1;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_data();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_data(
      std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // @@protoc_insertion_point(class_scope:ola.proto.DeviceConfigReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  friend struct ::TableStruct_Ola_2eproto;
};
// -------------------------------------------------------------------

class UID PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ola.proto.UID) */ {
 public:
  inline UID() : UID(nullptr) {};
  virtual ~UID();

  UID(const UID& from);
  UID(UID&& from) noexcept
    : UID() {
    *this = ::std::move(from);
  }

  inline UID& operator=(const UID& from) {
    CopyFrom(from);
    return *this;
  }
  inline UID& operator=(UID&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UID& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UID* internal_default_instance() {
    return reinterpret_cast<const UID*>(
               &_UID_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(UID& a, UID& b) {
    a.Swap(&b);
  }
  inline void Swap(UID* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UID* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UID* New() const final {
    return CreateMaybeMessage<UID>(nullptr);
  }

  UID* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UID>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UID& from);
  void MergeFrom(const UID& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UID* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ola.proto.UID";
  }
  protected:
  explicit UID(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Ola_2eproto);
    return ::descriptor_table_Ola_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEstaIdFieldNumber = 1,
    kDeviceIdFieldNumber = 2,
  };
  // required int32 esta_id = 1;
  bool has_esta_id() const;
  private:
  bool _internal_has_esta_id() const;
  public:
  void clear_esta_id();
  ::PROTOBUF_NAMESPACE_ID::int32 esta_id() const;
  void set_esta_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_esta_id() const;
  void _internal_set_esta_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required fixed32 device_id = 2;
  bool has_device_id() const;
  private:
  bool _internal_has_device_id() const;
  public:
  void clear_device_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 device_id() const;
  void set_device_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_device_id() const;
  void _internal_set_device_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:ola.proto.UID)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 esta_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 device_id_;
  friend struct ::TableStruct_Ola_2eproto;
};
// -------------------------------------------------------------------

class UniverseRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ola.proto.UniverseRequest) */ {
 public:
  inline UniverseRequest() : UniverseRequest(nullptr) {};
  virtual ~UniverseRequest();

  UniverseRequest(const UniverseRequest& from);
  UniverseRequest(UniverseRequest&& from) noexcept
    : UniverseRequest() {
    *this = ::std::move(from);
  }

  inline UniverseRequest& operator=(const UniverseRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UniverseRequest& operator=(UniverseRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UniverseRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UniverseRequest* internal_default_instance() {
    return reinterpret_cast<const UniverseRequest*>(
               &_UniverseRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(UniverseRequest& a, UniverseRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UniverseRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UniverseRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UniverseRequest* New() const final {
    return CreateMaybeMessage<UniverseRequest>(nullptr);
  }

  UniverseRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UniverseRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UniverseRequest& from);
  void MergeFrom(const UniverseRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UniverseRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ola.proto.UniverseRequest";
  }
  protected:
  explicit UniverseRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Ola_2eproto);
    return ::descriptor_table_Ola_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUniverseFieldNumber = 1,
  };
  // required int32 universe = 1;
  bool has_universe() const;
  private:
  bool _internal_has_universe() const;
  public:
  void clear_universe();
  ::PROTOBUF_NAMESPACE_ID::int32 universe() const;
  void set_universe(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_universe() const;
  void _internal_set_universe(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ola.proto.UniverseRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 universe_;
  friend struct ::TableStruct_Ola_2eproto;
};
// -------------------------------------------------------------------

class DiscoveryRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ola.proto.DiscoveryRequest) */ {
 public:
  inline DiscoveryRequest() : DiscoveryRequest(nullptr) {};
  virtual ~DiscoveryRequest();

  DiscoveryRequest(const DiscoveryRequest& from);
  DiscoveryRequest(DiscoveryRequest&& from) noexcept
    : DiscoveryRequest() {
    *this = ::std::move(from);
  }

  inline DiscoveryRequest& operator=(const DiscoveryRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DiscoveryRequest& operator=(DiscoveryRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DiscoveryRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DiscoveryRequest* internal_default_instance() {
    return reinterpret_cast<const DiscoveryRequest*>(
               &_DiscoveryRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(DiscoveryRequest& a, DiscoveryRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DiscoveryRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DiscoveryRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DiscoveryRequest* New() const final {
    return CreateMaybeMessage<DiscoveryRequest>(nullptr);
  }

  DiscoveryRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DiscoveryRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DiscoveryRequest& from);
  void MergeFrom(const DiscoveryRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DiscoveryRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ola.proto.DiscoveryRequest";
  }
  protected:
  explicit DiscoveryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Ola_2eproto);
    return ::descriptor_table_Ola_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUniverseFieldNumber = 1,
    kFullFieldNumber = 2,
  };
  // required int32 universe = 1;
  bool has_universe() const;
  private:
  bool _internal_has_universe() const;
  public:
  void clear_universe();
  ::PROTOBUF_NAMESPACE_ID::int32 universe() const;
  void set_universe(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_universe() const;
  void _internal_set_universe(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required bool full = 2;
  bool has_full() const;
  private:
  bool _internal_has_full() const;
  public:
  void clear_full();
  bool full() const;
  void set_full(bool value);
  private:
  bool _internal_full() const;
  void _internal_set_full(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ola.proto.DiscoveryRequest)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 universe_;
  bool full_;
  friend struct ::TableStruct_Ola_2eproto;
};
// -------------------------------------------------------------------

class UIDListReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ola.proto.UIDListReply) */ {
 public:
  inline UIDListReply() : UIDListReply(nullptr) {};
  virtual ~UIDListReply();

  UIDListReply(const UIDListReply& from);
  UIDListReply(UIDListReply&& from) noexcept
    : UIDListReply() {
    *this = ::std::move(from);
  }

  inline UIDListReply& operator=(const UIDListReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline UIDListReply& operator=(UIDListReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UIDListReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UIDListReply* internal_default_instance() {
    return reinterpret_cast<const UIDListReply*>(
               &_UIDListReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(UIDListReply& a, UIDListReply& b) {
    a.Swap(&b);
  }
  inline void Swap(UIDListReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UIDListReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UIDListReply* New() const final {
    return CreateMaybeMessage<UIDListReply>(nullptr);
  }

  UIDListReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UIDListReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UIDListReply& from);
  void MergeFrom(const UIDListReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UIDListReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ola.proto.UIDListReply";
  }
  protected:
  explicit UIDListReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Ola_2eproto);
    return ::descriptor_table_Ola_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUidFieldNumber = 2,
    kUniverseFieldNumber = 1,
  };
  // repeated .ola.proto.UID uid = 2;
  int uid_size() const;
  private:
  int _internal_uid_size() const;
  public:
  void clear_uid();
  ::ola::proto::UID* mutable_uid(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ola::proto::UID >*
      mutable_uid();
  private:
  const ::ola::proto::UID& _internal_uid(int index) const;
  ::ola::proto::UID* _internal_add_uid();
  public:
  const ::ola::proto::UID& uid(int index) const;
  ::ola::proto::UID* add_uid();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ola::proto::UID >&
      uid() const;

  // required int32 universe = 1;
  bool has_universe() const;
  private:
  bool _internal_has_universe() const;
  public:
  void clear_universe();
  ::PROTOBUF_NAMESPACE_ID::int32 universe() const;
  void set_universe(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_universe() const;
  void _internal_set_universe(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ola.proto.UIDListReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ola::proto::UID > uid_;
  ::PROTOBUF_NAMESPACE_ID::int32 universe_;
  friend struct ::TableStruct_Ola_2eproto;
};
// -------------------------------------------------------------------

class RDMRequestOverrideOptions PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ola.proto.RDMRequestOverrideOptions) */ {
 public:
  inline RDMRequestOverrideOptions() : RDMRequestOverrideOptions(nullptr) {};
  virtual ~RDMRequestOverrideOptions();

  RDMRequestOverrideOptions(const RDMRequestOverrideOptions& from);
  RDMRequestOverrideOptions(RDMRequestOverrideOptions&& from) noexcept
    : RDMRequestOverrideOptions() {
    *this = ::std::move(from);
  }

  inline RDMRequestOverrideOptions& operator=(const RDMRequestOverrideOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline RDMRequestOverrideOptions& operator=(RDMRequestOverrideOptions&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RDMRequestOverrideOptions& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RDMRequestOverrideOptions* internal_default_instance() {
    return reinterpret_cast<const RDMRequestOverrideOptions*>(
               &_RDMRequestOverrideOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(RDMRequestOverrideOptions& a, RDMRequestOverrideOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(RDMRequestOverrideOptions* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RDMRequestOverrideOptions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RDMRequestOverrideOptions* New() const final {
    return CreateMaybeMessage<RDMRequestOverrideOptions>(nullptr);
  }

  RDMRequestOverrideOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RDMRequestOverrideOptions>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RDMRequestOverrideOptions& from);
  void MergeFrom(const RDMRequestOverrideOptions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RDMRequestOverrideOptions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ola.proto.RDMRequestOverrideOptions";
  }
  protected:
  explicit RDMRequestOverrideOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Ola_2eproto);
    return ::descriptor_table_Ola_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubStartCodeFieldNumber = 1,
    kMessageLengthFieldNumber = 2,
    kMessageCountFieldNumber = 3,
    kChecksumFieldNumber = 4,
  };
  // optional uint32 sub_start_code = 1;
  bool has_sub_start_code() const;
  private:
  bool _internal_has_sub_start_code() const;
  public:
  void clear_sub_start_code();
  ::PROTOBUF_NAMESPACE_ID::uint32 sub_start_code() const;
  void set_sub_start_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sub_start_code() const;
  void _internal_set_sub_start_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 message_length = 2;
  bool has_message_length() const;
  private:
  bool _internal_has_message_length() const;
  public:
  void clear_message_length();
  ::PROTOBUF_NAMESPACE_ID::uint32 message_length() const;
  void set_message_length(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_message_length() const;
  void _internal_set_message_length(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 message_count = 3;
  bool has_message_count() const;
  private:
  bool _internal_has_message_count() const;
  public:
  void clear_message_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 message_count() const;
  void set_message_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_message_count() const;
  void _internal_set_message_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 checksum = 4;
  bool has_checksum() const;
  private:
  bool _internal_has_checksum() const;
  public:
  void clear_checksum();
  ::PROTOBUF_NAMESPACE_ID::uint32 checksum() const;
  void set_checksum(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_checksum() const;
  void _internal_set_checksum(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:ola.proto.RDMRequestOverrideOptions)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sub_start_code_;
  ::PROTOBUF_NAMESPACE_ID::uint32 message_length_;
  ::PROTOBUF_NAMESPACE_ID::uint32 message_count_;
  ::PROTOBUF_NAMESPACE_ID::uint32 checksum_;
  friend struct ::TableStruct_Ola_2eproto;
};
// -------------------------------------------------------------------

class RDMRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ola.proto.RDMRequest) */ {
 public:
  inline RDMRequest() : RDMRequest(nullptr) {};
  virtual ~RDMRequest();

  RDMRequest(const RDMRequest& from);
  RDMRequest(RDMRequest&& from) noexcept
    : RDMRequest() {
    *this = ::std::move(from);
  }

  inline RDMRequest& operator=(const RDMRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RDMRequest& operator=(RDMRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RDMRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RDMRequest* internal_default_instance() {
    return reinterpret_cast<const RDMRequest*>(
               &_RDMRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(RDMRequest& a, RDMRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RDMRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RDMRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RDMRequest* New() const final {
    return CreateMaybeMessage<RDMRequest>(nullptr);
  }

  RDMRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RDMRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RDMRequest& from);
  void MergeFrom(const RDMRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RDMRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ola.proto.RDMRequest";
  }
  protected:
  explicit RDMRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Ola_2eproto);
    return ::descriptor_table_Ola_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 5,
    kUidFieldNumber = 2,
    kOptionsFieldNumber = 8,
    kUniverseFieldNumber = 1,
    kSubDeviceFieldNumber = 3,
    kParamIdFieldNumber = 4,
    kIsSetFieldNumber = 6,
    kIncludeRawResponseFieldNumber = 7,
  };
  // required bytes data = 5;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_data();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_data(
      std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // required .ola.proto.UID uid = 2;
  bool has_uid() const;
  private:
  bool _internal_has_uid() const;
  public:
  void clear_uid();
  const ::ola::proto::UID& uid() const;
  ::ola::proto::UID* release_uid();
  ::ola::proto::UID* mutable_uid();
  void set_allocated_uid(::ola::proto::UID* uid);
  private:
  const ::ola::proto::UID& _internal_uid() const;
  ::ola::proto::UID* _internal_mutable_uid();
  public:
  void unsafe_arena_set_allocated_uid(
      ::ola::proto::UID* uid);
  ::ola::proto::UID* unsafe_arena_release_uid();

  // optional .ola.proto.RDMRequestOverrideOptions options = 8;
  bool has_options() const;
  private:
  bool _internal_has_options() const;
  public:
  void clear_options();
  const ::ola::proto::RDMRequestOverrideOptions& options() const;
  ::ola::proto::RDMRequestOverrideOptions* release_options();
  ::ola::proto::RDMRequestOverrideOptions* mutable_options();
  void set_allocated_options(::ola::proto::RDMRequestOverrideOptions* options);
  private:
  const ::ola::proto::RDMRequestOverrideOptions& _internal_options() const;
  ::ola::proto::RDMRequestOverrideOptions* _internal_mutable_options();
  public:
  void unsafe_arena_set_allocated_options(
      ::ola::proto::RDMRequestOverrideOptions* options);
  ::ola::proto::RDMRequestOverrideOptions* unsafe_arena_release_options();

  // required int32 universe = 1;
  bool has_universe() const;
  private:
  bool _internal_has_universe() const;
  public:
  void clear_universe();
  ::PROTOBUF_NAMESPACE_ID::int32 universe() const;
  void set_universe(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_universe() const;
  void _internal_set_universe(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 sub_device = 3;
  bool has_sub_device() const;
  private:
  bool _internal_has_sub_device() const;
  public:
  void clear_sub_device();
  ::PROTOBUF_NAMESPACE_ID::int32 sub_device() const;
  void set_sub_device(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sub_device() const;
  void _internal_set_sub_device(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 param_id = 4;
  bool has_param_id() const;
  private:
  bool _internal_has_param_id() const;
  public:
  void clear_param_id();
  ::PROTOBUF_NAMESPACE_ID::int32 param_id() const;
  void set_param_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_param_id() const;
  void _internal_set_param_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required bool is_set = 6;
  bool has_is_set() const;
  private:
  bool _internal_has_is_set() const;
  public:
  void clear_is_set();
  bool is_set() const;
  void set_is_set(bool value);
  private:
  bool _internal_is_set() const;
  void _internal_set_is_set(bool value);
  public:

  // optional bool include_raw_response = 7 [default = false];
  bool has_include_raw_response() const;
  private:
  bool _internal_has_include_raw_response() const;
  public:
  void clear_include_raw_response();
  bool include_raw_response() const;
  void set_include_raw_response(bool value);
  private:
  bool _internal_include_raw_response() const;
  void _internal_set_include_raw_response(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ola.proto.RDMRequest)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::ola::proto::UID* uid_;
  ::ola::proto::RDMRequestOverrideOptions* options_;
  ::PROTOBUF_NAMESPACE_ID::int32 universe_;
  ::PROTOBUF_NAMESPACE_ID::int32 sub_device_;
  ::PROTOBUF_NAMESPACE_ID::int32 param_id_;
  bool is_set_;
  bool include_raw_response_;
  friend struct ::TableStruct_Ola_2eproto;
};
// -------------------------------------------------------------------

class RDMDiscoveryRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ola.proto.RDMDiscoveryRequest) */ {
 public:
  inline RDMDiscoveryRequest() : RDMDiscoveryRequest(nullptr) {};
  virtual ~RDMDiscoveryRequest();

  RDMDiscoveryRequest(const RDMDiscoveryRequest& from);
  RDMDiscoveryRequest(RDMDiscoveryRequest&& from) noexcept
    : RDMDiscoveryRequest() {
    *this = ::std::move(from);
  }

  inline RDMDiscoveryRequest& operator=(const RDMDiscoveryRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RDMDiscoveryRequest& operator=(RDMDiscoveryRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RDMDiscoveryRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RDMDiscoveryRequest* internal_default_instance() {
    return reinterpret_cast<const RDMDiscoveryRequest*>(
               &_RDMDiscoveryRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(RDMDiscoveryRequest& a, RDMDiscoveryRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RDMDiscoveryRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RDMDiscoveryRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RDMDiscoveryRequest* New() const final {
    return CreateMaybeMessage<RDMDiscoveryRequest>(nullptr);
  }

  RDMDiscoveryRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RDMDiscoveryRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RDMDiscoveryRequest& from);
  void MergeFrom(const RDMDiscoveryRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RDMDiscoveryRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ola.proto.RDMDiscoveryRequest";
  }
  protected:
  explicit RDMDiscoveryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Ola_2eproto);
    return ::descriptor_table_Ola_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 5,
    kUidFieldNumber = 2,
    kOptionsFieldNumber = 8,
    kUniverseFieldNumber = 1,
    kSubDeviceFieldNumber = 3,
    kParamIdFieldNumber = 4,
    kIncludeRawResponseFieldNumber = 6,
  };
  // required bytes data = 5;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_data();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_data(
      std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // required .ola.proto.UID uid = 2;
  bool has_uid() const;
  private:
  bool _internal_has_uid() const;
  public:
  void clear_uid();
  const ::ola::proto::UID& uid() const;
  ::ola::proto::UID* release_uid();
  ::ola::proto::UID* mutable_uid();
  void set_allocated_uid(::ola::proto::UID* uid);
  private:
  const ::ola::proto::UID& _internal_uid() const;
  ::ola::proto::UID* _internal_mutable_uid();
  public:
  void unsafe_arena_set_allocated_uid(
      ::ola::proto::UID* uid);
  ::ola::proto::UID* unsafe_arena_release_uid();

  // optional .ola.proto.RDMRequestOverrideOptions options = 8;
  bool has_options() const;
  private:
  bool _internal_has_options() const;
  public:
  void clear_options();
  const ::ola::proto::RDMRequestOverrideOptions& options() const;
  ::ola::proto::RDMRequestOverrideOptions* release_options();
  ::ola::proto::RDMRequestOverrideOptions* mutable_options();
  void set_allocated_options(::ola::proto::RDMRequestOverrideOptions* options);
  private:
  const ::ola::proto::RDMRequestOverrideOptions& _internal_options() const;
  ::ola::proto::RDMRequestOverrideOptions* _internal_mutable_options();
  public:
  void unsafe_arena_set_allocated_options(
      ::ola::proto::RDMRequestOverrideOptions* options);
  ::ola::proto::RDMRequestOverrideOptions* unsafe_arena_release_options();

  // required int32 universe = 1;
  bool has_universe() const;
  private:
  bool _internal_has_universe() const;
  public:
  void clear_universe();
  ::PROTOBUF_NAMESPACE_ID::int32 universe() const;
  void set_universe(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_universe() const;
  void _internal_set_universe(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 sub_device = 3;
  bool has_sub_device() const;
  private:
  bool _internal_has_sub_device() const;
  public:
  void clear_sub_device();
  ::PROTOBUF_NAMESPACE_ID::int32 sub_device() const;
  void set_sub_device(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sub_device() const;
  void _internal_set_sub_device(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 param_id = 4;
  bool has_param_id() const;
  private:
  bool _internal_has_param_id() const;
  public:
  void clear_param_id();
  ::PROTOBUF_NAMESPACE_ID::int32 param_id() const;
  void set_param_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_param_id() const;
  void _internal_set_param_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool include_raw_response = 6 [default = false];
  bool has_include_raw_response() const;
  private:
  bool _internal_has_include_raw_response() const;
  public:
  void clear_include_raw_response();
  bool include_raw_response() const;
  void set_include_raw_response(bool value);
  private:
  bool _internal_include_raw_response() const;
  void _internal_set_include_raw_response(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ola.proto.RDMDiscoveryRequest)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::ola::proto::UID* uid_;
  ::ola::proto::RDMRequestOverrideOptions* options_;
  ::PROTOBUF_NAMESPACE_ID::int32 universe_;
  ::PROTOBUF_NAMESPACE_ID::int32 sub_device_;
  ::PROTOBUF_NAMESPACE_ID::int32 param_id_;
  bool include_raw_response_;
  friend struct ::TableStruct_Ola_2eproto;
};
// -------------------------------------------------------------------

class RDMFrameTiming PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ola.proto.RDMFrameTiming) */ {
 public:
  inline RDMFrameTiming() : RDMFrameTiming(nullptr) {};
  virtual ~RDMFrameTiming();

  RDMFrameTiming(const RDMFrameTiming& from);
  RDMFrameTiming(RDMFrameTiming&& from) noexcept
    : RDMFrameTiming() {
    *this = ::std::move(from);
  }

  inline RDMFrameTiming& operator=(const RDMFrameTiming& from) {
    CopyFrom(from);
    return *this;
  }
  inline RDMFrameTiming& operator=(RDMFrameTiming&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RDMFrameTiming& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RDMFrameTiming* internal_default_instance() {
    return reinterpret_cast<const RDMFrameTiming*>(
               &_RDMFrameTiming_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(RDMFrameTiming& a, RDMFrameTiming& b) {
    a.Swap(&b);
  }
  inline void Swap(RDMFrameTiming* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RDMFrameTiming* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RDMFrameTiming* New() const final {
    return CreateMaybeMessage<RDMFrameTiming>(nullptr);
  }

  RDMFrameTiming* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RDMFrameTiming>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RDMFrameTiming& from);
  void MergeFrom(const RDMFrameTiming& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RDMFrameTiming* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ola.proto.RDMFrameTiming";
  }
  protected:
  explicit RDMFrameTiming(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Ola_2eproto);
    return ::descriptor_table_Ola_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResponseDelayFieldNumber = 1,
    kBreakTimeFieldNumber = 2,
    kMarkTimeFieldNumber = 3,
    kDataTimeFieldNumber = 4,
  };
  // optional int32 response_delay = 1;
  bool has_response_delay() const;
  private:
  bool _internal_has_response_delay() const;
  public:
  void clear_response_delay();
  ::PROTOBUF_NAMESPACE_ID::int32 response_delay() const;
  void set_response_delay(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_response_delay() const;
  void _internal_set_response_delay(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 break_time = 2;
  bool has_break_time() const;
  private:
  bool _internal_has_break_time() const;
  public:
  void clear_break_time();
  ::PROTOBUF_NAMESPACE_ID::int32 break_time() const;
  void set_break_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_break_time() const;
  void _internal_set_break_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 mark_time = 3;
  bool has_mark_time() const;
  private:
  bool _internal_has_mark_time() const;
  public:
  void clear_mark_time();
  ::PROTOBUF_NAMESPACE_ID::int32 mark_time() const;
  void set_mark_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mark_time() const;
  void _internal_set_mark_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 data_time = 4;
  bool has_data_time() const;
  private:
  bool _internal_has_data_time() const;
  public:
  void clear_data_time();
  ::PROTOBUF_NAMESPACE_ID::int32 data_time() const;
  void set_data_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_data_time() const;
  void _internal_set_data_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ola.proto.RDMFrameTiming)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 response_delay_;
  ::PROTOBUF_NAMESPACE_ID::int32 break_time_;
  ::PROTOBUF_NAMESPACE_ID::int32 mark_time_;
  ::PROTOBUF_NAMESPACE_ID::int32 data_time_;
  friend struct ::TableStruct_Ola_2eproto;
};
// -------------------------------------------------------------------

class RDMFrame PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ola.proto.RDMFrame) */ {
 public:
  inline RDMFrame() : RDMFrame(nullptr) {};
  virtual ~RDMFrame();

  RDMFrame(const RDMFrame& from);
  RDMFrame(RDMFrame&& from) noexcept
    : RDMFrame() {
    *this = ::std::move(from);
  }

  inline RDMFrame& operator=(const RDMFrame& from) {
    CopyFrom(from);
    return *this;
  }
  inline RDMFrame& operator=(RDMFrame&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RDMFrame& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RDMFrame* internal_default_instance() {
    return reinterpret_cast<const RDMFrame*>(
               &_RDMFrame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(RDMFrame& a, RDMFrame& b) {
    a.Swap(&b);
  }
  inline void Swap(RDMFrame* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RDMFrame* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RDMFrame* New() const final {
    return CreateMaybeMessage<RDMFrame>(nullptr);
  }

  RDMFrame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RDMFrame>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RDMFrame& from);
  void MergeFrom(const RDMFrame& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RDMFrame* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ola.proto.RDMFrame";
  }
  protected:
  explicit RDMFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Ola_2eproto);
    return ::descriptor_table_Ola_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRawResponseFieldNumber = 1,
    kTimingFieldNumber = 2,
  };
  // optional bytes raw_response = 1;
  bool has_raw_response() const;
  private:
  bool _internal_has_raw_response() const;
  public:
  void clear_raw_response();
  const std::string& raw_response() const;
  void set_raw_response(const std::string& value);
  void set_raw_response(std::string&& value);
  void set_raw_response(const char* value);
  void set_raw_response(const void* value, size_t size);
  std::string* mutable_raw_response();
  std::string* release_raw_response();
  void set_allocated_raw_response(std::string* raw_response);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_raw_response();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_raw_response(
      std::string* raw_response);
  private:
  const std::string& _internal_raw_response() const;
  void _internal_set_raw_response(const std::string& value);
  std::string* _internal_mutable_raw_response();
  public:

  // optional .ola.proto.RDMFrameTiming timing = 2;
  bool has_timing() const;
  private:
  bool _internal_has_timing() const;
  public:
  void clear_timing();
  const ::ola::proto::RDMFrameTiming& timing() const;
  ::ola::proto::RDMFrameTiming* release_timing();
  ::ola::proto::RDMFrameTiming* mutable_timing();
  void set_allocated_timing(::ola::proto::RDMFrameTiming* timing);
  private:
  const ::ola::proto::RDMFrameTiming& _internal_timing() const;
  ::ola::proto::RDMFrameTiming* _internal_mutable_timing();
  public:
  void unsafe_arena_set_allocated_timing(
      ::ola::proto::RDMFrameTiming* timing);
  ::ola::proto::RDMFrameTiming* unsafe_arena_release_timing();

  // @@protoc_insertion_point(class_scope:ola.proto.RDMFrame)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr raw_response_;
  ::ola::proto::RDMFrameTiming* timing_;
  friend struct ::TableStruct_Ola_2eproto;
};
// -------------------------------------------------------------------

class RDMResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ola.proto.RDMResponse) */ {
 public:
  inline RDMResponse() : RDMResponse(nullptr) {};
  virtual ~RDMResponse();

  RDMResponse(const RDMResponse& from);
  RDMResponse(RDMResponse&& from) noexcept
    : RDMResponse() {
    *this = ::std::move(from);
  }

  inline RDMResponse& operator=(const RDMResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RDMResponse& operator=(RDMResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RDMResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RDMResponse* internal_default_instance() {
    return reinterpret_cast<const RDMResponse*>(
               &_RDMResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(RDMResponse& a, RDMResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RDMResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RDMResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RDMResponse* New() const final {
    return CreateMaybeMessage<RDMResponse>(nullptr);
  }

  RDMResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RDMResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RDMResponse& from);
  void MergeFrom(const RDMResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RDMResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ola.proto.RDMResponse";
  }
  protected:
  explicit RDMResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Ola_2eproto);
    return ::descriptor_table_Ola_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRawResponseFieldNumber = 8,
    kRawFrameFieldNumber = 12,
    kDataFieldNumber = 4,
    kSourceUidFieldNumber = 9,
    kDestUidFieldNumber = 10,
    kResponseCodeFieldNumber = 1,
    kResponseTypeFieldNumber = 2,
    kMessageCountFieldNumber = 3,
    kParamIdFieldNumber = 5,
    kCommandClassFieldNumber = 6,
    kSubDeviceFieldNumber = 7,
    kTransactionNumberFieldNumber = 11,
  };
  // repeated bytes raw_response = 8;
  int raw_response_size() const;
  private:
  int _internal_raw_response_size() const;
  public:
  void clear_raw_response();
  const std::string& raw_response(int index) const;
  std::string* mutable_raw_response(int index);
  void set_raw_response(int index, const std::string& value);
  void set_raw_response(int index, std::string&& value);
  void set_raw_response(int index, const char* value);
  void set_raw_response(int index, const void* value, size_t size);
  std::string* add_raw_response();
  void add_raw_response(const std::string& value);
  void add_raw_response(std::string&& value);
  void add_raw_response(const char* value);
  void add_raw_response(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& raw_response() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_raw_response();
  private:
  const std::string& _internal_raw_response(int index) const;
  std::string* _internal_add_raw_response();
  public:

  // repeated .ola.proto.RDMFrame raw_frame = 12;
  int raw_frame_size() const;
  private:
  int _internal_raw_frame_size() const;
  public:
  void clear_raw_frame();
  ::ola::proto::RDMFrame* mutable_raw_frame(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ola::proto::RDMFrame >*
      mutable_raw_frame();
  private:
  const ::ola::proto::RDMFrame& _internal_raw_frame(int index) const;
  ::ola::proto::RDMFrame* _internal_add_raw_frame();
  public:
  const ::ola::proto::RDMFrame& raw_frame(int index) const;
  ::ola::proto::RDMFrame* add_raw_frame();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ola::proto::RDMFrame >&
      raw_frame() const;

  // optional bytes data = 4 [default = ""];
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_data();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_data(
      std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // optional .ola.proto.UID source_uid = 9;
  bool has_source_uid() const;
  private:
  bool _internal_has_source_uid() const;
  public:
  void clear_source_uid();
  const ::ola::proto::UID& source_uid() const;
  ::ola::proto::UID* release_source_uid();
  ::ola::proto::UID* mutable_source_uid();
  void set_allocated_source_uid(::ola::proto::UID* source_uid);
  private:
  const ::ola::proto::UID& _internal_source_uid() const;
  ::ola::proto::UID* _internal_mutable_source_uid();
  public:
  void unsafe_arena_set_allocated_source_uid(
      ::ola::proto::UID* source_uid);
  ::ola::proto::UID* unsafe_arena_release_source_uid();

  // optional .ola.proto.UID dest_uid = 10;
  bool has_dest_uid() const;
  private:
  bool _internal_has_dest_uid() const;
  public:
  void clear_dest_uid();
  const ::ola::proto::UID& dest_uid() const;
  ::ola::proto::UID* release_dest_uid();
  ::ola::proto::UID* mutable_dest_uid();
  void set_allocated_dest_uid(::ola::proto::UID* dest_uid);
  private:
  const ::ola::proto::UID& _internal_dest_uid() const;
  ::ola::proto::UID* _internal_mutable_dest_uid();
  public:
  void unsafe_arena_set_allocated_dest_uid(
      ::ola::proto::UID* dest_uid);
  ::ola::proto::UID* unsafe_arena_release_dest_uid();

  // required .ola.proto.RDMResponseCode response_code = 1;
  bool has_response_code() const;
  private:
  bool _internal_has_response_code() const;
  public:
  void clear_response_code();
  ::ola::proto::RDMResponseCode response_code() const;
  void set_response_code(::ola::proto::RDMResponseCode value);
  private:
  ::ola::proto::RDMResponseCode _internal_response_code() const;
  void _internal_set_response_code(::ola::proto::RDMResponseCode value);
  public:

  // optional .ola.proto.RDMResponseType response_type = 2;
  bool has_response_type() const;
  private:
  bool _internal_has_response_type() const;
  public:
  void clear_response_type();
  ::ola::proto::RDMResponseType response_type() const;
  void set_response_type(::ola::proto::RDMResponseType value);
  private:
  ::ola::proto::RDMResponseType _internal_response_type() const;
  void _internal_set_response_type(::ola::proto::RDMResponseType value);
  public:

  // optional uint32 message_count = 3 [default = 0];
  bool has_message_count() const;
  private:
  bool _internal_has_message_count() const;
  public:
  void clear_message_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 message_count() const;
  void set_message_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_message_count() const;
  void _internal_set_message_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 param_id = 5;
  bool has_param_id() const;
  private:
  bool _internal_has_param_id() const;
  public:
  void clear_param_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 param_id() const;
  void set_param_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_param_id() const;
  void _internal_set_param_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .ola.proto.RDMCommandClass command_class = 6;
  bool has_command_class() const;
  private:
  bool _internal_has_command_class() const;
  public:
  void clear_command_class();
  ::ola::proto::RDMCommandClass command_class() const;
  void set_command_class(::ola::proto::RDMCommandClass value);
  private:
  ::ola::proto::RDMCommandClass _internal_command_class() const;
  void _internal_set_command_class(::ola::proto::RDMCommandClass value);
  public:

  // optional uint32 sub_device = 7;
  bool has_sub_device() const;
  private:
  bool _internal_has_sub_device() const;
  public:
  void clear_sub_device();
  ::PROTOBUF_NAMESPACE_ID::uint32 sub_device() const;
  void set_sub_device(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sub_device() const;
  void _internal_set_sub_device(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional int32 transaction_number = 11;
  bool has_transaction_number() const;
  private:
  bool _internal_has_transaction_number() const;
  public:
  void clear_transaction_number();
  ::PROTOBUF_NAMESPACE_ID::int32 transaction_number() const;
  void set_transaction_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_transaction_number() const;
  void _internal_set_transaction_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ola.proto.RDMResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> raw_response_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ola::proto::RDMFrame > raw_frame_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::ola::proto::UID* source_uid_;
  ::ola::proto::UID* dest_uid_;
  int response_code_;
  int response_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 message_count_;
  ::PROTOBUF_NAMESPACE_ID::uint32 param_id_;
  int command_class_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sub_device_;
  ::PROTOBUF_NAMESPACE_ID::int32 transaction_number_;
  friend struct ::TableStruct_Ola_2eproto;
};
// -------------------------------------------------------------------

class TimeCode PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ola.proto.TimeCode) */ {
 public:
  inline TimeCode() : TimeCode(nullptr) {};
  virtual ~TimeCode();

  TimeCode(const TimeCode& from);
  TimeCode(TimeCode&& from) noexcept
    : TimeCode() {
    *this = ::std::move(from);
  }

  inline TimeCode& operator=(const TimeCode& from) {
    CopyFrom(from);
    return *this;
  }
  inline TimeCode& operator=(TimeCode&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TimeCode& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TimeCode* internal_default_instance() {
    return reinterpret_cast<const TimeCode*>(
               &_TimeCode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(TimeCode& a, TimeCode& b) {
    a.Swap(&b);
  }
  inline void Swap(TimeCode* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TimeCode* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TimeCode* New() const final {
    return CreateMaybeMessage<TimeCode>(nullptr);
  }

  TimeCode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TimeCode>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TimeCode& from);
  void MergeFrom(const TimeCode& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TimeCode* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ola.proto.TimeCode";
  }
  protected:
  explicit TimeCode(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Ola_2eproto);
    return ::descriptor_table_Ola_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHoursFieldNumber = 1,
    kMinutesFieldNumber = 2,
    kSecondsFieldNumber = 3,
    kFramesFieldNumber = 4,
    kTypeFieldNumber = 5,
  };
  // required uint32 hours = 1;
  bool has_hours() const;
  private:
  bool _internal_has_hours() const;
  public:
  void clear_hours();
  ::PROTOBUF_NAMESPACE_ID::uint32 hours() const;
  void set_hours(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_hours() const;
  void _internal_set_hours(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 minutes = 2;
  bool has_minutes() const;
  private:
  bool _internal_has_minutes() const;
  public:
  void clear_minutes();
  ::PROTOBUF_NAMESPACE_ID::uint32 minutes() const;
  void set_minutes(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_minutes() const;
  void _internal_set_minutes(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 seconds = 3;
  bool has_seconds() const;
  private:
  bool _internal_has_seconds() const;
  public:
  void clear_seconds();
  ::PROTOBUF_NAMESPACE_ID::uint32 seconds() const;
  void set_seconds(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_seconds() const;
  void _internal_set_seconds(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 frames = 4;
  bool has_frames() const;
  private:
  bool _internal_has_frames() const;
  public:
  void clear_frames();
  ::PROTOBUF_NAMESPACE_ID::uint32 frames() const;
  void set_frames(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_frames() const;
  void _internal_set_frames(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required .ola.proto.TimeCodeType type = 5;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::ola::proto::TimeCodeType type() const;
  void set_type(::ola::proto::TimeCodeType value);
  private:
  ::ola::proto::TimeCodeType _internal_type() const;
  void _internal_set_type(::ola::proto::TimeCodeType value);
  public:

  // @@protoc_insertion_point(class_scope:ola.proto.TimeCode)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 hours_;
  ::PROTOBUF_NAMESPACE_ID::uint32 minutes_;
  ::PROTOBUF_NAMESPACE_ID::uint32 seconds_;
  ::PROTOBUF_NAMESPACE_ID::uint32 frames_;
  int type_;
  friend struct ::TableStruct_Ola_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// STREAMING_NO_RESPONSE

// -------------------------------------------------------------------

// Ack

// -------------------------------------------------------------------

// PluginListRequest

// -------------------------------------------------------------------

// PluginReloadRequest

// -------------------------------------------------------------------

// PluginInfo

// required int32 plugin_id = 1;
inline bool PluginInfo::_internal_has_plugin_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PluginInfo::has_plugin_id() const {
  return _internal_has_plugin_id();
}
inline void PluginInfo::clear_plugin_id() {
  plugin_id_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PluginInfo::_internal_plugin_id() const {
  return plugin_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PluginInfo::plugin_id() const {
  // @@protoc_insertion_point(field_get:ola.proto.PluginInfo.plugin_id)
  return _internal_plugin_id();
}
inline void PluginInfo::_internal_set_plugin_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  plugin_id_ = value;
}
inline void PluginInfo::set_plugin_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_plugin_id(value);
  // @@protoc_insertion_point(field_set:ola.proto.PluginInfo.plugin_id)
}

// required string name = 2;
inline bool PluginInfo::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PluginInfo::has_name() const {
  return _internal_has_name();
}
inline void PluginInfo::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PluginInfo::name() const {
  // @@protoc_insertion_point(field_get:ola.proto.PluginInfo.name)
  return _internal_name();
}
inline void PluginInfo::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:ola.proto.PluginInfo.name)
}
inline std::string* PluginInfo::mutable_name() {
  // @@protoc_insertion_point(field_mutable:ola.proto.PluginInfo.name)
  return _internal_mutable_name();
}
inline const std::string& PluginInfo::_internal_name() const {
  return name_.Get();
}
inline void PluginInfo::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PluginInfo::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ola.proto.PluginInfo.name)
}
inline void PluginInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ola.proto.PluginInfo.name)
}
inline void PluginInfo::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ola.proto.PluginInfo.name)
}
inline std::string* PluginInfo::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PluginInfo::release_name() {
  // @@protoc_insertion_point(field_release:ola.proto.PluginInfo.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PluginInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ola.proto.PluginInfo.name)
}
inline std::string* PluginInfo::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ola.proto.PluginInfo.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PluginInfo::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ola.proto.PluginInfo.name)
}

// required bool active = 3;
inline bool PluginInfo::_internal_has_active() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PluginInfo::has_active() const {
  return _internal_has_active();
}
inline void PluginInfo::clear_active() {
  active_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool PluginInfo::_internal_active() const {
  return active_;
}
inline bool PluginInfo::active() const {
  // @@protoc_insertion_point(field_get:ola.proto.PluginInfo.active)
  return _internal_active();
}
inline void PluginInfo::_internal_set_active(bool value) {
  _has_bits_[0] |= 0x00000004u;
  active_ = value;
}
inline void PluginInfo::set_active(bool value) {
  _internal_set_active(value);
  // @@protoc_insertion_point(field_set:ola.proto.PluginInfo.active)
}

// optional bool enabled = 4;
inline bool PluginInfo::_internal_has_enabled() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PluginInfo::has_enabled() const {
  return _internal_has_enabled();
}
inline void PluginInfo::clear_enabled() {
  enabled_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool PluginInfo::_internal_enabled() const {
  return enabled_;
}
inline bool PluginInfo::enabled() const {
  // @@protoc_insertion_point(field_get:ola.proto.PluginInfo.enabled)
  return _internal_enabled();
}
inline void PluginInfo::_internal_set_enabled(bool value) {
  _has_bits_[0] |= 0x00000008u;
  enabled_ = value;
}
inline void PluginInfo::set_enabled(bool value) {
  _internal_set_enabled(value);
  // @@protoc_insertion_point(field_set:ola.proto.PluginInfo.enabled)
}

// -------------------------------------------------------------------

// PluginListReply

// repeated .ola.proto.PluginInfo plugin = 1;
inline int PluginListReply::_internal_plugin_size() const {
  return plugin_.size();
}
inline int PluginListReply::plugin_size() const {
  return _internal_plugin_size();
}
inline void PluginListReply::clear_plugin() {
  plugin_.Clear();
}
inline ::ola::proto::PluginInfo* PluginListReply::mutable_plugin(int index) {
  // @@protoc_insertion_point(field_mutable:ola.proto.PluginListReply.plugin)
  return plugin_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ola::proto::PluginInfo >*
PluginListReply::mutable_plugin() {
  // @@protoc_insertion_point(field_mutable_list:ola.proto.PluginListReply.plugin)
  return &plugin_;
}
inline const ::ola::proto::PluginInfo& PluginListReply::_internal_plugin(int index) const {
  return plugin_.Get(index);
}
inline const ::ola::proto::PluginInfo& PluginListReply::plugin(int index) const {
  // @@protoc_insertion_point(field_get:ola.proto.PluginListReply.plugin)
  return _internal_plugin(index);
}
inline ::ola::proto::PluginInfo* PluginListReply::_internal_add_plugin() {
  return plugin_.Add();
}
inline ::ola::proto::PluginInfo* PluginListReply::add_plugin() {
  // @@protoc_insertion_point(field_add:ola.proto.PluginListReply.plugin)
  return _internal_add_plugin();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ola::proto::PluginInfo >&
PluginListReply::plugin() const {
  // @@protoc_insertion_point(field_list:ola.proto.PluginListReply.plugin)
  return plugin_;
}

// -------------------------------------------------------------------

// PluginDescriptionRequest

// required int32 plugin_id = 1;
inline bool PluginDescriptionRequest::_internal_has_plugin_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PluginDescriptionRequest::has_plugin_id() const {
  return _internal_has_plugin_id();
}
inline void PluginDescriptionRequest::clear_plugin_id() {
  plugin_id_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PluginDescriptionRequest::_internal_plugin_id() const {
  return plugin_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PluginDescriptionRequest::plugin_id() const {
  // @@protoc_insertion_point(field_get:ola.proto.PluginDescriptionRequest.plugin_id)
  return _internal_plugin_id();
}
inline void PluginDescriptionRequest::_internal_set_plugin_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  plugin_id_ = value;
}
inline void PluginDescriptionRequest::set_plugin_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_plugin_id(value);
  // @@protoc_insertion_point(field_set:ola.proto.PluginDescriptionRequest.plugin_id)
}

// -------------------------------------------------------------------

// PluginDescriptionReply

// required string name = 1;
inline bool PluginDescriptionReply::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PluginDescriptionReply::has_name() const {
  return _internal_has_name();
}
inline void PluginDescriptionReply::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PluginDescriptionReply::name() const {
  // @@protoc_insertion_point(field_get:ola.proto.PluginDescriptionReply.name)
  return _internal_name();
}
inline void PluginDescriptionReply::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:ola.proto.PluginDescriptionReply.name)
}
inline std::string* PluginDescriptionReply::mutable_name() {
  // @@protoc_insertion_point(field_mutable:ola.proto.PluginDescriptionReply.name)
  return _internal_mutable_name();
}
inline const std::string& PluginDescriptionReply::_internal_name() const {
  return name_.Get();
}
inline void PluginDescriptionReply::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PluginDescriptionReply::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ola.proto.PluginDescriptionReply.name)
}
inline void PluginDescriptionReply::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ola.proto.PluginDescriptionReply.name)
}
inline void PluginDescriptionReply::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ola.proto.PluginDescriptionReply.name)
}
inline std::string* PluginDescriptionReply::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PluginDescriptionReply::release_name() {
  // @@protoc_insertion_point(field_release:ola.proto.PluginDescriptionReply.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PluginDescriptionReply::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ola.proto.PluginDescriptionReply.name)
}
inline std::string* PluginDescriptionReply::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ola.proto.PluginDescriptionReply.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PluginDescriptionReply::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ola.proto.PluginDescriptionReply.name)
}

// required string description = 2;
inline bool PluginDescriptionReply::_internal_has_description() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PluginDescriptionReply::has_description() const {
  return _internal_has_description();
}
inline void PluginDescriptionReply::clear_description() {
  description_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& PluginDescriptionReply::description() const {
  // @@protoc_insertion_point(field_get:ola.proto.PluginDescriptionReply.description)
  return _internal_description();
}
inline void PluginDescriptionReply::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:ola.proto.PluginDescriptionReply.description)
}
inline std::string* PluginDescriptionReply::mutable_description() {
  // @@protoc_insertion_point(field_mutable:ola.proto.PluginDescriptionReply.description)
  return _internal_mutable_description();
}
inline const std::string& PluginDescriptionReply::_internal_description() const {
  return description_.Get();
}
inline void PluginDescriptionReply::_internal_set_description(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PluginDescriptionReply::set_description(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  description_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ola.proto.PluginDescriptionReply.description)
}
inline void PluginDescriptionReply::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ola.proto.PluginDescriptionReply.description)
}
inline void PluginDescriptionReply::set_description(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ola.proto.PluginDescriptionReply.description)
}
inline std::string* PluginDescriptionReply::_internal_mutable_description() {
  _has_bits_[0] |= 0x00000002u;
  return description_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PluginDescriptionReply::release_description() {
  // @@protoc_insertion_point(field_release:ola.proto.PluginDescriptionReply.description)
  if (!_internal_has_description()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return description_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PluginDescriptionReply::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ola.proto.PluginDescriptionReply.description)
}
inline std::string* PluginDescriptionReply::unsafe_arena_release_description() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ola.proto.PluginDescriptionReply.description)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return description_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PluginDescriptionReply::unsafe_arena_set_allocated_description(
    std::string* description) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (description != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  description_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      description, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ola.proto.PluginDescriptionReply.description)
}

// -------------------------------------------------------------------

// PluginStateRequest

// required int32 plugin_id = 1;
inline bool PluginStateRequest::_internal_has_plugin_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PluginStateRequest::has_plugin_id() const {
  return _internal_has_plugin_id();
}
inline void PluginStateRequest::clear_plugin_id() {
  plugin_id_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PluginStateRequest::_internal_plugin_id() const {
  return plugin_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PluginStateRequest::plugin_id() const {
  // @@protoc_insertion_point(field_get:ola.proto.PluginStateRequest.plugin_id)
  return _internal_plugin_id();
}
inline void PluginStateRequest::_internal_set_plugin_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  plugin_id_ = value;
}
inline void PluginStateRequest::set_plugin_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_plugin_id(value);
  // @@protoc_insertion_point(field_set:ola.proto.PluginStateRequest.plugin_id)
}

// -------------------------------------------------------------------

// PluginStateReply

// required string name = 1;
inline bool PluginStateReply::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PluginStateReply::has_name() const {
  return _internal_has_name();
}
inline void PluginStateReply::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PluginStateReply::name() const {
  // @@protoc_insertion_point(field_get:ola.proto.PluginStateReply.name)
  return _internal_name();
}
inline void PluginStateReply::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:ola.proto.PluginStateReply.name)
}
inline std::string* PluginStateReply::mutable_name() {
  // @@protoc_insertion_point(field_mutable:ola.proto.PluginStateReply.name)
  return _internal_mutable_name();
}
inline const std::string& PluginStateReply::_internal_name() const {
  return name_.Get();
}
inline void PluginStateReply::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PluginStateReply::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ola.proto.PluginStateReply.name)
}
inline void PluginStateReply::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ola.proto.PluginStateReply.name)
}
inline void PluginStateReply::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ola.proto.PluginStateReply.name)
}
inline std::string* PluginStateReply::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PluginStateReply::release_name() {
  // @@protoc_insertion_point(field_release:ola.proto.PluginStateReply.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PluginStateReply::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ola.proto.PluginStateReply.name)
}
inline std::string* PluginStateReply::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ola.proto.PluginStateReply.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PluginStateReply::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ola.proto.PluginStateReply.name)
}

// required bool enabled = 2;
inline bool PluginStateReply::_internal_has_enabled() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PluginStateReply::has_enabled() const {
  return _internal_has_enabled();
}
inline void PluginStateReply::clear_enabled() {
  enabled_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool PluginStateReply::_internal_enabled() const {
  return enabled_;
}
inline bool PluginStateReply::enabled() const {
  // @@protoc_insertion_point(field_get:ola.proto.PluginStateReply.enabled)
  return _internal_enabled();
}
inline void PluginStateReply::_internal_set_enabled(bool value) {
  _has_bits_[0] |= 0x00000004u;
  enabled_ = value;
}
inline void PluginStateReply::set_enabled(bool value) {
  _internal_set_enabled(value);
  // @@protoc_insertion_point(field_set:ola.proto.PluginStateReply.enabled)
}

// required bool active = 3;
inline bool PluginStateReply::_internal_has_active() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PluginStateReply::has_active() const {
  return _internal_has_active();
}
inline void PluginStateReply::clear_active() {
  active_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool PluginStateReply::_internal_active() const {
  return active_;
}
inline bool PluginStateReply::active() const {
  // @@protoc_insertion_point(field_get:ola.proto.PluginStateReply.active)
  return _internal_active();
}
inline void PluginStateReply::_internal_set_active(bool value) {
  _has_bits_[0] |= 0x00000008u;
  active_ = value;
}
inline void PluginStateReply::set_active(bool value) {
  _internal_set_active(value);
  // @@protoc_insertion_point(field_set:ola.proto.PluginStateReply.active)
}

// required string preferences_source = 4;
inline bool PluginStateReply::_internal_has_preferences_source() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PluginStateReply::has_preferences_source() const {
  return _internal_has_preferences_source();
}
inline void PluginStateReply::clear_preferences_source() {
  preferences_source_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& PluginStateReply::preferences_source() const {
  // @@protoc_insertion_point(field_get:ola.proto.PluginStateReply.preferences_source)
  return _internal_preferences_source();
}
inline void PluginStateReply::set_preferences_source(const std::string& value) {
  _internal_set_preferences_source(value);
  // @@protoc_insertion_point(field_set:ola.proto.PluginStateReply.preferences_source)
}
inline std::string* PluginStateReply::mutable_preferences_source() {
  // @@protoc_insertion_point(field_mutable:ola.proto.PluginStateReply.preferences_source)
  return _internal_mutable_preferences_source();
}
inline const std::string& PluginStateReply::_internal_preferences_source() const {
  return preferences_source_.Get();
}
inline void PluginStateReply::_internal_set_preferences_source(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  preferences_source_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PluginStateReply::set_preferences_source(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  preferences_source_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ola.proto.PluginStateReply.preferences_source)
}
inline void PluginStateReply::set_preferences_source(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  preferences_source_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ola.proto.PluginStateReply.preferences_source)
}
inline void PluginStateReply::set_preferences_source(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  preferences_source_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ola.proto.PluginStateReply.preferences_source)
}
inline std::string* PluginStateReply::_internal_mutable_preferences_source() {
  _has_bits_[0] |= 0x00000002u;
  return preferences_source_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PluginStateReply::release_preferences_source() {
  // @@protoc_insertion_point(field_release:ola.proto.PluginStateReply.preferences_source)
  if (!_internal_has_preferences_source()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return preferences_source_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PluginStateReply::set_allocated_preferences_source(std::string* preferences_source) {
  if (preferences_source != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  preferences_source_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), preferences_source,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ola.proto.PluginStateReply.preferences_source)
}
inline std::string* PluginStateReply::unsafe_arena_release_preferences_source() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ola.proto.PluginStateReply.preferences_source)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return preferences_source_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PluginStateReply::unsafe_arena_set_allocated_preferences_source(
    std::string* preferences_source) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (preferences_source != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  preferences_source_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      preferences_source, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ola.proto.PluginStateReply.preferences_source)
}

// repeated .ola.proto.PluginInfo conflicts_with = 5;
inline int PluginStateReply::_internal_conflicts_with_size() const {
  return conflicts_with_.size();
}
inline int PluginStateReply::conflicts_with_size() const {
  return _internal_conflicts_with_size();
}
inline void PluginStateReply::clear_conflicts_with() {
  conflicts_with_.Clear();
}
inline ::ola::proto::PluginInfo* PluginStateReply::mutable_conflicts_with(int index) {
  // @@protoc_insertion_point(field_mutable:ola.proto.PluginStateReply.conflicts_with)
  return conflicts_with_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ola::proto::PluginInfo >*
PluginStateReply::mutable_conflicts_with() {
  // @@protoc_insertion_point(field_mutable_list:ola.proto.PluginStateReply.conflicts_with)
  return &conflicts_with_;
}
inline const ::ola::proto::PluginInfo& PluginStateReply::_internal_conflicts_with(int index) const {
  return conflicts_with_.Get(index);
}
inline const ::ola::proto::PluginInfo& PluginStateReply::conflicts_with(int index) const {
  // @@protoc_insertion_point(field_get:ola.proto.PluginStateReply.conflicts_with)
  return _internal_conflicts_with(index);
}
inline ::ola::proto::PluginInfo* PluginStateReply::_internal_add_conflicts_with() {
  return conflicts_with_.Add();
}
inline ::ola::proto::PluginInfo* PluginStateReply::add_conflicts_with() {
  // @@protoc_insertion_point(field_add:ola.proto.PluginStateReply.conflicts_with)
  return _internal_add_conflicts_with();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ola::proto::PluginInfo >&
PluginStateReply::conflicts_with() const {
  // @@protoc_insertion_point(field_list:ola.proto.PluginStateReply.conflicts_with)
  return conflicts_with_;
}

// -------------------------------------------------------------------

// PluginStateChangeRequest

// required int32 plugin_id = 1;
inline bool PluginStateChangeRequest::_internal_has_plugin_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PluginStateChangeRequest::has_plugin_id() const {
  return _internal_has_plugin_id();
}
inline void PluginStateChangeRequest::clear_plugin_id() {
  plugin_id_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PluginStateChangeRequest::_internal_plugin_id() const {
  return plugin_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PluginStateChangeRequest::plugin_id() const {
  // @@protoc_insertion_point(field_get:ola.proto.PluginStateChangeRequest.plugin_id)
  return _internal_plugin_id();
}
inline void PluginStateChangeRequest::_internal_set_plugin_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  plugin_id_ = value;
}
inline void PluginStateChangeRequest::set_plugin_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_plugin_id(value);
  // @@protoc_insertion_point(field_set:ola.proto.PluginStateChangeRequest.plugin_id)
}

// required bool enabled = 2;
inline bool PluginStateChangeRequest::_internal_has_enabled() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PluginStateChangeRequest::has_enabled() const {
  return _internal_has_enabled();
}
inline void PluginStateChangeRequest::clear_enabled() {
  enabled_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool PluginStateChangeRequest::_internal_enabled() const {
  return enabled_;
}
inline bool PluginStateChangeRequest::enabled() const {
  // @@protoc_insertion_point(field_get:ola.proto.PluginStateChangeRequest.enabled)
  return _internal_enabled();
}
inline void PluginStateChangeRequest::_internal_set_enabled(bool value) {
  _has_bits_[0] |= 0x00000002u;
  enabled_ = value;
}
inline void PluginStateChangeRequest::set_enabled(bool value) {
  _internal_set_enabled(value);
  // @@protoc_insertion_point(field_set:ola.proto.PluginStateChangeRequest.enabled)
}

// -------------------------------------------------------------------

// DeviceInfoRequest

// optional int32 plugin_id = 1;
inline bool DeviceInfoRequest::_internal_has_plugin_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DeviceInfoRequest::has_plugin_id() const {
  return _internal_has_plugin_id();
}
inline void DeviceInfoRequest::clear_plugin_id() {
  plugin_id_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeviceInfoRequest::_internal_plugin_id() const {
  return plugin_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeviceInfoRequest::plugin_id() const {
  // @@protoc_insertion_point(field_get:ola.proto.DeviceInfoRequest.plugin_id)
  return _internal_plugin_id();
}
inline void DeviceInfoRequest::_internal_set_plugin_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  plugin_id_ = value;
}
inline void DeviceInfoRequest::set_plugin_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_plugin_id(value);
  // @@protoc_insertion_point(field_set:ola.proto.DeviceInfoRequest.plugin_id)
}

// -------------------------------------------------------------------

// PortInfo

// required int32 port_id = 1;
inline bool PortInfo::_internal_has_port_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PortInfo::has_port_id() const {
  return _internal_has_port_id();
}
inline void PortInfo::clear_port_id() {
  port_id_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PortInfo::_internal_port_id() const {
  return port_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PortInfo::port_id() const {
  // @@protoc_insertion_point(field_get:ola.proto.PortInfo.port_id)
  return _internal_port_id();
}
inline void PortInfo::_internal_set_port_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  port_id_ = value;
}
inline void PortInfo::set_port_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_port_id(value);
  // @@protoc_insertion_point(field_set:ola.proto.PortInfo.port_id)
}

// required int32 priority_capability = 2;
inline bool PortInfo::_internal_has_priority_capability() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PortInfo::has_priority_capability() const {
  return _internal_has_priority_capability();
}
inline void PortInfo::clear_priority_capability() {
  priority_capability_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PortInfo::_internal_priority_capability() const {
  return priority_capability_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PortInfo::priority_capability() const {
  // @@protoc_insertion_point(field_get:ola.proto.PortInfo.priority_capability)
  return _internal_priority_capability();
}
inline void PortInfo::_internal_set_priority_capability(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  priority_capability_ = value;
}
inline void PortInfo::set_priority_capability(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_priority_capability(value);
  // @@protoc_insertion_point(field_set:ola.proto.PortInfo.priority_capability)
}

// required string description = 5;
inline bool PortInfo::_internal_has_description() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PortInfo::has_description() const {
  return _internal_has_description();
}
inline void PortInfo::clear_description() {
  description_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PortInfo::description() const {
  // @@protoc_insertion_point(field_get:ola.proto.PortInfo.description)
  return _internal_description();
}
inline void PortInfo::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:ola.proto.PortInfo.description)
}
inline std::string* PortInfo::mutable_description() {
  // @@protoc_insertion_point(field_mutable:ola.proto.PortInfo.description)
  return _internal_mutable_description();
}
inline const std::string& PortInfo::_internal_description() const {
  return description_.Get();
}
inline void PortInfo::_internal_set_description(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PortInfo::set_description(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  description_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ola.proto.PortInfo.description)
}
inline void PortInfo::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ola.proto.PortInfo.description)
}
inline void PortInfo::set_description(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ola.proto.PortInfo.description)
}
inline std::string* PortInfo::_internal_mutable_description() {
  _has_bits_[0] |= 0x00000001u;
  return description_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PortInfo::release_description() {
  // @@protoc_insertion_point(field_release:ola.proto.PortInfo.description)
  if (!_internal_has_description()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return description_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PortInfo::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ola.proto.PortInfo.description)
}
inline std::string* PortInfo::unsafe_arena_release_description() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ola.proto.PortInfo.description)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return description_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PortInfo::unsafe_arena_set_allocated_description(
    std::string* description) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (description != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  description_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      description, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ola.proto.PortInfo.description)
}

// optional int32 universe = 3;
inline bool PortInfo::_internal_has_universe() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PortInfo::has_universe() const {
  return _internal_has_universe();
}
inline void PortInfo::clear_universe() {
  universe_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PortInfo::_internal_universe() const {
  return universe_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PortInfo::universe() const {
  // @@protoc_insertion_point(field_get:ola.proto.PortInfo.universe)
  return _internal_universe();
}
inline void PortInfo::_internal_set_universe(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  universe_ = value;
}
inline void PortInfo::set_universe(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_universe(value);
  // @@protoc_insertion_point(field_set:ola.proto.PortInfo.universe)
}

// optional bool active = 4;
inline bool PortInfo::_internal_has_active() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool PortInfo::has_active() const {
  return _internal_has_active();
}
inline void PortInfo::clear_active() {
  active_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool PortInfo::_internal_active() const {
  return active_;
}
inline bool PortInfo::active() const {
  // @@protoc_insertion_point(field_get:ola.proto.PortInfo.active)
  return _internal_active();
}
inline void PortInfo::_internal_set_active(bool value) {
  _has_bits_[0] |= 0x00000020u;
  active_ = value;
}
inline void PortInfo::set_active(bool value) {
  _internal_set_active(value);
  // @@protoc_insertion_point(field_set:ola.proto.PortInfo.active)
}

// optional int32 priority_mode = 6;
inline bool PortInfo::_internal_has_priority_mode() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool PortInfo::has_priority_mode() const {
  return _internal_has_priority_mode();
}
inline void PortInfo::clear_priority_mode() {
  priority_mode_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PortInfo::_internal_priority_mode() const {
  return priority_mode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PortInfo::priority_mode() const {
  // @@protoc_insertion_point(field_get:ola.proto.PortInfo.priority_mode)
  return _internal_priority_mode();
}
inline void PortInfo::_internal_set_priority_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  priority_mode_ = value;
}
inline void PortInfo::set_priority_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_priority_mode(value);
  // @@protoc_insertion_point(field_set:ola.proto.PortInfo.priority_mode)
}

// optional int32 priority = 7;
inline bool PortInfo::_internal_has_priority() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool PortInfo::has_priority() const {
  return _internal_has_priority();
}
inline void PortInfo::clear_priority() {
  priority_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PortInfo::_internal_priority() const {
  return priority_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PortInfo::priority() const {
  // @@protoc_insertion_point(field_get:ola.proto.PortInfo.priority)
  return _internal_priority();
}
inline void PortInfo::_internal_set_priority(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  priority_ = value;
}
inline void PortInfo::set_priority(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_priority(value);
  // @@protoc_insertion_point(field_set:ola.proto.PortInfo.priority)
}

// optional bool supports_rdm = 8 [default = false];
inline bool PortInfo::_internal_has_supports_rdm() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool PortInfo::has_supports_rdm() const {
  return _internal_has_supports_rdm();
}
inline void PortInfo::clear_supports_rdm() {
  supports_rdm_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool PortInfo::_internal_supports_rdm() const {
  return supports_rdm_;
}
inline bool PortInfo::supports_rdm() const {
  // @@protoc_insertion_point(field_get:ola.proto.PortInfo.supports_rdm)
  return _internal_supports_rdm();
}
inline void PortInfo::_internal_set_supports_rdm(bool value) {
  _has_bits_[0] |= 0x00000040u;
  supports_rdm_ = value;
}
inline void PortInfo::set_supports_rdm(bool value) {
  _internal_set_supports_rdm(value);
  // @@protoc_insertion_point(field_set:ola.proto.PortInfo.supports_rdm)
}

// -------------------------------------------------------------------

// DeviceInfo

// required int32 device_alias = 1;
inline bool DeviceInfo::_internal_has_device_alias() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool DeviceInfo::has_device_alias() const {
  return _internal_has_device_alias();
}
inline void DeviceInfo::clear_device_alias() {
  device_alias_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeviceInfo::_internal_device_alias() const {
  return device_alias_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeviceInfo::device_alias() const {
  // @@protoc_insertion_point(field_get:ola.proto.DeviceInfo.device_alias)
  return _internal_device_alias();
}
inline void DeviceInfo::_internal_set_device_alias(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  device_alias_ = value;
}
inline void DeviceInfo::set_device_alias(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_device_alias(value);
  // @@protoc_insertion_point(field_set:ola.proto.DeviceInfo.device_alias)
}

// required int32 plugin_id = 2;
inline bool DeviceInfo::_internal_has_plugin_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool DeviceInfo::has_plugin_id() const {
  return _internal_has_plugin_id();
}
inline void DeviceInfo::clear_plugin_id() {
  plugin_id_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeviceInfo::_internal_plugin_id() const {
  return plugin_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeviceInfo::plugin_id() const {
  // @@protoc_insertion_point(field_get:ola.proto.DeviceInfo.plugin_id)
  return _internal_plugin_id();
}
inline void DeviceInfo::_internal_set_plugin_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  plugin_id_ = value;
}
inline void DeviceInfo::set_plugin_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_plugin_id(value);
  // @@protoc_insertion_point(field_set:ola.proto.DeviceInfo.plugin_id)
}

// required string device_name = 3;
inline bool DeviceInfo::_internal_has_device_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DeviceInfo::has_device_name() const {
  return _internal_has_device_name();
}
inline void DeviceInfo::clear_device_name() {
  device_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DeviceInfo::device_name() const {
  // @@protoc_insertion_point(field_get:ola.proto.DeviceInfo.device_name)
  return _internal_device_name();
}
inline void DeviceInfo::set_device_name(const std::string& value) {
  _internal_set_device_name(value);
  // @@protoc_insertion_point(field_set:ola.proto.DeviceInfo.device_name)
}
inline std::string* DeviceInfo::mutable_device_name() {
  // @@protoc_insertion_point(field_mutable:ola.proto.DeviceInfo.device_name)
  return _internal_mutable_device_name();
}
inline const std::string& DeviceInfo::_internal_device_name() const {
  return device_name_.Get();
}
inline void DeviceInfo::_internal_set_device_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  device_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeviceInfo::set_device_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  device_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ola.proto.DeviceInfo.device_name)
}
inline void DeviceInfo::set_device_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  device_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ola.proto.DeviceInfo.device_name)
}
inline void DeviceInfo::set_device_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  device_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ola.proto.DeviceInfo.device_name)
}
inline std::string* DeviceInfo::_internal_mutable_device_name() {
  _has_bits_[0] |= 0x00000001u;
  return device_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeviceInfo::release_device_name() {
  // @@protoc_insertion_point(field_release:ola.proto.DeviceInfo.device_name)
  if (!_internal_has_device_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return device_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeviceInfo::set_allocated_device_name(std::string* device_name) {
  if (device_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  device_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ola.proto.DeviceInfo.device_name)
}
inline std::string* DeviceInfo::unsafe_arena_release_device_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ola.proto.DeviceInfo.device_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return device_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeviceInfo::unsafe_arena_set_allocated_device_name(
    std::string* device_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (device_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  device_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      device_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ola.proto.DeviceInfo.device_name)
}

// repeated .ola.proto.PortInfo input_port = 4;
inline int DeviceInfo::_internal_input_port_size() const {
  return input_port_.size();
}
inline int DeviceInfo::input_port_size() const {
  return _internal_input_port_size();
}
inline void DeviceInfo::clear_input_port() {
  input_port_.Clear();
}
inline ::ola::proto::PortInfo* DeviceInfo::mutable_input_port(int index) {
  // @@protoc_insertion_point(field_mutable:ola.proto.DeviceInfo.input_port)
  return input_port_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ola::proto::PortInfo >*
DeviceInfo::mutable_input_port() {
  // @@protoc_insertion_point(field_mutable_list:ola.proto.DeviceInfo.input_port)
  return &input_port_;
}
inline const ::ola::proto::PortInfo& DeviceInfo::_internal_input_port(int index) const {
  return input_port_.Get(index);
}
inline const ::ola::proto::PortInfo& DeviceInfo::input_port(int index) const {
  // @@protoc_insertion_point(field_get:ola.proto.DeviceInfo.input_port)
  return _internal_input_port(index);
}
inline ::ola::proto::PortInfo* DeviceInfo::_internal_add_input_port() {
  return input_port_.Add();
}
inline ::ola::proto::PortInfo* DeviceInfo::add_input_port() {
  // @@protoc_insertion_point(field_add:ola.proto.DeviceInfo.input_port)
  return _internal_add_input_port();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ola::proto::PortInfo >&
DeviceInfo::input_port() const {
  // @@protoc_insertion_point(field_list:ola.proto.DeviceInfo.input_port)
  return input_port_;
}

// repeated .ola.proto.PortInfo output_port = 5;
inline int DeviceInfo::_internal_output_port_size() const {
  return output_port_.size();
}
inline int DeviceInfo::output_port_size() const {
  return _internal_output_port_size();
}
inline void DeviceInfo::clear_output_port() {
  output_port_.Clear();
}
inline ::ola::proto::PortInfo* DeviceInfo::mutable_output_port(int index) {
  // @@protoc_insertion_point(field_mutable:ola.proto.DeviceInfo.output_port)
  return output_port_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ola::proto::PortInfo >*
DeviceInfo::mutable_output_port() {
  // @@protoc_insertion_point(field_mutable_list:ola.proto.DeviceInfo.output_port)
  return &output_port_;
}
inline const ::ola::proto::PortInfo& DeviceInfo::_internal_output_port(int index) const {
  return output_port_.Get(index);
}
inline const ::ola::proto::PortInfo& DeviceInfo::output_port(int index) const {
  // @@protoc_insertion_point(field_get:ola.proto.DeviceInfo.output_port)
  return _internal_output_port(index);
}
inline ::ola::proto::PortInfo* DeviceInfo::_internal_add_output_port() {
  return output_port_.Add();
}
inline ::ola::proto::PortInfo* DeviceInfo::add_output_port() {
  // @@protoc_insertion_point(field_add:ola.proto.DeviceInfo.output_port)
  return _internal_add_output_port();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ola::proto::PortInfo >&
DeviceInfo::output_port() const {
  // @@protoc_insertion_point(field_list:ola.proto.DeviceInfo.output_port)
  return output_port_;
}

// required string device_id = 6;
inline bool DeviceInfo::_internal_has_device_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DeviceInfo::has_device_id() const {
  return _internal_has_device_id();
}
inline void DeviceInfo::clear_device_id() {
  device_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& DeviceInfo::device_id() const {
  // @@protoc_insertion_point(field_get:ola.proto.DeviceInfo.device_id)
  return _internal_device_id();
}
inline void DeviceInfo::set_device_id(const std::string& value) {
  _internal_set_device_id(value);
  // @@protoc_insertion_point(field_set:ola.proto.DeviceInfo.device_id)
}
inline std::string* DeviceInfo::mutable_device_id() {
  // @@protoc_insertion_point(field_mutable:ola.proto.DeviceInfo.device_id)
  return _internal_mutable_device_id();
}
inline const std::string& DeviceInfo::_internal_device_id() const {
  return device_id_.Get();
}
inline void DeviceInfo::_internal_set_device_id(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  device_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeviceInfo::set_device_id(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  device_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ola.proto.DeviceInfo.device_id)
}
inline void DeviceInfo::set_device_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  device_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ola.proto.DeviceInfo.device_id)
}
inline void DeviceInfo::set_device_id(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  device_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ola.proto.DeviceInfo.device_id)
}
inline std::string* DeviceInfo::_internal_mutable_device_id() {
  _has_bits_[0] |= 0x00000002u;
  return device_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeviceInfo::release_device_id() {
  // @@protoc_insertion_point(field_release:ola.proto.DeviceInfo.device_id)
  if (!_internal_has_device_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return device_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeviceInfo::set_allocated_device_id(std::string* device_id) {
  if (device_id != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  device_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ola.proto.DeviceInfo.device_id)
}
inline std::string* DeviceInfo::unsafe_arena_release_device_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ola.proto.DeviceInfo.device_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return device_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeviceInfo::unsafe_arena_set_allocated_device_id(
    std::string* device_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (device_id != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  device_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      device_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ola.proto.DeviceInfo.device_id)
}

// -------------------------------------------------------------------

// DeviceInfoReply

// repeated .ola.proto.DeviceInfo device = 1;
inline int DeviceInfoReply::_internal_device_size() const {
  return device_.size();
}
inline int DeviceInfoReply::device_size() const {
  return _internal_device_size();
}
inline void DeviceInfoReply::clear_device() {
  device_.Clear();
}
inline ::ola::proto::DeviceInfo* DeviceInfoReply::mutable_device(int index) {
  // @@protoc_insertion_point(field_mutable:ola.proto.DeviceInfoReply.device)
  return device_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ola::proto::DeviceInfo >*
DeviceInfoReply::mutable_device() {
  // @@protoc_insertion_point(field_mutable_list:ola.proto.DeviceInfoReply.device)
  return &device_;
}
inline const ::ola::proto::DeviceInfo& DeviceInfoReply::_internal_device(int index) const {
  return device_.Get(index);
}
inline const ::ola::proto::DeviceInfo& DeviceInfoReply::device(int index) const {
  // @@protoc_insertion_point(field_get:ola.proto.DeviceInfoReply.device)
  return _internal_device(index);
}
inline ::ola::proto::DeviceInfo* DeviceInfoReply::_internal_add_device() {
  return device_.Add();
}
inline ::ola::proto::DeviceInfo* DeviceInfoReply::add_device() {
  // @@protoc_insertion_point(field_add:ola.proto.DeviceInfoReply.device)
  return _internal_add_device();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ola::proto::DeviceInfo >&
DeviceInfoReply::device() const {
  // @@protoc_insertion_point(field_list:ola.proto.DeviceInfoReply.device)
  return device_;
}

// -------------------------------------------------------------------

// DmxData

// required int32 universe = 1;
inline bool DmxData::_internal_has_universe() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DmxData::has_universe() const {
  return _internal_has_universe();
}
inline void DmxData::clear_universe() {
  universe_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DmxData::_internal_universe() const {
  return universe_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DmxData::universe() const {
  // @@protoc_insertion_point(field_get:ola.proto.DmxData.universe)
  return _internal_universe();
}
inline void DmxData::_internal_set_universe(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  universe_ = value;
}
inline void DmxData::set_universe(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_universe(value);
  // @@protoc_insertion_point(field_set:ola.proto.DmxData.universe)
}

// required bytes data = 2;
inline bool DmxData::_internal_has_data() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DmxData::has_data() const {
  return _internal_has_data();
}
inline void DmxData::clear_data() {
  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DmxData::data() const {
  // @@protoc_insertion_point(field_get:ola.proto.DmxData.data)
  return _internal_data();
}
inline void DmxData::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:ola.proto.DmxData.data)
}
inline std::string* DmxData::mutable_data() {
  // @@protoc_insertion_point(field_mutable:ola.proto.DmxData.data)
  return _internal_mutable_data();
}
inline const std::string& DmxData::_internal_data() const {
  return data_.Get();
}
inline void DmxData::_internal_set_data(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DmxData::set_data(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  data_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ola.proto.DmxData.data)
}
inline void DmxData::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ola.proto.DmxData.data)
}
inline void DmxData::set_data(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ola.proto.DmxData.data)
}
inline std::string* DmxData::_internal_mutable_data() {
  _has_bits_[0] |= 0x00000001u;
  return data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DmxData::release_data() {
  // @@protoc_insertion_point(field_release:ola.proto.DmxData.data)
  if (!_internal_has_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return data_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DmxData::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ola.proto.DmxData.data)
}
inline std::string* DmxData::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ola.proto.DmxData.data)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return data_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DmxData::unsafe_arena_set_allocated_data(
    std::string* data) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (data != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  data_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      data, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ola.proto.DmxData.data)
}

// optional int32 priority = 3;
inline bool DmxData::_internal_has_priority() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool DmxData::has_priority() const {
  return _internal_has_priority();
}
inline void DmxData::clear_priority() {
  priority_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DmxData::_internal_priority() const {
  return priority_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DmxData::priority() const {
  // @@protoc_insertion_point(field_get:ola.proto.DmxData.priority)
  return _internal_priority();
}
inline void DmxData::_internal_set_priority(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  priority_ = value;
}
inline void DmxData::set_priority(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_priority(value);
  // @@protoc_insertion_point(field_set:ola.proto.DmxData.priority)
}

// -------------------------------------------------------------------

// RegisterDmxRequest

// required int32 universe = 1;
inline bool RegisterDmxRequest::_internal_has_universe() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RegisterDmxRequest::has_universe() const {
  return _internal_has_universe();
}
inline void RegisterDmxRequest::clear_universe() {
  universe_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegisterDmxRequest::_internal_universe() const {
  return universe_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegisterDmxRequest::universe() const {
  // @@protoc_insertion_point(field_get:ola.proto.RegisterDmxRequest.universe)
  return _internal_universe();
}
inline void RegisterDmxRequest::_internal_set_universe(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  universe_ = value;
}
inline void RegisterDmxRequest::set_universe(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_universe(value);
  // @@protoc_insertion_point(field_set:ola.proto.RegisterDmxRequest.universe)
}

// required .ola.proto.RegisterAction action = 2;
inline bool RegisterDmxRequest::_internal_has_action() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RegisterDmxRequest::has_action() const {
  return _internal_has_action();
}
inline void RegisterDmxRequest::clear_action() {
  action_ = 1;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::ola::proto::RegisterAction RegisterDmxRequest::_internal_action() const {
  return static_cast< ::ola::proto::RegisterAction >(action_);
}
inline ::ola::proto::RegisterAction RegisterDmxRequest::action() const {
  // @@protoc_insertion_point(field_get:ola.proto.RegisterDmxRequest.action)
  return _internal_action();
}
inline void RegisterDmxRequest::_internal_set_action(::ola::proto::RegisterAction value) {
  assert(::ola::proto::RegisterAction_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  action_ = value;
}
inline void RegisterDmxRequest::set_action(::ola::proto::RegisterAction value) {
  _internal_set_action(value);
  // @@protoc_insertion_point(field_set:ola.proto.RegisterDmxRequest.action)
}

// -------------------------------------------------------------------

// PatchPortRequest

// required int32 universe = 1;
inline bool PatchPortRequest::_internal_has_universe() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PatchPortRequest::has_universe() const {
  return _internal_has_universe();
}
inline void PatchPortRequest::clear_universe() {
  universe_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PatchPortRequest::_internal_universe() const {
  return universe_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PatchPortRequest::universe() const {
  // @@protoc_insertion_point(field_get:ola.proto.PatchPortRequest.universe)
  return _internal_universe();
}
inline void PatchPortRequest::_internal_set_universe(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  universe_ = value;
}
inline void PatchPortRequest::set_universe(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_universe(value);
  // @@protoc_insertion_point(field_set:ola.proto.PatchPortRequest.universe)
}

// required int32 device_alias = 2;
inline bool PatchPortRequest::_internal_has_device_alias() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PatchPortRequest::has_device_alias() const {
  return _internal_has_device_alias();
}
inline void PatchPortRequest::clear_device_alias() {
  device_alias_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PatchPortRequest::_internal_device_alias() const {
  return device_alias_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PatchPortRequest::device_alias() const {
  // @@protoc_insertion_point(field_get:ola.proto.PatchPortRequest.device_alias)
  return _internal_device_alias();
}
inline void PatchPortRequest::_internal_set_device_alias(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  device_alias_ = value;
}
inline void PatchPortRequest::set_device_alias(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_device_alias(value);
  // @@protoc_insertion_point(field_set:ola.proto.PatchPortRequest.device_alias)
}

// required int32 port_id = 3;
inline bool PatchPortRequest::_internal_has_port_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PatchPortRequest::has_port_id() const {
  return _internal_has_port_id();
}
inline void PatchPortRequest::clear_port_id() {
  port_id_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PatchPortRequest::_internal_port_id() const {
  return port_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PatchPortRequest::port_id() const {
  // @@protoc_insertion_point(field_get:ola.proto.PatchPortRequest.port_id)
  return _internal_port_id();
}
inline void PatchPortRequest::_internal_set_port_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  port_id_ = value;
}
inline void PatchPortRequest::set_port_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_port_id(value);
  // @@protoc_insertion_point(field_set:ola.proto.PatchPortRequest.port_id)
}

// required .ola.proto.PatchAction action = 4;
inline bool PatchPortRequest::_internal_has_action() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool PatchPortRequest::has_action() const {
  return _internal_has_action();
}
inline void PatchPortRequest::clear_action() {
  action_ = 1;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::ola::proto::PatchAction PatchPortRequest::_internal_action() const {
  return static_cast< ::ola::proto::PatchAction >(action_);
}
inline ::ola::proto::PatchAction PatchPortRequest::action() const {
  // @@protoc_insertion_point(field_get:ola.proto.PatchPortRequest.action)
  return _internal_action();
}
inline void PatchPortRequest::_internal_set_action(::ola::proto::PatchAction value) {
  assert(::ola::proto::PatchAction_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  action_ = value;
}
inline void PatchPortRequest::set_action(::ola::proto::PatchAction value) {
  _internal_set_action(value);
  // @@protoc_insertion_point(field_set:ola.proto.PatchPortRequest.action)
}

// required bool is_output = 5;
inline bool PatchPortRequest::_internal_has_is_output() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PatchPortRequest::has_is_output() const {
  return _internal_has_is_output();
}
inline void PatchPortRequest::clear_is_output() {
  is_output_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool PatchPortRequest::_internal_is_output() const {
  return is_output_;
}
inline bool PatchPortRequest::is_output() const {
  // @@protoc_insertion_point(field_get:ola.proto.PatchPortRequest.is_output)
  return _internal_is_output();
}
inline void PatchPortRequest::_internal_set_is_output(bool value) {
  _has_bits_[0] |= 0x00000008u;
  is_output_ = value;
}
inline void PatchPortRequest::set_is_output(bool value) {
  _internal_set_is_output(value);
  // @@protoc_insertion_point(field_set:ola.proto.PatchPortRequest.is_output)
}

// -------------------------------------------------------------------

// UniverseNameRequest

// required int32 universe = 1;
inline bool UniverseNameRequest::_internal_has_universe() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool UniverseNameRequest::has_universe() const {
  return _internal_has_universe();
}
inline void UniverseNameRequest::clear_universe() {
  universe_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UniverseNameRequest::_internal_universe() const {
  return universe_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UniverseNameRequest::universe() const {
  // @@protoc_insertion_point(field_get:ola.proto.UniverseNameRequest.universe)
  return _internal_universe();
}
inline void UniverseNameRequest::_internal_set_universe(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  universe_ = value;
}
inline void UniverseNameRequest::set_universe(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_universe(value);
  // @@protoc_insertion_point(field_set:ola.proto.UniverseNameRequest.universe)
}

// required string name = 2;
inline bool UniverseNameRequest::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool UniverseNameRequest::has_name() const {
  return _internal_has_name();
}
inline void UniverseNameRequest::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& UniverseNameRequest::name() const {
  // @@protoc_insertion_point(field_get:ola.proto.UniverseNameRequest.name)
  return _internal_name();
}
inline void UniverseNameRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:ola.proto.UniverseNameRequest.name)
}
inline std::string* UniverseNameRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:ola.proto.UniverseNameRequest.name)
  return _internal_mutable_name();
}
inline const std::string& UniverseNameRequest::_internal_name() const {
  return name_.Get();
}
inline void UniverseNameRequest::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UniverseNameRequest::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ola.proto.UniverseNameRequest.name)
}
inline void UniverseNameRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ola.proto.UniverseNameRequest.name)
}
inline void UniverseNameRequest::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ola.proto.UniverseNameRequest.name)
}
inline std::string* UniverseNameRequest::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UniverseNameRequest::release_name() {
  // @@protoc_insertion_point(field_release:ola.proto.UniverseNameRequest.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UniverseNameRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ola.proto.UniverseNameRequest.name)
}
inline std::string* UniverseNameRequest::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ola.proto.UniverseNameRequest.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void UniverseNameRequest::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ola.proto.UniverseNameRequest.name)
}

// -------------------------------------------------------------------

// MergeModeRequest

// required int32 universe = 1;
inline bool MergeModeRequest::_internal_has_universe() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MergeModeRequest::has_universe() const {
  return _internal_has_universe();
}
inline void MergeModeRequest::clear_universe() {
  universe_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MergeModeRequest::_internal_universe() const {
  return universe_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MergeModeRequest::universe() const {
  // @@protoc_insertion_point(field_get:ola.proto.MergeModeRequest.universe)
  return _internal_universe();
}
inline void MergeModeRequest::_internal_set_universe(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  universe_ = value;
}
inline void MergeModeRequest::set_universe(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_universe(value);
  // @@protoc_insertion_point(field_set:ola.proto.MergeModeRequest.universe)
}

// required .ola.proto.MergeMode merge_mode = 2;
inline bool MergeModeRequest::_internal_has_merge_mode() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MergeModeRequest::has_merge_mode() const {
  return _internal_has_merge_mode();
}
inline void MergeModeRequest::clear_merge_mode() {
  merge_mode_ = 1;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::ola::proto::MergeMode MergeModeRequest::_internal_merge_mode() const {
  return static_cast< ::ola::proto::MergeMode >(merge_mode_);
}
inline ::ola::proto::MergeMode MergeModeRequest::merge_mode() const {
  // @@protoc_insertion_point(field_get:ola.proto.MergeModeRequest.merge_mode)
  return _internal_merge_mode();
}
inline void MergeModeRequest::_internal_set_merge_mode(::ola::proto::MergeMode value) {
  assert(::ola::proto::MergeMode_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  merge_mode_ = value;
}
inline void MergeModeRequest::set_merge_mode(::ola::proto::MergeMode value) {
  _internal_set_merge_mode(value);
  // @@protoc_insertion_point(field_set:ola.proto.MergeModeRequest.merge_mode)
}

// -------------------------------------------------------------------

// OptionalUniverseRequest

// optional int32 universe = 1;
inline bool OptionalUniverseRequest::_internal_has_universe() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool OptionalUniverseRequest::has_universe() const {
  return _internal_has_universe();
}
inline void OptionalUniverseRequest::clear_universe() {
  universe_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OptionalUniverseRequest::_internal_universe() const {
  return universe_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OptionalUniverseRequest::universe() const {
  // @@protoc_insertion_point(field_get:ola.proto.OptionalUniverseRequest.universe)
  return _internal_universe();
}
inline void OptionalUniverseRequest::_internal_set_universe(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  universe_ = value;
}
inline void OptionalUniverseRequest::set_universe(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_universe(value);
  // @@protoc_insertion_point(field_set:ola.proto.OptionalUniverseRequest.universe)
}

// -------------------------------------------------------------------

// UniverseInfo

// required int32 universe = 1;
inline bool UniverseInfo::_internal_has_universe() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool UniverseInfo::has_universe() const {
  return _internal_has_universe();
}
inline void UniverseInfo::clear_universe() {
  universe_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UniverseInfo::_internal_universe() const {
  return universe_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UniverseInfo::universe() const {
  // @@protoc_insertion_point(field_get:ola.proto.UniverseInfo.universe)
  return _internal_universe();
}
inline void UniverseInfo::_internal_set_universe(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  universe_ = value;
}
inline void UniverseInfo::set_universe(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_universe(value);
  // @@protoc_insertion_point(field_set:ola.proto.UniverseInfo.universe)
}

// required string name = 2;
inline bool UniverseInfo::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool UniverseInfo::has_name() const {
  return _internal_has_name();
}
inline void UniverseInfo::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& UniverseInfo::name() const {
  // @@protoc_insertion_point(field_get:ola.proto.UniverseInfo.name)
  return _internal_name();
}
inline void UniverseInfo::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:ola.proto.UniverseInfo.name)
}
inline std::string* UniverseInfo::mutable_name() {
  // @@protoc_insertion_point(field_mutable:ola.proto.UniverseInfo.name)
  return _internal_mutable_name();
}
inline const std::string& UniverseInfo::_internal_name() const {
  return name_.Get();
}
inline void UniverseInfo::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UniverseInfo::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ola.proto.UniverseInfo.name)
}
inline void UniverseInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ola.proto.UniverseInfo.name)
}
inline void UniverseInfo::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ola.proto.UniverseInfo.name)
}
inline std::string* UniverseInfo::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UniverseInfo::release_name() {
  // @@protoc_insertion_point(field_release:ola.proto.UniverseInfo.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UniverseInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ola.proto.UniverseInfo.name)
}
inline std::string* UniverseInfo::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ola.proto.UniverseInfo.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void UniverseInfo::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ola.proto.UniverseInfo.name)
}

// required .ola.proto.MergeMode merge_mode = 3;
inline bool UniverseInfo::_internal_has_merge_mode() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool UniverseInfo::has_merge_mode() const {
  return _internal_has_merge_mode();
}
inline void UniverseInfo::clear_merge_mode() {
  merge_mode_ = 1;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::ola::proto::MergeMode UniverseInfo::_internal_merge_mode() const {
  return static_cast< ::ola::proto::MergeMode >(merge_mode_);
}
inline ::ola::proto::MergeMode UniverseInfo::merge_mode() const {
  // @@protoc_insertion_point(field_get:ola.proto.UniverseInfo.merge_mode)
  return _internal_merge_mode();
}
inline void UniverseInfo::_internal_set_merge_mode(::ola::proto::MergeMode value) {
  assert(::ola::proto::MergeMode_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  merge_mode_ = value;
}
inline void UniverseInfo::set_merge_mode(::ola::proto::MergeMode value) {
  _internal_set_merge_mode(value);
  // @@protoc_insertion_point(field_set:ola.proto.UniverseInfo.merge_mode)
}

// required int32 input_port_count = 4;
inline bool UniverseInfo::_internal_has_input_port_count() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool UniverseInfo::has_input_port_count() const {
  return _internal_has_input_port_count();
}
inline void UniverseInfo::clear_input_port_count() {
  input_port_count_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UniverseInfo::_internal_input_port_count() const {
  return input_port_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UniverseInfo::input_port_count() const {
  // @@protoc_insertion_point(field_get:ola.proto.UniverseInfo.input_port_count)
  return _internal_input_port_count();
}
inline void UniverseInfo::_internal_set_input_port_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  input_port_count_ = value;
}
inline void UniverseInfo::set_input_port_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_input_port_count(value);
  // @@protoc_insertion_point(field_set:ola.proto.UniverseInfo.input_port_count)
}

// required int32 output_port_count = 5;
inline bool UniverseInfo::_internal_has_output_port_count() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool UniverseInfo::has_output_port_count() const {
  return _internal_has_output_port_count();
}
inline void UniverseInfo::clear_output_port_count() {
  output_port_count_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UniverseInfo::_internal_output_port_count() const {
  return output_port_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UniverseInfo::output_port_count() const {
  // @@protoc_insertion_point(field_get:ola.proto.UniverseInfo.output_port_count)
  return _internal_output_port_count();
}
inline void UniverseInfo::_internal_set_output_port_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  output_port_count_ = value;
}
inline void UniverseInfo::set_output_port_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_output_port_count(value);
  // @@protoc_insertion_point(field_set:ola.proto.UniverseInfo.output_port_count)
}

// required int32 rdm_devices = 6;
inline bool UniverseInfo::_internal_has_rdm_devices() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool UniverseInfo::has_rdm_devices() const {
  return _internal_has_rdm_devices();
}
inline void UniverseInfo::clear_rdm_devices() {
  rdm_devices_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UniverseInfo::_internal_rdm_devices() const {
  return rdm_devices_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UniverseInfo::rdm_devices() const {
  // @@protoc_insertion_point(field_get:ola.proto.UniverseInfo.rdm_devices)
  return _internal_rdm_devices();
}
inline void UniverseInfo::_internal_set_rdm_devices(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  rdm_devices_ = value;
}
inline void UniverseInfo::set_rdm_devices(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_rdm_devices(value);
  // @@protoc_insertion_point(field_set:ola.proto.UniverseInfo.rdm_devices)
}

// repeated .ola.proto.PortInfo input_ports = 7;
inline int UniverseInfo::_internal_input_ports_size() const {
  return input_ports_.size();
}
inline int UniverseInfo::input_ports_size() const {
  return _internal_input_ports_size();
}
inline void UniverseInfo::clear_input_ports() {
  input_ports_.Clear();
}
inline ::ola::proto::PortInfo* UniverseInfo::mutable_input_ports(int index) {
  // @@protoc_insertion_point(field_mutable:ola.proto.UniverseInfo.input_ports)
  return input_ports_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ola::proto::PortInfo >*
UniverseInfo::mutable_input_ports() {
  // @@protoc_insertion_point(field_mutable_list:ola.proto.UniverseInfo.input_ports)
  return &input_ports_;
}
inline const ::ola::proto::PortInfo& UniverseInfo::_internal_input_ports(int index) const {
  return input_ports_.Get(index);
}
inline const ::ola::proto::PortInfo& UniverseInfo::input_ports(int index) const {
  // @@protoc_insertion_point(field_get:ola.proto.UniverseInfo.input_ports)
  return _internal_input_ports(index);
}
inline ::ola::proto::PortInfo* UniverseInfo::_internal_add_input_ports() {
  return input_ports_.Add();
}
inline ::ola::proto::PortInfo* UniverseInfo::add_input_ports() {
  // @@protoc_insertion_point(field_add:ola.proto.UniverseInfo.input_ports)
  return _internal_add_input_ports();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ola::proto::PortInfo >&
UniverseInfo::input_ports() const {
  // @@protoc_insertion_point(field_list:ola.proto.UniverseInfo.input_ports)
  return input_ports_;
}

// repeated .ola.proto.PortInfo output_ports = 8;
inline int UniverseInfo::_internal_output_ports_size() const {
  return output_ports_.size();
}
inline int UniverseInfo::output_ports_size() const {
  return _internal_output_ports_size();
}
inline void UniverseInfo::clear_output_ports() {
  output_ports_.Clear();
}
inline ::ola::proto::PortInfo* UniverseInfo::mutable_output_ports(int index) {
  // @@protoc_insertion_point(field_mutable:ola.proto.UniverseInfo.output_ports)
  return output_ports_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ola::proto::PortInfo >*
UniverseInfo::mutable_output_ports() {
  // @@protoc_insertion_point(field_mutable_list:ola.proto.UniverseInfo.output_ports)
  return &output_ports_;
}
inline const ::ola::proto::PortInfo& UniverseInfo::_internal_output_ports(int index) const {
  return output_ports_.Get(index);
}
inline const ::ola::proto::PortInfo& UniverseInfo::output_ports(int index) const {
  // @@protoc_insertion_point(field_get:ola.proto.UniverseInfo.output_ports)
  return _internal_output_ports(index);
}
inline ::ola::proto::PortInfo* UniverseInfo::_internal_add_output_ports() {
  return output_ports_.Add();
}
inline ::ola::proto::PortInfo* UniverseInfo::add_output_ports() {
  // @@protoc_insertion_point(field_add:ola.proto.UniverseInfo.output_ports)
  return _internal_add_output_ports();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ola::proto::PortInfo >&
UniverseInfo::output_ports() const {
  // @@protoc_insertion_point(field_list:ola.proto.UniverseInfo.output_ports)
  return output_ports_;
}

// -------------------------------------------------------------------

// UniverseInfoReply

// repeated .ola.proto.UniverseInfo universe = 1;
inline int UniverseInfoReply::_internal_universe_size() const {
  return universe_.size();
}
inline int UniverseInfoReply::universe_size() const {
  return _internal_universe_size();
}
inline void UniverseInfoReply::clear_universe() {
  universe_.Clear();
}
inline ::ola::proto::UniverseInfo* UniverseInfoReply::mutable_universe(int index) {
  // @@protoc_insertion_point(field_mutable:ola.proto.UniverseInfoReply.universe)
  return universe_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ola::proto::UniverseInfo >*
UniverseInfoReply::mutable_universe() {
  // @@protoc_insertion_point(field_mutable_list:ola.proto.UniverseInfoReply.universe)
  return &universe_;
}
inline const ::ola::proto::UniverseInfo& UniverseInfoReply::_internal_universe(int index) const {
  return universe_.Get(index);
}
inline const ::ola::proto::UniverseInfo& UniverseInfoReply::universe(int index) const {
  // @@protoc_insertion_point(field_get:ola.proto.UniverseInfoReply.universe)
  return _internal_universe(index);
}
inline ::ola::proto::UniverseInfo* UniverseInfoReply::_internal_add_universe() {
  return universe_.Add();
}
inline ::ola::proto::UniverseInfo* UniverseInfoReply::add_universe() {
  // @@protoc_insertion_point(field_add:ola.proto.UniverseInfoReply.universe)
  return _internal_add_universe();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ola::proto::UniverseInfo >&
UniverseInfoReply::universe() const {
  // @@protoc_insertion_point(field_list:ola.proto.UniverseInfoReply.universe)
  return universe_;
}

// -------------------------------------------------------------------

// PortPriorityRequest

// required int32 device_alias = 1;
inline bool PortPriorityRequest::_internal_has_device_alias() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PortPriorityRequest::has_device_alias() const {
  return _internal_has_device_alias();
}
inline void PortPriorityRequest::clear_device_alias() {
  device_alias_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PortPriorityRequest::_internal_device_alias() const {
  return device_alias_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PortPriorityRequest::device_alias() const {
  // @@protoc_insertion_point(field_get:ola.proto.PortPriorityRequest.device_alias)
  return _internal_device_alias();
}
inline void PortPriorityRequest::_internal_set_device_alias(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  device_alias_ = value;
}
inline void PortPriorityRequest::set_device_alias(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_device_alias(value);
  // @@protoc_insertion_point(field_set:ola.proto.PortPriorityRequest.device_alias)
}

// required bool is_output = 2;
inline bool PortPriorityRequest::_internal_has_is_output() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PortPriorityRequest::has_is_output() const {
  return _internal_has_is_output();
}
inline void PortPriorityRequest::clear_is_output() {
  is_output_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool PortPriorityRequest::_internal_is_output() const {
  return is_output_;
}
inline bool PortPriorityRequest::is_output() const {
  // @@protoc_insertion_point(field_get:ola.proto.PortPriorityRequest.is_output)
  return _internal_is_output();
}
inline void PortPriorityRequest::_internal_set_is_output(bool value) {
  _has_bits_[0] |= 0x00000002u;
  is_output_ = value;
}
inline void PortPriorityRequest::set_is_output(bool value) {
  _internal_set_is_output(value);
  // @@protoc_insertion_point(field_set:ola.proto.PortPriorityRequest.is_output)
}

// required int32 port_id = 3;
inline bool PortPriorityRequest::_internal_has_port_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PortPriorityRequest::has_port_id() const {
  return _internal_has_port_id();
}
inline void PortPriorityRequest::clear_port_id() {
  port_id_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PortPriorityRequest::_internal_port_id() const {
  return port_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PortPriorityRequest::port_id() const {
  // @@protoc_insertion_point(field_get:ola.proto.PortPriorityRequest.port_id)
  return _internal_port_id();
}
inline void PortPriorityRequest::_internal_set_port_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  port_id_ = value;
}
inline void PortPriorityRequest::set_port_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_port_id(value);
  // @@protoc_insertion_point(field_set:ola.proto.PortPriorityRequest.port_id)
}

// required int32 priority_mode = 4;
inline bool PortPriorityRequest::_internal_has_priority_mode() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PortPriorityRequest::has_priority_mode() const {
  return _internal_has_priority_mode();
}
inline void PortPriorityRequest::clear_priority_mode() {
  priority_mode_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PortPriorityRequest::_internal_priority_mode() const {
  return priority_mode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PortPriorityRequest::priority_mode() const {
  // @@protoc_insertion_point(field_get:ola.proto.PortPriorityRequest.priority_mode)
  return _internal_priority_mode();
}
inline void PortPriorityRequest::_internal_set_priority_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  priority_mode_ = value;
}
inline void PortPriorityRequest::set_priority_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_priority_mode(value);
  // @@protoc_insertion_point(field_set:ola.proto.PortPriorityRequest.priority_mode)
}

// optional int32 priority = 5;
inline bool PortPriorityRequest::_internal_has_priority() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool PortPriorityRequest::has_priority() const {
  return _internal_has_priority();
}
inline void PortPriorityRequest::clear_priority() {
  priority_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PortPriorityRequest::_internal_priority() const {
  return priority_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PortPriorityRequest::priority() const {
  // @@protoc_insertion_point(field_get:ola.proto.PortPriorityRequest.priority)
  return _internal_priority();
}
inline void PortPriorityRequest::_internal_set_priority(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  priority_ = value;
}
inline void PortPriorityRequest::set_priority(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_priority(value);
  // @@protoc_insertion_point(field_set:ola.proto.PortPriorityRequest.priority)
}

// -------------------------------------------------------------------

// DeviceConfigRequest

// required int32 device_alias = 1;
inline bool DeviceConfigRequest::_internal_has_device_alias() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DeviceConfigRequest::has_device_alias() const {
  return _internal_has_device_alias();
}
inline void DeviceConfigRequest::clear_device_alias() {
  device_alias_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeviceConfigRequest::_internal_device_alias() const {
  return device_alias_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeviceConfigRequest::device_alias() const {
  // @@protoc_insertion_point(field_get:ola.proto.DeviceConfigRequest.device_alias)
  return _internal_device_alias();
}
inline void DeviceConfigRequest::_internal_set_device_alias(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  device_alias_ = value;
}
inline void DeviceConfigRequest::set_device_alias(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_device_alias(value);
  // @@protoc_insertion_point(field_set:ola.proto.DeviceConfigRequest.device_alias)
}

// required bytes data = 2;
inline bool DeviceConfigRequest::_internal_has_data() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DeviceConfigRequest::has_data() const {
  return _internal_has_data();
}
inline void DeviceConfigRequest::clear_data() {
  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DeviceConfigRequest::data() const {
  // @@protoc_insertion_point(field_get:ola.proto.DeviceConfigRequest.data)
  return _internal_data();
}
inline void DeviceConfigRequest::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:ola.proto.DeviceConfigRequest.data)
}
inline std::string* DeviceConfigRequest::mutable_data() {
  // @@protoc_insertion_point(field_mutable:ola.proto.DeviceConfigRequest.data)
  return _internal_mutable_data();
}
inline const std::string& DeviceConfigRequest::_internal_data() const {
  return data_.Get();
}
inline void DeviceConfigRequest::_internal_set_data(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeviceConfigRequest::set_data(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  data_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ola.proto.DeviceConfigRequest.data)
}
inline void DeviceConfigRequest::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ola.proto.DeviceConfigRequest.data)
}
inline void DeviceConfigRequest::set_data(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ola.proto.DeviceConfigRequest.data)
}
inline std::string* DeviceConfigRequest::_internal_mutable_data() {
  _has_bits_[0] |= 0x00000001u;
  return data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeviceConfigRequest::release_data() {
  // @@protoc_insertion_point(field_release:ola.proto.DeviceConfigRequest.data)
  if (!_internal_has_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return data_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeviceConfigRequest::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ola.proto.DeviceConfigRequest.data)
}
inline std::string* DeviceConfigRequest::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ola.proto.DeviceConfigRequest.data)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return data_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeviceConfigRequest::unsafe_arena_set_allocated_data(
    std::string* data) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (data != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  data_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      data, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ola.proto.DeviceConfigRequest.data)
}

// -------------------------------------------------------------------

// DeviceConfigReply

// required bytes data = 1;
inline bool DeviceConfigReply::_internal_has_data() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DeviceConfigReply::has_data() const {
  return _internal_has_data();
}
inline void DeviceConfigReply::clear_data() {
  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DeviceConfigReply::data() const {
  // @@protoc_insertion_point(field_get:ola.proto.DeviceConfigReply.data)
  return _internal_data();
}
inline void DeviceConfigReply::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:ola.proto.DeviceConfigReply.data)
}
inline std::string* DeviceConfigReply::mutable_data() {
  // @@protoc_insertion_point(field_mutable:ola.proto.DeviceConfigReply.data)
  return _internal_mutable_data();
}
inline const std::string& DeviceConfigReply::_internal_data() const {
  return data_.Get();
}
inline void DeviceConfigReply::_internal_set_data(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeviceConfigReply::set_data(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  data_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ola.proto.DeviceConfigReply.data)
}
inline void DeviceConfigReply::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ola.proto.DeviceConfigReply.data)
}
inline void DeviceConfigReply::set_data(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ola.proto.DeviceConfigReply.data)
}
inline std::string* DeviceConfigReply::_internal_mutable_data() {
  _has_bits_[0] |= 0x00000001u;
  return data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeviceConfigReply::release_data() {
  // @@protoc_insertion_point(field_release:ola.proto.DeviceConfigReply.data)
  if (!_internal_has_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return data_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeviceConfigReply::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ola.proto.DeviceConfigReply.data)
}
inline std::string* DeviceConfigReply::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ola.proto.DeviceConfigReply.data)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return data_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeviceConfigReply::unsafe_arena_set_allocated_data(
    std::string* data) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (data != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  data_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      data, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ola.proto.DeviceConfigReply.data)
}

// -------------------------------------------------------------------

// UID

// required int32 esta_id = 1;
inline bool UID::_internal_has_esta_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool UID::has_esta_id() const {
  return _internal_has_esta_id();
}
inline void UID::clear_esta_id() {
  esta_id_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UID::_internal_esta_id() const {
  return esta_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UID::esta_id() const {
  // @@protoc_insertion_point(field_get:ola.proto.UID.esta_id)
  return _internal_esta_id();
}
inline void UID::_internal_set_esta_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  esta_id_ = value;
}
inline void UID::set_esta_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_esta_id(value);
  // @@protoc_insertion_point(field_set:ola.proto.UID.esta_id)
}

// required fixed32 device_id = 2;
inline bool UID::_internal_has_device_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool UID::has_device_id() const {
  return _internal_has_device_id();
}
inline void UID::clear_device_id() {
  device_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UID::_internal_device_id() const {
  return device_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UID::device_id() const {
  // @@protoc_insertion_point(field_get:ola.proto.UID.device_id)
  return _internal_device_id();
}
inline void UID::_internal_set_device_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  device_id_ = value;
}
inline void UID::set_device_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_device_id(value);
  // @@protoc_insertion_point(field_set:ola.proto.UID.device_id)
}

// -------------------------------------------------------------------

// UniverseRequest

// required int32 universe = 1;
inline bool UniverseRequest::_internal_has_universe() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool UniverseRequest::has_universe() const {
  return _internal_has_universe();
}
inline void UniverseRequest::clear_universe() {
  universe_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UniverseRequest::_internal_universe() const {
  return universe_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UniverseRequest::universe() const {
  // @@protoc_insertion_point(field_get:ola.proto.UniverseRequest.universe)
  return _internal_universe();
}
inline void UniverseRequest::_internal_set_universe(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  universe_ = value;
}
inline void UniverseRequest::set_universe(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_universe(value);
  // @@protoc_insertion_point(field_set:ola.proto.UniverseRequest.universe)
}

// -------------------------------------------------------------------

// DiscoveryRequest

// required int32 universe = 1;
inline bool DiscoveryRequest::_internal_has_universe() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DiscoveryRequest::has_universe() const {
  return _internal_has_universe();
}
inline void DiscoveryRequest::clear_universe() {
  universe_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DiscoveryRequest::_internal_universe() const {
  return universe_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DiscoveryRequest::universe() const {
  // @@protoc_insertion_point(field_get:ola.proto.DiscoveryRequest.universe)
  return _internal_universe();
}
inline void DiscoveryRequest::_internal_set_universe(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  universe_ = value;
}
inline void DiscoveryRequest::set_universe(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_universe(value);
  // @@protoc_insertion_point(field_set:ola.proto.DiscoveryRequest.universe)
}

// required bool full = 2;
inline bool DiscoveryRequest::_internal_has_full() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DiscoveryRequest::has_full() const {
  return _internal_has_full();
}
inline void DiscoveryRequest::clear_full() {
  full_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool DiscoveryRequest::_internal_full() const {
  return full_;
}
inline bool DiscoveryRequest::full() const {
  // @@protoc_insertion_point(field_get:ola.proto.DiscoveryRequest.full)
  return _internal_full();
}
inline void DiscoveryRequest::_internal_set_full(bool value) {
  _has_bits_[0] |= 0x00000002u;
  full_ = value;
}
inline void DiscoveryRequest::set_full(bool value) {
  _internal_set_full(value);
  // @@protoc_insertion_point(field_set:ola.proto.DiscoveryRequest.full)
}

// -------------------------------------------------------------------

// UIDListReply

// required int32 universe = 1;
inline bool UIDListReply::_internal_has_universe() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool UIDListReply::has_universe() const {
  return _internal_has_universe();
}
inline void UIDListReply::clear_universe() {
  universe_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UIDListReply::_internal_universe() const {
  return universe_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UIDListReply::universe() const {
  // @@protoc_insertion_point(field_get:ola.proto.UIDListReply.universe)
  return _internal_universe();
}
inline void UIDListReply::_internal_set_universe(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  universe_ = value;
}
inline void UIDListReply::set_universe(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_universe(value);
  // @@protoc_insertion_point(field_set:ola.proto.UIDListReply.universe)
}

// repeated .ola.proto.UID uid = 2;
inline int UIDListReply::_internal_uid_size() const {
  return uid_.size();
}
inline int UIDListReply::uid_size() const {
  return _internal_uid_size();
}
inline void UIDListReply::clear_uid() {
  uid_.Clear();
}
inline ::ola::proto::UID* UIDListReply::mutable_uid(int index) {
  // @@protoc_insertion_point(field_mutable:ola.proto.UIDListReply.uid)
  return uid_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ola::proto::UID >*
UIDListReply::mutable_uid() {
  // @@protoc_insertion_point(field_mutable_list:ola.proto.UIDListReply.uid)
  return &uid_;
}
inline const ::ola::proto::UID& UIDListReply::_internal_uid(int index) const {
  return uid_.Get(index);
}
inline const ::ola::proto::UID& UIDListReply::uid(int index) const {
  // @@protoc_insertion_point(field_get:ola.proto.UIDListReply.uid)
  return _internal_uid(index);
}
inline ::ola::proto::UID* UIDListReply::_internal_add_uid() {
  return uid_.Add();
}
inline ::ola::proto::UID* UIDListReply::add_uid() {
  // @@protoc_insertion_point(field_add:ola.proto.UIDListReply.uid)
  return _internal_add_uid();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ola::proto::UID >&
UIDListReply::uid() const {
  // @@protoc_insertion_point(field_list:ola.proto.UIDListReply.uid)
  return uid_;
}

// -------------------------------------------------------------------

// RDMRequestOverrideOptions

// optional uint32 sub_start_code = 1;
inline bool RDMRequestOverrideOptions::_internal_has_sub_start_code() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RDMRequestOverrideOptions::has_sub_start_code() const {
  return _internal_has_sub_start_code();
}
inline void RDMRequestOverrideOptions::clear_sub_start_code() {
  sub_start_code_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RDMRequestOverrideOptions::_internal_sub_start_code() const {
  return sub_start_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RDMRequestOverrideOptions::sub_start_code() const {
  // @@protoc_insertion_point(field_get:ola.proto.RDMRequestOverrideOptions.sub_start_code)
  return _internal_sub_start_code();
}
inline void RDMRequestOverrideOptions::_internal_set_sub_start_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  sub_start_code_ = value;
}
inline void RDMRequestOverrideOptions::set_sub_start_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sub_start_code(value);
  // @@protoc_insertion_point(field_set:ola.proto.RDMRequestOverrideOptions.sub_start_code)
}

// optional uint32 message_length = 2;
inline bool RDMRequestOverrideOptions::_internal_has_message_length() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RDMRequestOverrideOptions::has_message_length() const {
  return _internal_has_message_length();
}
inline void RDMRequestOverrideOptions::clear_message_length() {
  message_length_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RDMRequestOverrideOptions::_internal_message_length() const {
  return message_length_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RDMRequestOverrideOptions::message_length() const {
  // @@protoc_insertion_point(field_get:ola.proto.RDMRequestOverrideOptions.message_length)
  return _internal_message_length();
}
inline void RDMRequestOverrideOptions::_internal_set_message_length(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  message_length_ = value;
}
inline void RDMRequestOverrideOptions::set_message_length(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_message_length(value);
  // @@protoc_insertion_point(field_set:ola.proto.RDMRequestOverrideOptions.message_length)
}

// optional uint32 message_count = 3;
inline bool RDMRequestOverrideOptions::_internal_has_message_count() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool RDMRequestOverrideOptions::has_message_count() const {
  return _internal_has_message_count();
}
inline void RDMRequestOverrideOptions::clear_message_count() {
  message_count_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RDMRequestOverrideOptions::_internal_message_count() const {
  return message_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RDMRequestOverrideOptions::message_count() const {
  // @@protoc_insertion_point(field_get:ola.proto.RDMRequestOverrideOptions.message_count)
  return _internal_message_count();
}
inline void RDMRequestOverrideOptions::_internal_set_message_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  message_count_ = value;
}
inline void RDMRequestOverrideOptions::set_message_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_message_count(value);
  // @@protoc_insertion_point(field_set:ola.proto.RDMRequestOverrideOptions.message_count)
}

// optional uint32 checksum = 4;
inline bool RDMRequestOverrideOptions::_internal_has_checksum() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool RDMRequestOverrideOptions::has_checksum() const {
  return _internal_has_checksum();
}
inline void RDMRequestOverrideOptions::clear_checksum() {
  checksum_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RDMRequestOverrideOptions::_internal_checksum() const {
  return checksum_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RDMRequestOverrideOptions::checksum() const {
  // @@protoc_insertion_point(field_get:ola.proto.RDMRequestOverrideOptions.checksum)
  return _internal_checksum();
}
inline void RDMRequestOverrideOptions::_internal_set_checksum(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  checksum_ = value;
}
inline void RDMRequestOverrideOptions::set_checksum(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_checksum(value);
  // @@protoc_insertion_point(field_set:ola.proto.RDMRequestOverrideOptions.checksum)
}

// -------------------------------------------------------------------

// RDMRequest

// required int32 universe = 1;
inline bool RDMRequest::_internal_has_universe() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool RDMRequest::has_universe() const {
  return _internal_has_universe();
}
inline void RDMRequest::clear_universe() {
  universe_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RDMRequest::_internal_universe() const {
  return universe_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RDMRequest::universe() const {
  // @@protoc_insertion_point(field_get:ola.proto.RDMRequest.universe)
  return _internal_universe();
}
inline void RDMRequest::_internal_set_universe(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  universe_ = value;
}
inline void RDMRequest::set_universe(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_universe(value);
  // @@protoc_insertion_point(field_set:ola.proto.RDMRequest.universe)
}

// required .ola.proto.UID uid = 2;
inline bool RDMRequest::_internal_has_uid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || uid_ != nullptr);
  return value;
}
inline bool RDMRequest::has_uid() const {
  return _internal_has_uid();
}
inline void RDMRequest::clear_uid() {
  if (uid_ != nullptr) uid_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::ola::proto::UID& RDMRequest::_internal_uid() const {
  const ::ola::proto::UID* p = uid_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ola::proto::UID*>(
      &::ola::proto::_UID_default_instance_);
}
inline const ::ola::proto::UID& RDMRequest::uid() const {
  // @@protoc_insertion_point(field_get:ola.proto.RDMRequest.uid)
  return _internal_uid();
}
inline void RDMRequest::unsafe_arena_set_allocated_uid(
    ::ola::proto::UID* uid) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(uid_);
  }
  uid_ = uid;
  if (uid) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ola.proto.RDMRequest.uid)
}
inline ::ola::proto::UID* RDMRequest::release_uid() {
  auto temp = unsafe_arena_release_uid();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ola::proto::UID* RDMRequest::unsafe_arena_release_uid() {
  // @@protoc_insertion_point(field_release:ola.proto.RDMRequest.uid)
  _has_bits_[0] &= ~0x00000002u;
  ::ola::proto::UID* temp = uid_;
  uid_ = nullptr;
  return temp;
}
inline ::ola::proto::UID* RDMRequest::_internal_mutable_uid() {
  _has_bits_[0] |= 0x00000002u;
  if (uid_ == nullptr) {
    auto* p = CreateMaybeMessage<::ola::proto::UID>(GetArena());
    uid_ = p;
  }
  return uid_;
}
inline ::ola::proto::UID* RDMRequest::mutable_uid() {
  // @@protoc_insertion_point(field_mutable:ola.proto.RDMRequest.uid)
  return _internal_mutable_uid();
}
inline void RDMRequest::set_allocated_uid(::ola::proto::UID* uid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete uid_;
  }
  if (uid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(uid);
    if (message_arena != submessage_arena) {
      uid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, uid, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  uid_ = uid;
  // @@protoc_insertion_point(field_set_allocated:ola.proto.RDMRequest.uid)
}

// required int32 sub_device = 3;
inline bool RDMRequest::_internal_has_sub_device() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool RDMRequest::has_sub_device() const {
  return _internal_has_sub_device();
}
inline void RDMRequest::clear_sub_device() {
  sub_device_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RDMRequest::_internal_sub_device() const {
  return sub_device_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RDMRequest::sub_device() const {
  // @@protoc_insertion_point(field_get:ola.proto.RDMRequest.sub_device)
  return _internal_sub_device();
}
inline void RDMRequest::_internal_set_sub_device(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  sub_device_ = value;
}
inline void RDMRequest::set_sub_device(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sub_device(value);
  // @@protoc_insertion_point(field_set:ola.proto.RDMRequest.sub_device)
}

// required int32 param_id = 4;
inline bool RDMRequest::_internal_has_param_id() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool RDMRequest::has_param_id() const {
  return _internal_has_param_id();
}
inline void RDMRequest::clear_param_id() {
  param_id_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RDMRequest::_internal_param_id() const {
  return param_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RDMRequest::param_id() const {
  // @@protoc_insertion_point(field_get:ola.proto.RDMRequest.param_id)
  return _internal_param_id();
}
inline void RDMRequest::_internal_set_param_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  param_id_ = value;
}
inline void RDMRequest::set_param_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_param_id(value);
  // @@protoc_insertion_point(field_set:ola.proto.RDMRequest.param_id)
}

// required bytes data = 5;
inline bool RDMRequest::_internal_has_data() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RDMRequest::has_data() const {
  return _internal_has_data();
}
inline void RDMRequest::clear_data() {
  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RDMRequest::data() const {
  // @@protoc_insertion_point(field_get:ola.proto.RDMRequest.data)
  return _internal_data();
}
inline void RDMRequest::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:ola.proto.RDMRequest.data)
}
inline std::string* RDMRequest::mutable_data() {
  // @@protoc_insertion_point(field_mutable:ola.proto.RDMRequest.data)
  return _internal_mutable_data();
}
inline const std::string& RDMRequest::_internal_data() const {
  return data_.Get();
}
inline void RDMRequest::_internal_set_data(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RDMRequest::set_data(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  data_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ola.proto.RDMRequest.data)
}
inline void RDMRequest::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ola.proto.RDMRequest.data)
}
inline void RDMRequest::set_data(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ola.proto.RDMRequest.data)
}
inline std::string* RDMRequest::_internal_mutable_data() {
  _has_bits_[0] |= 0x00000001u;
  return data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RDMRequest::release_data() {
  // @@protoc_insertion_point(field_release:ola.proto.RDMRequest.data)
  if (!_internal_has_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return data_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RDMRequest::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ola.proto.RDMRequest.data)
}
inline std::string* RDMRequest::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ola.proto.RDMRequest.data)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return data_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RDMRequest::unsafe_arena_set_allocated_data(
    std::string* data) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (data != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  data_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      data, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ola.proto.RDMRequest.data)
}

// required bool is_set = 6;
inline bool RDMRequest::_internal_has_is_set() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool RDMRequest::has_is_set() const {
  return _internal_has_is_set();
}
inline void RDMRequest::clear_is_set() {
  is_set_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool RDMRequest::_internal_is_set() const {
  return is_set_;
}
inline bool RDMRequest::is_set() const {
  // @@protoc_insertion_point(field_get:ola.proto.RDMRequest.is_set)
  return _internal_is_set();
}
inline void RDMRequest::_internal_set_is_set(bool value) {
  _has_bits_[0] |= 0x00000040u;
  is_set_ = value;
}
inline void RDMRequest::set_is_set(bool value) {
  _internal_set_is_set(value);
  // @@protoc_insertion_point(field_set:ola.proto.RDMRequest.is_set)
}

// optional bool include_raw_response = 7 [default = false];
inline bool RDMRequest::_internal_has_include_raw_response() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool RDMRequest::has_include_raw_response() const {
  return _internal_has_include_raw_response();
}
inline void RDMRequest::clear_include_raw_response() {
  include_raw_response_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool RDMRequest::_internal_include_raw_response() const {
  return include_raw_response_;
}
inline bool RDMRequest::include_raw_response() const {
  // @@protoc_insertion_point(field_get:ola.proto.RDMRequest.include_raw_response)
  return _internal_include_raw_response();
}
inline void RDMRequest::_internal_set_include_raw_response(bool value) {
  _has_bits_[0] |= 0x00000080u;
  include_raw_response_ = value;
}
inline void RDMRequest::set_include_raw_response(bool value) {
  _internal_set_include_raw_response(value);
  // @@protoc_insertion_point(field_set:ola.proto.RDMRequest.include_raw_response)
}

// optional .ola.proto.RDMRequestOverrideOptions options = 8;
inline bool RDMRequest::_internal_has_options() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || options_ != nullptr);
  return value;
}
inline bool RDMRequest::has_options() const {
  return _internal_has_options();
}
inline void RDMRequest::clear_options() {
  if (options_ != nullptr) options_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::ola::proto::RDMRequestOverrideOptions& RDMRequest::_internal_options() const {
  const ::ola::proto::RDMRequestOverrideOptions* p = options_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ola::proto::RDMRequestOverrideOptions*>(
      &::ola::proto::_RDMRequestOverrideOptions_default_instance_);
}
inline const ::ola::proto::RDMRequestOverrideOptions& RDMRequest::options() const {
  // @@protoc_insertion_point(field_get:ola.proto.RDMRequest.options)
  return _internal_options();
}
inline void RDMRequest::unsafe_arena_set_allocated_options(
    ::ola::proto::RDMRequestOverrideOptions* options) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(options_);
  }
  options_ = options;
  if (options) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ola.proto.RDMRequest.options)
}
inline ::ola::proto::RDMRequestOverrideOptions* RDMRequest::release_options() {
  auto temp = unsafe_arena_release_options();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ola::proto::RDMRequestOverrideOptions* RDMRequest::unsafe_arena_release_options() {
  // @@protoc_insertion_point(field_release:ola.proto.RDMRequest.options)
  _has_bits_[0] &= ~0x00000004u;
  ::ola::proto::RDMRequestOverrideOptions* temp = options_;
  options_ = nullptr;
  return temp;
}
inline ::ola::proto::RDMRequestOverrideOptions* RDMRequest::_internal_mutable_options() {
  _has_bits_[0] |= 0x00000004u;
  if (options_ == nullptr) {
    auto* p = CreateMaybeMessage<::ola::proto::RDMRequestOverrideOptions>(GetArena());
    options_ = p;
  }
  return options_;
}
inline ::ola::proto::RDMRequestOverrideOptions* RDMRequest::mutable_options() {
  // @@protoc_insertion_point(field_mutable:ola.proto.RDMRequest.options)
  return _internal_mutable_options();
}
inline void RDMRequest::set_allocated_options(::ola::proto::RDMRequestOverrideOptions* options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete options_;
  }
  if (options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(options);
    if (message_arena != submessage_arena) {
      options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, options, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  options_ = options;
  // @@protoc_insertion_point(field_set_allocated:ola.proto.RDMRequest.options)
}

// -------------------------------------------------------------------

// RDMDiscoveryRequest

// required int32 universe = 1;
inline bool RDMDiscoveryRequest::_internal_has_universe() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool RDMDiscoveryRequest::has_universe() const {
  return _internal_has_universe();
}
inline void RDMDiscoveryRequest::clear_universe() {
  universe_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RDMDiscoveryRequest::_internal_universe() const {
  return universe_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RDMDiscoveryRequest::universe() const {
  // @@protoc_insertion_point(field_get:ola.proto.RDMDiscoveryRequest.universe)
  return _internal_universe();
}
inline void RDMDiscoveryRequest::_internal_set_universe(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  universe_ = value;
}
inline void RDMDiscoveryRequest::set_universe(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_universe(value);
  // @@protoc_insertion_point(field_set:ola.proto.RDMDiscoveryRequest.universe)
}

// required .ola.proto.UID uid = 2;
inline bool RDMDiscoveryRequest::_internal_has_uid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || uid_ != nullptr);
  return value;
}
inline bool RDMDiscoveryRequest::has_uid() const {
  return _internal_has_uid();
}
inline void RDMDiscoveryRequest::clear_uid() {
  if (uid_ != nullptr) uid_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::ola::proto::UID& RDMDiscoveryRequest::_internal_uid() const {
  const ::ola::proto::UID* p = uid_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ola::proto::UID*>(
      &::ola::proto::_UID_default_instance_);
}
inline const ::ola::proto::UID& RDMDiscoveryRequest::uid() const {
  // @@protoc_insertion_point(field_get:ola.proto.RDMDiscoveryRequest.uid)
  return _internal_uid();
}
inline void RDMDiscoveryRequest::unsafe_arena_set_allocated_uid(
    ::ola::proto::UID* uid) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(uid_);
  }
  uid_ = uid;
  if (uid) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ola.proto.RDMDiscoveryRequest.uid)
}
inline ::ola::proto::UID* RDMDiscoveryRequest::release_uid() {
  auto temp = unsafe_arena_release_uid();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ola::proto::UID* RDMDiscoveryRequest::unsafe_arena_release_uid() {
  // @@protoc_insertion_point(field_release:ola.proto.RDMDiscoveryRequest.uid)
  _has_bits_[0] &= ~0x00000002u;
  ::ola::proto::UID* temp = uid_;
  uid_ = nullptr;
  return temp;
}
inline ::ola::proto::UID* RDMDiscoveryRequest::_internal_mutable_uid() {
  _has_bits_[0] |= 0x00000002u;
  if (uid_ == nullptr) {
    auto* p = CreateMaybeMessage<::ola::proto::UID>(GetArena());
    uid_ = p;
  }
  return uid_;
}
inline ::ola::proto::UID* RDMDiscoveryRequest::mutable_uid() {
  // @@protoc_insertion_point(field_mutable:ola.proto.RDMDiscoveryRequest.uid)
  return _internal_mutable_uid();
}
inline void RDMDiscoveryRequest::set_allocated_uid(::ola::proto::UID* uid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete uid_;
  }
  if (uid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(uid);
    if (message_arena != submessage_arena) {
      uid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, uid, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  uid_ = uid;
  // @@protoc_insertion_point(field_set_allocated:ola.proto.RDMDiscoveryRequest.uid)
}

// required int32 sub_device = 3;
inline bool RDMDiscoveryRequest::_internal_has_sub_device() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool RDMDiscoveryRequest::has_sub_device() const {
  return _internal_has_sub_device();
}
inline void RDMDiscoveryRequest::clear_sub_device() {
  sub_device_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RDMDiscoveryRequest::_internal_sub_device() const {
  return sub_device_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RDMDiscoveryRequest::sub_device() const {
  // @@protoc_insertion_point(field_get:ola.proto.RDMDiscoveryRequest.sub_device)
  return _internal_sub_device();
}
inline void RDMDiscoveryRequest::_internal_set_sub_device(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  sub_device_ = value;
}
inline void RDMDiscoveryRequest::set_sub_device(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sub_device(value);
  // @@protoc_insertion_point(field_set:ola.proto.RDMDiscoveryRequest.sub_device)
}

// required int32 param_id = 4;
inline bool RDMDiscoveryRequest::_internal_has_param_id() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool RDMDiscoveryRequest::has_param_id() const {
  return _internal_has_param_id();
}
inline void RDMDiscoveryRequest::clear_param_id() {
  param_id_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RDMDiscoveryRequest::_internal_param_id() const {
  return param_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RDMDiscoveryRequest::param_id() const {
  // @@protoc_insertion_point(field_get:ola.proto.RDMDiscoveryRequest.param_id)
  return _internal_param_id();
}
inline void RDMDiscoveryRequest::_internal_set_param_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  param_id_ = value;
}
inline void RDMDiscoveryRequest::set_param_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_param_id(value);
  // @@protoc_insertion_point(field_set:ola.proto.RDMDiscoveryRequest.param_id)
}

// required bytes data = 5;
inline bool RDMDiscoveryRequest::_internal_has_data() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RDMDiscoveryRequest::has_data() const {
  return _internal_has_data();
}
inline void RDMDiscoveryRequest::clear_data() {
  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RDMDiscoveryRequest::data() const {
  // @@protoc_insertion_point(field_get:ola.proto.RDMDiscoveryRequest.data)
  return _internal_data();
}
inline void RDMDiscoveryRequest::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:ola.proto.RDMDiscoveryRequest.data)
}
inline std::string* RDMDiscoveryRequest::mutable_data() {
  // @@protoc_insertion_point(field_mutable:ola.proto.RDMDiscoveryRequest.data)
  return _internal_mutable_data();
}
inline const std::string& RDMDiscoveryRequest::_internal_data() const {
  return data_.Get();
}
inline void RDMDiscoveryRequest::_internal_set_data(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RDMDiscoveryRequest::set_data(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  data_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ola.proto.RDMDiscoveryRequest.data)
}
inline void RDMDiscoveryRequest::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ola.proto.RDMDiscoveryRequest.data)
}
inline void RDMDiscoveryRequest::set_data(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ola.proto.RDMDiscoveryRequest.data)
}
inline std::string* RDMDiscoveryRequest::_internal_mutable_data() {
  _has_bits_[0] |= 0x00000001u;
  return data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RDMDiscoveryRequest::release_data() {
  // @@protoc_insertion_point(field_release:ola.proto.RDMDiscoveryRequest.data)
  if (!_internal_has_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return data_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RDMDiscoveryRequest::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ola.proto.RDMDiscoveryRequest.data)
}
inline std::string* RDMDiscoveryRequest::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ola.proto.RDMDiscoveryRequest.data)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return data_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RDMDiscoveryRequest::unsafe_arena_set_allocated_data(
    std::string* data) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (data != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  data_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      data, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ola.proto.RDMDiscoveryRequest.data)
}

// optional bool include_raw_response = 6 [default = false];
inline bool RDMDiscoveryRequest::_internal_has_include_raw_response() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool RDMDiscoveryRequest::has_include_raw_response() const {
  return _internal_has_include_raw_response();
}
inline void RDMDiscoveryRequest::clear_include_raw_response() {
  include_raw_response_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool RDMDiscoveryRequest::_internal_include_raw_response() const {
  return include_raw_response_;
}
inline bool RDMDiscoveryRequest::include_raw_response() const {
  // @@protoc_insertion_point(field_get:ola.proto.RDMDiscoveryRequest.include_raw_response)
  return _internal_include_raw_response();
}
inline void RDMDiscoveryRequest::_internal_set_include_raw_response(bool value) {
  _has_bits_[0] |= 0x00000040u;
  include_raw_response_ = value;
}
inline void RDMDiscoveryRequest::set_include_raw_response(bool value) {
  _internal_set_include_raw_response(value);
  // @@protoc_insertion_point(field_set:ola.proto.RDMDiscoveryRequest.include_raw_response)
}

// optional .ola.proto.RDMRequestOverrideOptions options = 8;
inline bool RDMDiscoveryRequest::_internal_has_options() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || options_ != nullptr);
  return value;
}
inline bool RDMDiscoveryRequest::has_options() const {
  return _internal_has_options();
}
inline void RDMDiscoveryRequest::clear_options() {
  if (options_ != nullptr) options_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::ola::proto::RDMRequestOverrideOptions& RDMDiscoveryRequest::_internal_options() const {
  const ::ola::proto::RDMRequestOverrideOptions* p = options_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ola::proto::RDMRequestOverrideOptions*>(
      &::ola::proto::_RDMRequestOverrideOptions_default_instance_);
}
inline const ::ola::proto::RDMRequestOverrideOptions& RDMDiscoveryRequest::options() const {
  // @@protoc_insertion_point(field_get:ola.proto.RDMDiscoveryRequest.options)
  return _internal_options();
}
inline void RDMDiscoveryRequest::unsafe_arena_set_allocated_options(
    ::ola::proto::RDMRequestOverrideOptions* options) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(options_);
  }
  options_ = options;
  if (options) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ola.proto.RDMDiscoveryRequest.options)
}
inline ::ola::proto::RDMRequestOverrideOptions* RDMDiscoveryRequest::release_options() {
  auto temp = unsafe_arena_release_options();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ola::proto::RDMRequestOverrideOptions* RDMDiscoveryRequest::unsafe_arena_release_options() {
  // @@protoc_insertion_point(field_release:ola.proto.RDMDiscoveryRequest.options)
  _has_bits_[0] &= ~0x00000004u;
  ::ola::proto::RDMRequestOverrideOptions* temp = options_;
  options_ = nullptr;
  return temp;
}
inline ::ola::proto::RDMRequestOverrideOptions* RDMDiscoveryRequest::_internal_mutable_options() {
  _has_bits_[0] |= 0x00000004u;
  if (options_ == nullptr) {
    auto* p = CreateMaybeMessage<::ola::proto::RDMRequestOverrideOptions>(GetArena());
    options_ = p;
  }
  return options_;
}
inline ::ola::proto::RDMRequestOverrideOptions* RDMDiscoveryRequest::mutable_options() {
  // @@protoc_insertion_point(field_mutable:ola.proto.RDMDiscoveryRequest.options)
  return _internal_mutable_options();
}
inline void RDMDiscoveryRequest::set_allocated_options(::ola::proto::RDMRequestOverrideOptions* options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete options_;
  }
  if (options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(options);
    if (message_arena != submessage_arena) {
      options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, options, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  options_ = options;
  // @@protoc_insertion_point(field_set_allocated:ola.proto.RDMDiscoveryRequest.options)
}

// -------------------------------------------------------------------

// RDMFrameTiming

// optional int32 response_delay = 1;
inline bool RDMFrameTiming::_internal_has_response_delay() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RDMFrameTiming::has_response_delay() const {
  return _internal_has_response_delay();
}
inline void RDMFrameTiming::clear_response_delay() {
  response_delay_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RDMFrameTiming::_internal_response_delay() const {
  return response_delay_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RDMFrameTiming::response_delay() const {
  // @@protoc_insertion_point(field_get:ola.proto.RDMFrameTiming.response_delay)
  return _internal_response_delay();
}
inline void RDMFrameTiming::_internal_set_response_delay(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  response_delay_ = value;
}
inline void RDMFrameTiming::set_response_delay(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_response_delay(value);
  // @@protoc_insertion_point(field_set:ola.proto.RDMFrameTiming.response_delay)
}

// optional int32 break_time = 2;
inline bool RDMFrameTiming::_internal_has_break_time() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RDMFrameTiming::has_break_time() const {
  return _internal_has_break_time();
}
inline void RDMFrameTiming::clear_break_time() {
  break_time_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RDMFrameTiming::_internal_break_time() const {
  return break_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RDMFrameTiming::break_time() const {
  // @@protoc_insertion_point(field_get:ola.proto.RDMFrameTiming.break_time)
  return _internal_break_time();
}
inline void RDMFrameTiming::_internal_set_break_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  break_time_ = value;
}
inline void RDMFrameTiming::set_break_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_break_time(value);
  // @@protoc_insertion_point(field_set:ola.proto.RDMFrameTiming.break_time)
}

// optional int32 mark_time = 3;
inline bool RDMFrameTiming::_internal_has_mark_time() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool RDMFrameTiming::has_mark_time() const {
  return _internal_has_mark_time();
}
inline void RDMFrameTiming::clear_mark_time() {
  mark_time_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RDMFrameTiming::_internal_mark_time() const {
  return mark_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RDMFrameTiming::mark_time() const {
  // @@protoc_insertion_point(field_get:ola.proto.RDMFrameTiming.mark_time)
  return _internal_mark_time();
}
inline void RDMFrameTiming::_internal_set_mark_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  mark_time_ = value;
}
inline void RDMFrameTiming::set_mark_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mark_time(value);
  // @@protoc_insertion_point(field_set:ola.proto.RDMFrameTiming.mark_time)
}

// optional int32 data_time = 4;
inline bool RDMFrameTiming::_internal_has_data_time() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool RDMFrameTiming::has_data_time() const {
  return _internal_has_data_time();
}
inline void RDMFrameTiming::clear_data_time() {
  data_time_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RDMFrameTiming::_internal_data_time() const {
  return data_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RDMFrameTiming::data_time() const {
  // @@protoc_insertion_point(field_get:ola.proto.RDMFrameTiming.data_time)
  return _internal_data_time();
}
inline void RDMFrameTiming::_internal_set_data_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  data_time_ = value;
}
inline void RDMFrameTiming::set_data_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_data_time(value);
  // @@protoc_insertion_point(field_set:ola.proto.RDMFrameTiming.data_time)
}

// -------------------------------------------------------------------

// RDMFrame

// optional bytes raw_response = 1;
inline bool RDMFrame::_internal_has_raw_response() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RDMFrame::has_raw_response() const {
  return _internal_has_raw_response();
}
inline void RDMFrame::clear_raw_response() {
  raw_response_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RDMFrame::raw_response() const {
  // @@protoc_insertion_point(field_get:ola.proto.RDMFrame.raw_response)
  return _internal_raw_response();
}
inline void RDMFrame::set_raw_response(const std::string& value) {
  _internal_set_raw_response(value);
  // @@protoc_insertion_point(field_set:ola.proto.RDMFrame.raw_response)
}
inline std::string* RDMFrame::mutable_raw_response() {
  // @@protoc_insertion_point(field_mutable:ola.proto.RDMFrame.raw_response)
  return _internal_mutable_raw_response();
}
inline const std::string& RDMFrame::_internal_raw_response() const {
  return raw_response_.Get();
}
inline void RDMFrame::_internal_set_raw_response(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  raw_response_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RDMFrame::set_raw_response(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  raw_response_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ola.proto.RDMFrame.raw_response)
}
inline void RDMFrame::set_raw_response(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  raw_response_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ola.proto.RDMFrame.raw_response)
}
inline void RDMFrame::set_raw_response(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  raw_response_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ola.proto.RDMFrame.raw_response)
}
inline std::string* RDMFrame::_internal_mutable_raw_response() {
  _has_bits_[0] |= 0x00000001u;
  return raw_response_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RDMFrame::release_raw_response() {
  // @@protoc_insertion_point(field_release:ola.proto.RDMFrame.raw_response)
  if (!_internal_has_raw_response()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return raw_response_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RDMFrame::set_allocated_raw_response(std::string* raw_response) {
  if (raw_response != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  raw_response_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), raw_response,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ola.proto.RDMFrame.raw_response)
}
inline std::string* RDMFrame::unsafe_arena_release_raw_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ola.proto.RDMFrame.raw_response)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return raw_response_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RDMFrame::unsafe_arena_set_allocated_raw_response(
    std::string* raw_response) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (raw_response != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  raw_response_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      raw_response, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ola.proto.RDMFrame.raw_response)
}

// optional .ola.proto.RDMFrameTiming timing = 2;
inline bool RDMFrame::_internal_has_timing() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || timing_ != nullptr);
  return value;
}
inline bool RDMFrame::has_timing() const {
  return _internal_has_timing();
}
inline void RDMFrame::clear_timing() {
  if (timing_ != nullptr) timing_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::ola::proto::RDMFrameTiming& RDMFrame::_internal_timing() const {
  const ::ola::proto::RDMFrameTiming* p = timing_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ola::proto::RDMFrameTiming*>(
      &::ola::proto::_RDMFrameTiming_default_instance_);
}
inline const ::ola::proto::RDMFrameTiming& RDMFrame::timing() const {
  // @@protoc_insertion_point(field_get:ola.proto.RDMFrame.timing)
  return _internal_timing();
}
inline void RDMFrame::unsafe_arena_set_allocated_timing(
    ::ola::proto::RDMFrameTiming* timing) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timing_);
  }
  timing_ = timing;
  if (timing) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ola.proto.RDMFrame.timing)
}
inline ::ola::proto::RDMFrameTiming* RDMFrame::release_timing() {
  auto temp = unsafe_arena_release_timing();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ola::proto::RDMFrameTiming* RDMFrame::unsafe_arena_release_timing() {
  // @@protoc_insertion_point(field_release:ola.proto.RDMFrame.timing)
  _has_bits_[0] &= ~0x00000002u;
  ::ola::proto::RDMFrameTiming* temp = timing_;
  timing_ = nullptr;
  return temp;
}
inline ::ola::proto::RDMFrameTiming* RDMFrame::_internal_mutable_timing() {
  _has_bits_[0] |= 0x00000002u;
  if (timing_ == nullptr) {
    auto* p = CreateMaybeMessage<::ola::proto::RDMFrameTiming>(GetArena());
    timing_ = p;
  }
  return timing_;
}
inline ::ola::proto::RDMFrameTiming* RDMFrame::mutable_timing() {
  // @@protoc_insertion_point(field_mutable:ola.proto.RDMFrame.timing)
  return _internal_mutable_timing();
}
inline void RDMFrame::set_allocated_timing(::ola::proto::RDMFrameTiming* timing) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete timing_;
  }
  if (timing) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(timing);
    if (message_arena != submessage_arena) {
      timing = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timing, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  timing_ = timing;
  // @@protoc_insertion_point(field_set_allocated:ola.proto.RDMFrame.timing)
}

// -------------------------------------------------------------------

// RDMResponse

// required .ola.proto.RDMResponseCode response_code = 1;
inline bool RDMResponse::_internal_has_response_code() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool RDMResponse::has_response_code() const {
  return _internal_has_response_code();
}
inline void RDMResponse::clear_response_code() {
  response_code_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::ola::proto::RDMResponseCode RDMResponse::_internal_response_code() const {
  return static_cast< ::ola::proto::RDMResponseCode >(response_code_);
}
inline ::ola::proto::RDMResponseCode RDMResponse::response_code() const {
  // @@protoc_insertion_point(field_get:ola.proto.RDMResponse.response_code)
  return _internal_response_code();
}
inline void RDMResponse::_internal_set_response_code(::ola::proto::RDMResponseCode value) {
  assert(::ola::proto::RDMResponseCode_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  response_code_ = value;
}
inline void RDMResponse::set_response_code(::ola::proto::RDMResponseCode value) {
  _internal_set_response_code(value);
  // @@protoc_insertion_point(field_set:ola.proto.RDMResponse.response_code)
}

// optional .ola.proto.UID source_uid = 9;
inline bool RDMResponse::_internal_has_source_uid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || source_uid_ != nullptr);
  return value;
}
inline bool RDMResponse::has_source_uid() const {
  return _internal_has_source_uid();
}
inline void RDMResponse::clear_source_uid() {
  if (source_uid_ != nullptr) source_uid_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::ola::proto::UID& RDMResponse::_internal_source_uid() const {
  const ::ola::proto::UID* p = source_uid_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ola::proto::UID*>(
      &::ola::proto::_UID_default_instance_);
}
inline const ::ola::proto::UID& RDMResponse::source_uid() const {
  // @@protoc_insertion_point(field_get:ola.proto.RDMResponse.source_uid)
  return _internal_source_uid();
}
inline void RDMResponse::unsafe_arena_set_allocated_source_uid(
    ::ola::proto::UID* source_uid) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(source_uid_);
  }
  source_uid_ = source_uid;
  if (source_uid) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ola.proto.RDMResponse.source_uid)
}
inline ::ola::proto::UID* RDMResponse::release_source_uid() {
  auto temp = unsafe_arena_release_source_uid();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ola::proto::UID* RDMResponse::unsafe_arena_release_source_uid() {
  // @@protoc_insertion_point(field_release:ola.proto.RDMResponse.source_uid)
  _has_bits_[0] &= ~0x00000002u;
  ::ola::proto::UID* temp = source_uid_;
  source_uid_ = nullptr;
  return temp;
}
inline ::ola::proto::UID* RDMResponse::_internal_mutable_source_uid() {
  _has_bits_[0] |= 0x00000002u;
  if (source_uid_ == nullptr) {
    auto* p = CreateMaybeMessage<::ola::proto::UID>(GetArena());
    source_uid_ = p;
  }
  return source_uid_;
}
inline ::ola::proto::UID* RDMResponse::mutable_source_uid() {
  // @@protoc_insertion_point(field_mutable:ola.proto.RDMResponse.source_uid)
  return _internal_mutable_source_uid();
}
inline void RDMResponse::set_allocated_source_uid(::ola::proto::UID* source_uid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete source_uid_;
  }
  if (source_uid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(source_uid);
    if (message_arena != submessage_arena) {
      source_uid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, source_uid, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  source_uid_ = source_uid;
  // @@protoc_insertion_point(field_set_allocated:ola.proto.RDMResponse.source_uid)
}

// optional .ola.proto.UID dest_uid = 10;
inline bool RDMResponse::_internal_has_dest_uid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || dest_uid_ != nullptr);
  return value;
}
inline bool RDMResponse::has_dest_uid() const {
  return _internal_has_dest_uid();
}
inline void RDMResponse::clear_dest_uid() {
  if (dest_uid_ != nullptr) dest_uid_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::ola::proto::UID& RDMResponse::_internal_dest_uid() const {
  const ::ola::proto::UID* p = dest_uid_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ola::proto::UID*>(
      &::ola::proto::_UID_default_instance_);
}
inline const ::ola::proto::UID& RDMResponse::dest_uid() const {
  // @@protoc_insertion_point(field_get:ola.proto.RDMResponse.dest_uid)
  return _internal_dest_uid();
}
inline void RDMResponse::unsafe_arena_set_allocated_dest_uid(
    ::ola::proto::UID* dest_uid) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dest_uid_);
  }
  dest_uid_ = dest_uid;
  if (dest_uid) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ola.proto.RDMResponse.dest_uid)
}
inline ::ola::proto::UID* RDMResponse::release_dest_uid() {
  auto temp = unsafe_arena_release_dest_uid();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ola::proto::UID* RDMResponse::unsafe_arena_release_dest_uid() {
  // @@protoc_insertion_point(field_release:ola.proto.RDMResponse.dest_uid)
  _has_bits_[0] &= ~0x00000004u;
  ::ola::proto::UID* temp = dest_uid_;
  dest_uid_ = nullptr;
  return temp;
}
inline ::ola::proto::UID* RDMResponse::_internal_mutable_dest_uid() {
  _has_bits_[0] |= 0x00000004u;
  if (dest_uid_ == nullptr) {
    auto* p = CreateMaybeMessage<::ola::proto::UID>(GetArena());
    dest_uid_ = p;
  }
  return dest_uid_;
}
inline ::ola::proto::UID* RDMResponse::mutable_dest_uid() {
  // @@protoc_insertion_point(field_mutable:ola.proto.RDMResponse.dest_uid)
  return _internal_mutable_dest_uid();
}
inline void RDMResponse::set_allocated_dest_uid(::ola::proto::UID* dest_uid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete dest_uid_;
  }
  if (dest_uid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(dest_uid);
    if (message_arena != submessage_arena) {
      dest_uid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dest_uid, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  dest_uid_ = dest_uid;
  // @@protoc_insertion_point(field_set_allocated:ola.proto.RDMResponse.dest_uid)
}

// optional int32 transaction_number = 11;
inline bool RDMResponse::_internal_has_transaction_number() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool RDMResponse::has_transaction_number() const {
  return _internal_has_transaction_number();
}
inline void RDMResponse::clear_transaction_number() {
  transaction_number_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RDMResponse::_internal_transaction_number() const {
  return transaction_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RDMResponse::transaction_number() const {
  // @@protoc_insertion_point(field_get:ola.proto.RDMResponse.transaction_number)
  return _internal_transaction_number();
}
inline void RDMResponse::_internal_set_transaction_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000200u;
  transaction_number_ = value;
}
inline void RDMResponse::set_transaction_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_transaction_number(value);
  // @@protoc_insertion_point(field_set:ola.proto.RDMResponse.transaction_number)
}

// optional .ola.proto.RDMResponseType response_type = 2;
inline bool RDMResponse::_internal_has_response_type() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool RDMResponse::has_response_type() const {
  return _internal_has_response_type();
}
inline void RDMResponse::clear_response_type() {
  response_type_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::ola::proto::RDMResponseType RDMResponse::_internal_response_type() const {
  return static_cast< ::ola::proto::RDMResponseType >(response_type_);
}
inline ::ola::proto::RDMResponseType RDMResponse::response_type() const {
  // @@protoc_insertion_point(field_get:ola.proto.RDMResponse.response_type)
  return _internal_response_type();
}
inline void RDMResponse::_internal_set_response_type(::ola::proto::RDMResponseType value) {
  assert(::ola::proto::RDMResponseType_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  response_type_ = value;
}
inline void RDMResponse::set_response_type(::ola::proto::RDMResponseType value) {
  _internal_set_response_type(value);
  // @@protoc_insertion_point(field_set:ola.proto.RDMResponse.response_type)
}

// optional uint32 message_count = 3 [default = 0];
inline bool RDMResponse::_internal_has_message_count() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool RDMResponse::has_message_count() const {
  return _internal_has_message_count();
}
inline void RDMResponse::clear_message_count() {
  message_count_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RDMResponse::_internal_message_count() const {
  return message_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RDMResponse::message_count() const {
  // @@protoc_insertion_point(field_get:ola.proto.RDMResponse.message_count)
  return _internal_message_count();
}
inline void RDMResponse::_internal_set_message_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  message_count_ = value;
}
inline void RDMResponse::set_message_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_message_count(value);
  // @@protoc_insertion_point(field_set:ola.proto.RDMResponse.message_count)
}

// optional uint32 sub_device = 7;
inline bool RDMResponse::_internal_has_sub_device() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool RDMResponse::has_sub_device() const {
  return _internal_has_sub_device();
}
inline void RDMResponse::clear_sub_device() {
  sub_device_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RDMResponse::_internal_sub_device() const {
  return sub_device_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RDMResponse::sub_device() const {
  // @@protoc_insertion_point(field_get:ola.proto.RDMResponse.sub_device)
  return _internal_sub_device();
}
inline void RDMResponse::_internal_set_sub_device(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  sub_device_ = value;
}
inline void RDMResponse::set_sub_device(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sub_device(value);
  // @@protoc_insertion_point(field_set:ola.proto.RDMResponse.sub_device)
}

// optional .ola.proto.RDMCommandClass command_class = 6;
inline bool RDMResponse::_internal_has_command_class() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool RDMResponse::has_command_class() const {
  return _internal_has_command_class();
}
inline void RDMResponse::clear_command_class() {
  command_class_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::ola::proto::RDMCommandClass RDMResponse::_internal_command_class() const {
  return static_cast< ::ola::proto::RDMCommandClass >(command_class_);
}
inline ::ola::proto::RDMCommandClass RDMResponse::command_class() const {
  // @@protoc_insertion_point(field_get:ola.proto.RDMResponse.command_class)
  return _internal_command_class();
}
inline void RDMResponse::_internal_set_command_class(::ola::proto::RDMCommandClass value) {
  assert(::ola::proto::RDMCommandClass_IsValid(value));
  _has_bits_[0] |= 0x00000080u;
  command_class_ = value;
}
inline void RDMResponse::set_command_class(::ola::proto::RDMCommandClass value) {
  _internal_set_command_class(value);
  // @@protoc_insertion_point(field_set:ola.proto.RDMResponse.command_class)
}

// optional uint32 param_id = 5;
inline bool RDMResponse::_internal_has_param_id() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool RDMResponse::has_param_id() const {
  return _internal_has_param_id();
}
inline void RDMResponse::clear_param_id() {
  param_id_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RDMResponse::_internal_param_id() const {
  return param_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RDMResponse::param_id() const {
  // @@protoc_insertion_point(field_get:ola.proto.RDMResponse.param_id)
  return _internal_param_id();
}
inline void RDMResponse::_internal_set_param_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  param_id_ = value;
}
inline void RDMResponse::set_param_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_param_id(value);
  // @@protoc_insertion_point(field_set:ola.proto.RDMResponse.param_id)
}

// optional bytes data = 4 [default = ""];
inline bool RDMResponse::_internal_has_data() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RDMResponse::has_data() const {
  return _internal_has_data();
}
inline void RDMResponse::clear_data() {
  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RDMResponse::data() const {
  // @@protoc_insertion_point(field_get:ola.proto.RDMResponse.data)
  return _internal_data();
}
inline void RDMResponse::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:ola.proto.RDMResponse.data)
}
inline std::string* RDMResponse::mutable_data() {
  // @@protoc_insertion_point(field_mutable:ola.proto.RDMResponse.data)
  return _internal_mutable_data();
}
inline const std::string& RDMResponse::_internal_data() const {
  return data_.Get();
}
inline void RDMResponse::_internal_set_data(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RDMResponse::set_data(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  data_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ola.proto.RDMResponse.data)
}
inline void RDMResponse::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ola.proto.RDMResponse.data)
}
inline void RDMResponse::set_data(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ola.proto.RDMResponse.data)
}
inline std::string* RDMResponse::_internal_mutable_data() {
  _has_bits_[0] |= 0x00000001u;
  return data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RDMResponse::release_data() {
  // @@protoc_insertion_point(field_release:ola.proto.RDMResponse.data)
  if (!_internal_has_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return data_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RDMResponse::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ola.proto.RDMResponse.data)
}
inline std::string* RDMResponse::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ola.proto.RDMResponse.data)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return data_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RDMResponse::unsafe_arena_set_allocated_data(
    std::string* data) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (data != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  data_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      data, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ola.proto.RDMResponse.data)
}

// repeated bytes raw_response = 8;
inline int RDMResponse::_internal_raw_response_size() const {
  return raw_response_.size();
}
inline int RDMResponse::raw_response_size() const {
  return _internal_raw_response_size();
}
inline void RDMResponse::clear_raw_response() {
  raw_response_.Clear();
}
inline std::string* RDMResponse::add_raw_response() {
  // @@protoc_insertion_point(field_add_mutable:ola.proto.RDMResponse.raw_response)
  return _internal_add_raw_response();
}
inline const std::string& RDMResponse::_internal_raw_response(int index) const {
  return raw_response_.Get(index);
}
inline const std::string& RDMResponse::raw_response(int index) const {
  // @@protoc_insertion_point(field_get:ola.proto.RDMResponse.raw_response)
  return _internal_raw_response(index);
}
inline std::string* RDMResponse::mutable_raw_response(int index) {
  // @@protoc_insertion_point(field_mutable:ola.proto.RDMResponse.raw_response)
  return raw_response_.Mutable(index);
}
inline void RDMResponse::set_raw_response(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:ola.proto.RDMResponse.raw_response)
  raw_response_.Mutable(index)->assign(value);
}
inline void RDMResponse::set_raw_response(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:ola.proto.RDMResponse.raw_response)
  raw_response_.Mutable(index)->assign(std::move(value));
}
inline void RDMResponse::set_raw_response(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  raw_response_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ola.proto.RDMResponse.raw_response)
}
inline void RDMResponse::set_raw_response(int index, const void* value, size_t size) {
  raw_response_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ola.proto.RDMResponse.raw_response)
}
inline std::string* RDMResponse::_internal_add_raw_response() {
  return raw_response_.Add();
}
inline void RDMResponse::add_raw_response(const std::string& value) {
  raw_response_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ola.proto.RDMResponse.raw_response)
}
inline void RDMResponse::add_raw_response(std::string&& value) {
  raw_response_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ola.proto.RDMResponse.raw_response)
}
inline void RDMResponse::add_raw_response(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  raw_response_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ola.proto.RDMResponse.raw_response)
}
inline void RDMResponse::add_raw_response(const void* value, size_t size) {
  raw_response_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ola.proto.RDMResponse.raw_response)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
RDMResponse::raw_response() const {
  // @@protoc_insertion_point(field_list:ola.proto.RDMResponse.raw_response)
  return raw_response_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
RDMResponse::mutable_raw_response() {
  // @@protoc_insertion_point(field_mutable_list:ola.proto.RDMResponse.raw_response)
  return &raw_response_;
}

// repeated .ola.proto.RDMFrame raw_frame = 12;
inline int RDMResponse::_internal_raw_frame_size() const {
  return raw_frame_.size();
}
inline int RDMResponse::raw_frame_size() const {
  return _internal_raw_frame_size();
}
inline void RDMResponse::clear_raw_frame() {
  raw_frame_.Clear();
}
inline ::ola::proto::RDMFrame* RDMResponse::mutable_raw_frame(int index) {
  // @@protoc_insertion_point(field_mutable:ola.proto.RDMResponse.raw_frame)
  return raw_frame_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ola::proto::RDMFrame >*
RDMResponse::mutable_raw_frame() {
  // @@protoc_insertion_point(field_mutable_list:ola.proto.RDMResponse.raw_frame)
  return &raw_frame_;
}
inline const ::ola::proto::RDMFrame& RDMResponse::_internal_raw_frame(int index) const {
  return raw_frame_.Get(index);
}
inline const ::ola::proto::RDMFrame& RDMResponse::raw_frame(int index) const {
  // @@protoc_insertion_point(field_get:ola.proto.RDMResponse.raw_frame)
  return _internal_raw_frame(index);
}
inline ::ola::proto::RDMFrame* RDMResponse::_internal_add_raw_frame() {
  return raw_frame_.Add();
}
inline ::ola::proto::RDMFrame* RDMResponse::add_raw_frame() {
  // @@protoc_insertion_point(field_add:ola.proto.RDMResponse.raw_frame)
  return _internal_add_raw_frame();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ola::proto::RDMFrame >&
RDMResponse::raw_frame() const {
  // @@protoc_insertion_point(field_list:ola.proto.RDMResponse.raw_frame)
  return raw_frame_;
}

// -------------------------------------------------------------------

// TimeCode

// required uint32 hours = 1;
inline bool TimeCode::_internal_has_hours() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TimeCode::has_hours() const {
  return _internal_has_hours();
}
inline void TimeCode::clear_hours() {
  hours_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TimeCode::_internal_hours() const {
  return hours_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TimeCode::hours() const {
  // @@protoc_insertion_point(field_get:ola.proto.TimeCode.hours)
  return _internal_hours();
}
inline void TimeCode::_internal_set_hours(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  hours_ = value;
}
inline void TimeCode::set_hours(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_hours(value);
  // @@protoc_insertion_point(field_set:ola.proto.TimeCode.hours)
}

// required uint32 minutes = 2;
inline bool TimeCode::_internal_has_minutes() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TimeCode::has_minutes() const {
  return _internal_has_minutes();
}
inline void TimeCode::clear_minutes() {
  minutes_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TimeCode::_internal_minutes() const {
  return minutes_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TimeCode::minutes() const {
  // @@protoc_insertion_point(field_get:ola.proto.TimeCode.minutes)
  return _internal_minutes();
}
inline void TimeCode::_internal_set_minutes(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  minutes_ = value;
}
inline void TimeCode::set_minutes(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_minutes(value);
  // @@protoc_insertion_point(field_set:ola.proto.TimeCode.minutes)
}

// required uint32 seconds = 3;
inline bool TimeCode::_internal_has_seconds() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TimeCode::has_seconds() const {
  return _internal_has_seconds();
}
inline void TimeCode::clear_seconds() {
  seconds_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TimeCode::_internal_seconds() const {
  return seconds_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TimeCode::seconds() const {
  // @@protoc_insertion_point(field_get:ola.proto.TimeCode.seconds)
  return _internal_seconds();
}
inline void TimeCode::_internal_set_seconds(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  seconds_ = value;
}
inline void TimeCode::set_seconds(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_seconds(value);
  // @@protoc_insertion_point(field_set:ola.proto.TimeCode.seconds)
}

// required uint32 frames = 4;
inline bool TimeCode::_internal_has_frames() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TimeCode::has_frames() const {
  return _internal_has_frames();
}
inline void TimeCode::clear_frames() {
  frames_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TimeCode::_internal_frames() const {
  return frames_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TimeCode::frames() const {
  // @@protoc_insertion_point(field_get:ola.proto.TimeCode.frames)
  return _internal_frames();
}
inline void TimeCode::_internal_set_frames(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  frames_ = value;
}
inline void TimeCode::set_frames(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_frames(value);
  // @@protoc_insertion_point(field_set:ola.proto.TimeCode.frames)
}

// required .ola.proto.TimeCodeType type = 5;
inline bool TimeCode::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool TimeCode::has_type() const {
  return _internal_has_type();
}
inline void TimeCode::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::ola::proto::TimeCodeType TimeCode::_internal_type() const {
  return static_cast< ::ola::proto::TimeCodeType >(type_);
}
inline ::ola::proto::TimeCodeType TimeCode::type() const {
  // @@protoc_insertion_point(field_get:ola.proto.TimeCode.type)
  return _internal_type();
}
inline void TimeCode::_internal_set_type(::ola::proto::TimeCodeType value) {
  assert(::ola::proto::TimeCodeType_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  type_ = value;
}
inline void TimeCode::set_type(::ola::proto::TimeCodeType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:ola.proto.TimeCode.type)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace ola

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::ola::proto::RegisterAction> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ola::proto::RegisterAction>() {
  return ::ola::proto::RegisterAction_descriptor();
}
template <> struct is_proto_enum< ::ola::proto::PatchAction> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ola::proto::PatchAction>() {
  return ::ola::proto::PatchAction_descriptor();
}
template <> struct is_proto_enum< ::ola::proto::MergeMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ola::proto::MergeMode>() {
  return ::ola::proto::MergeMode_descriptor();
}
template <> struct is_proto_enum< ::ola::proto::PluginIds> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ola::proto::PluginIds>() {
  return ::ola::proto::PluginIds_descriptor();
}
template <> struct is_proto_enum< ::ola::proto::RDMResponseCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ola::proto::RDMResponseCode>() {
  return ::ola::proto::RDMResponseCode_descriptor();
}
template <> struct is_proto_enum< ::ola::proto::RDMResponseType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ola::proto::RDMResponseType>() {
  return ::ola::proto::RDMResponseType_descriptor();
}
template <> struct is_proto_enum< ::ola::proto::RDMCommandClass> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ola::proto::RDMCommandClass>() {
  return ::ola::proto::RDMCommandClass_descriptor();
}
template <> struct is_proto_enum< ::ola::proto::TimeCodeType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ola::proto::TimeCodeType>() {
  return ::ola::proto::TimeCodeType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Ola_2eproto
