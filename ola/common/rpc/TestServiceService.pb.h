// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TestService.proto

#ifndef PROTOBUF_TestServiceService__INCLUDED  // NOLINT(build/header_guard)
#define PROTOBUF_TestServiceService__INCLUDED

#include <google/protobuf/service.h>

#include "TestService.pb.h"
#include "common/rpc/RpcService.h"

namespace ola {
namespace rpc {
class RpcController;
class RpcChannel;
}  // rpc
}  // ola


namespace ola {
namespace rpc {
class TestService_Stub;

class TestService : public ola::rpc::RpcService {
 protected:
  // This class should be treated as an abstract interface.
  inline TestService() {}

 public:
  virtual ~TestService();

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual void Echo(ola::rpc::RpcController* controller,
                       const ::ola::rpc::EchoRequest* request,
                       ::ola::rpc::EchoReply* response,
                       ola::rpc::RpcService::CompletionCallback* done);
  virtual void FailedEcho(ola::rpc::RpcController* controller,
                       const ::ola::rpc::EchoRequest* request,
                       ::ola::rpc::EchoReply* response,
                       ola::rpc::RpcService::CompletionCallback* done);
  virtual void Stream(ola::rpc::RpcController* controller,
                       const ::ola::rpc::EchoRequest* request,
                       ::ola::rpc::STREAMING_NO_RESPONSE* response,
                       ola::rpc::RpcService::CompletionCallback* done);

  // implements Service ----------------------------------------------

const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ola::rpc::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ola::rpc::RpcService::CompletionCallback* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(TestService);
};

class TestService_Stub : public TestService {
 public:
  explicit TestService_Stub(ola::rpc::RpcChannel* channel);
  TestService_Stub(ola::rpc::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~TestService_Stub();

  inline ola::rpc::RpcChannel* channel() { return channel_; }

// implements $classname$ ------------------------------------------

void Echo(ola::rpc::RpcController* controller,
                       const ::ola::rpc::EchoRequest* request,
                       ::ola::rpc::EchoReply* response,
                       ola::rpc::RpcService::CompletionCallback* done);
  void FailedEcho(ola::rpc::RpcController* controller,
                       const ::ola::rpc::EchoRequest* request,
                       ::ola::rpc::EchoReply* response,
                       ola::rpc::RpcService::CompletionCallback* done);
  void Stream(ola::rpc::RpcController* controller,
                       const ::ola::rpc::EchoRequest* request,
                       ::ola::rpc::STREAMING_NO_RESPONSE* response,
                       ola::rpc::RpcService::CompletionCallback* done);

 private:
  ola::rpc::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(TestService_Stub);
};


}  // namespace rpc
}  // namespace ola
#endif  // PROTOBUF_TestServiceService__INCLUDED
