// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Ola.proto

#ifndef PROTOBUF_OlaService__INCLUDED  // NOLINT(build/header_guard)
#define PROTOBUF_OlaService__INCLUDED

#include <google/protobuf/service.h>

#include "Ola.pb.h"
#include "common/rpc/RpcService.h"

namespace ola {
namespace rpc {
class RpcController;
class RpcChannel;
}  // rpc
}  // ola


namespace ola {
namespace proto {
class OlaServerService_Stub;

class OlaServerService : public ola::rpc::RpcService {
 protected:
  // This class should be treated as an abstract interface.
  inline OlaServerService() {}

 public:
  virtual ~OlaServerService();

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual void GetPlugins(ola::rpc::RpcController* controller,
                       const ::ola::proto::PluginListRequest* request,
                       ::ola::proto::PluginListReply* response,
                       ola::rpc::RpcService::CompletionCallback* done);
  virtual void ReloadPlugins(ola::rpc::RpcController* controller,
                       const ::ola::proto::PluginReloadRequest* request,
                       ::ola::proto::Ack* response,
                       ola::rpc::RpcService::CompletionCallback* done);
  virtual void GetPluginDescription(ola::rpc::RpcController* controller,
                       const ::ola::proto::PluginDescriptionRequest* request,
                       ::ola::proto::PluginDescriptionReply* response,
                       ola::rpc::RpcService::CompletionCallback* done);
  virtual void GetPluginState(ola::rpc::RpcController* controller,
                       const ::ola::proto::PluginStateRequest* request,
                       ::ola::proto::PluginStateReply* response,
                       ola::rpc::RpcService::CompletionCallback* done);
  virtual void GetDeviceInfo(ola::rpc::RpcController* controller,
                       const ::ola::proto::DeviceInfoRequest* request,
                       ::ola::proto::DeviceInfoReply* response,
                       ola::rpc::RpcService::CompletionCallback* done);
  virtual void GetCandidatePorts(ola::rpc::RpcController* controller,
                       const ::ola::proto::OptionalUniverseRequest* request,
                       ::ola::proto::DeviceInfoReply* response,
                       ola::rpc::RpcService::CompletionCallback* done);
  virtual void ConfigureDevice(ola::rpc::RpcController* controller,
                       const ::ola::proto::DeviceConfigRequest* request,
                       ::ola::proto::DeviceConfigReply* response,
                       ola::rpc::RpcService::CompletionCallback* done);
  virtual void SetPluginState(ola::rpc::RpcController* controller,
                       const ::ola::proto::PluginStateChangeRequest* request,
                       ::ola::proto::Ack* response,
                       ola::rpc::RpcService::CompletionCallback* done);
  virtual void SetPortPriority(ola::rpc::RpcController* controller,
                       const ::ola::proto::PortPriorityRequest* request,
                       ::ola::proto::Ack* response,
                       ola::rpc::RpcService::CompletionCallback* done);
  virtual void GetUniverseInfo(ola::rpc::RpcController* controller,
                       const ::ola::proto::OptionalUniverseRequest* request,
                       ::ola::proto::UniverseInfoReply* response,
                       ola::rpc::RpcService::CompletionCallback* done);
  virtual void SetUniverseName(ola::rpc::RpcController* controller,
                       const ::ola::proto::UniverseNameRequest* request,
                       ::ola::proto::Ack* response,
                       ola::rpc::RpcService::CompletionCallback* done);
  virtual void SetMergeMode(ola::rpc::RpcController* controller,
                       const ::ola::proto::MergeModeRequest* request,
                       ::ola::proto::Ack* response,
                       ola::rpc::RpcService::CompletionCallback* done);
  virtual void PatchPort(ola::rpc::RpcController* controller,
                       const ::ola::proto::PatchPortRequest* request,
                       ::ola::proto::Ack* response,
                       ola::rpc::RpcService::CompletionCallback* done);
  virtual void RegisterForDmx(ola::rpc::RpcController* controller,
                       const ::ola::proto::RegisterDmxRequest* request,
                       ::ola::proto::Ack* response,
                       ola::rpc::RpcService::CompletionCallback* done);
  virtual void UpdateDmxData(ola::rpc::RpcController* controller,
                       const ::ola::proto::DmxData* request,
                       ::ola::proto::Ack* response,
                       ola::rpc::RpcService::CompletionCallback* done);
  virtual void GetDmx(ola::rpc::RpcController* controller,
                       const ::ola::proto::UniverseRequest* request,
                       ::ola::proto::DmxData* response,
                       ola::rpc::RpcService::CompletionCallback* done);
  virtual void GetUIDs(ola::rpc::RpcController* controller,
                       const ::ola::proto::UniverseRequest* request,
                       ::ola::proto::UIDListReply* response,
                       ola::rpc::RpcService::CompletionCallback* done);
  virtual void ForceDiscovery(ola::rpc::RpcController* controller,
                       const ::ola::proto::DiscoveryRequest* request,
                       ::ola::proto::UIDListReply* response,
                       ola::rpc::RpcService::CompletionCallback* done);
  virtual void SetSourceUID(ola::rpc::RpcController* controller,
                       const ::ola::proto::UID* request,
                       ::ola::proto::Ack* response,
                       ola::rpc::RpcService::CompletionCallback* done);
  virtual void RDMCommand(ola::rpc::RpcController* controller,
                       const ::ola::proto::RDMRequest* request,
                       ::ola::proto::RDMResponse* response,
                       ola::rpc::RpcService::CompletionCallback* done);
  virtual void RDMDiscoveryCommand(ola::rpc::RpcController* controller,
                       const ::ola::proto::RDMDiscoveryRequest* request,
                       ::ola::proto::RDMResponse* response,
                       ola::rpc::RpcService::CompletionCallback* done);
  virtual void StreamDmxData(ola::rpc::RpcController* controller,
                       const ::ola::proto::DmxData* request,
                       ::ola::proto::STREAMING_NO_RESPONSE* response,
                       ola::rpc::RpcService::CompletionCallback* done);
  virtual void SendTimeCode(ola::rpc::RpcController* controller,
                       const ::ola::proto::TimeCode* request,
                       ::ola::proto::Ack* response,
                       ola::rpc::RpcService::CompletionCallback* done);

  // implements Service ----------------------------------------------

const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ola::rpc::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ola::rpc::RpcService::CompletionCallback* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(OlaServerService);
};

class OlaServerService_Stub : public OlaServerService {
 public:
  explicit OlaServerService_Stub(ola::rpc::RpcChannel* channel);
  OlaServerService_Stub(ola::rpc::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~OlaServerService_Stub();

  inline ola::rpc::RpcChannel* channel() { return channel_; }

// implements $classname$ ------------------------------------------

void GetPlugins(ola::rpc::RpcController* controller,
                       const ::ola::proto::PluginListRequest* request,
                       ::ola::proto::PluginListReply* response,
                       ola::rpc::RpcService::CompletionCallback* done);
  void ReloadPlugins(ola::rpc::RpcController* controller,
                       const ::ola::proto::PluginReloadRequest* request,
                       ::ola::proto::Ack* response,
                       ola::rpc::RpcService::CompletionCallback* done);
  void GetPluginDescription(ola::rpc::RpcController* controller,
                       const ::ola::proto::PluginDescriptionRequest* request,
                       ::ola::proto::PluginDescriptionReply* response,
                       ola::rpc::RpcService::CompletionCallback* done);
  void GetPluginState(ola::rpc::RpcController* controller,
                       const ::ola::proto::PluginStateRequest* request,
                       ::ola::proto::PluginStateReply* response,
                       ola::rpc::RpcService::CompletionCallback* done);
  void GetDeviceInfo(ola::rpc::RpcController* controller,
                       const ::ola::proto::DeviceInfoRequest* request,
                       ::ola::proto::DeviceInfoReply* response,
                       ola::rpc::RpcService::CompletionCallback* done);
  void GetCandidatePorts(ola::rpc::RpcController* controller,
                       const ::ola::proto::OptionalUniverseRequest* request,
                       ::ola::proto::DeviceInfoReply* response,
                       ola::rpc::RpcService::CompletionCallback* done);
  void ConfigureDevice(ola::rpc::RpcController* controller,
                       const ::ola::proto::DeviceConfigRequest* request,
                       ::ola::proto::DeviceConfigReply* response,
                       ola::rpc::RpcService::CompletionCallback* done);
  void SetPluginState(ola::rpc::RpcController* controller,
                       const ::ola::proto::PluginStateChangeRequest* request,
                       ::ola::proto::Ack* response,
                       ola::rpc::RpcService::CompletionCallback* done);
  void SetPortPriority(ola::rpc::RpcController* controller,
                       const ::ola::proto::PortPriorityRequest* request,
                       ::ola::proto::Ack* response,
                       ola::rpc::RpcService::CompletionCallback* done);
  void GetUniverseInfo(ola::rpc::RpcController* controller,
                       const ::ola::proto::OptionalUniverseRequest* request,
                       ::ola::proto::UniverseInfoReply* response,
                       ola::rpc::RpcService::CompletionCallback* done);
  void SetUniverseName(ola::rpc::RpcController* controller,
                       const ::ola::proto::UniverseNameRequest* request,
                       ::ola::proto::Ack* response,
                       ola::rpc::RpcService::CompletionCallback* done);
  void SetMergeMode(ola::rpc::RpcController* controller,
                       const ::ola::proto::MergeModeRequest* request,
                       ::ola::proto::Ack* response,
                       ola::rpc::RpcService::CompletionCallback* done);
  void PatchPort(ola::rpc::RpcController* controller,
                       const ::ola::proto::PatchPortRequest* request,
                       ::ola::proto::Ack* response,
                       ola::rpc::RpcService::CompletionCallback* done);
  void RegisterForDmx(ola::rpc::RpcController* controller,
                       const ::ola::proto::RegisterDmxRequest* request,
                       ::ola::proto::Ack* response,
                       ola::rpc::RpcService::CompletionCallback* done);
  void UpdateDmxData(ola::rpc::RpcController* controller,
                       const ::ola::proto::DmxData* request,
                       ::ola::proto::Ack* response,
                       ola::rpc::RpcService::CompletionCallback* done);
  void GetDmx(ola::rpc::RpcController* controller,
                       const ::ola::proto::UniverseRequest* request,
                       ::ola::proto::DmxData* response,
                       ola::rpc::RpcService::CompletionCallback* done);
  void GetUIDs(ola::rpc::RpcController* controller,
                       const ::ola::proto::UniverseRequest* request,
                       ::ola::proto::UIDListReply* response,
                       ola::rpc::RpcService::CompletionCallback* done);
  void ForceDiscovery(ola::rpc::RpcController* controller,
                       const ::ola::proto::DiscoveryRequest* request,
                       ::ola::proto::UIDListReply* response,
                       ola::rpc::RpcService::CompletionCallback* done);
  void SetSourceUID(ola::rpc::RpcController* controller,
                       const ::ola::proto::UID* request,
                       ::ola::proto::Ack* response,
                       ola::rpc::RpcService::CompletionCallback* done);
  void RDMCommand(ola::rpc::RpcController* controller,
                       const ::ola::proto::RDMRequest* request,
                       ::ola::proto::RDMResponse* response,
                       ola::rpc::RpcService::CompletionCallback* done);
  void RDMDiscoveryCommand(ola::rpc::RpcController* controller,
                       const ::ola::proto::RDMDiscoveryRequest* request,
                       ::ola::proto::RDMResponse* response,
                       ola::rpc::RpcService::CompletionCallback* done);
  void StreamDmxData(ola::rpc::RpcController* controller,
                       const ::ola::proto::DmxData* request,
                       ::ola::proto::STREAMING_NO_RESPONSE* response,
                       ola::rpc::RpcService::CompletionCallback* done);
  void SendTimeCode(ola::rpc::RpcController* controller,
                       const ::ola::proto::TimeCode* request,
                       ::ola::proto::Ack* response,
                       ola::rpc::RpcService::CompletionCallback* done);

 private:
  ola::rpc::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(OlaServerService_Stub);
};

class OlaClientService_Stub;

class OlaClientService : public ola::rpc::RpcService {
 protected:
  // This class should be treated as an abstract interface.
  inline OlaClientService() {}

 public:
  virtual ~OlaClientService();

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual void UpdateDmxData(ola::rpc::RpcController* controller,
                       const ::ola::proto::DmxData* request,
                       ::ola::proto::Ack* response,
                       ola::rpc::RpcService::CompletionCallback* done);

  // implements Service ----------------------------------------------

const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ola::rpc::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ola::rpc::RpcService::CompletionCallback* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(OlaClientService);
};

class OlaClientService_Stub : public OlaClientService {
 public:
  explicit OlaClientService_Stub(ola::rpc::RpcChannel* channel);
  OlaClientService_Stub(ola::rpc::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~OlaClientService_Stub();

  inline ola::rpc::RpcChannel* channel() { return channel_; }

// implements $classname$ ------------------------------------------

void UpdateDmxData(ola::rpc::RpcController* controller,
                       const ::ola::proto::DmxData* request,
                       ::ola::proto::Ack* response,
                       ola::rpc::RpcService::CompletionCallback* done);

 private:
  ola::rpc::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(OlaClientService_Stub);
};


}  // namespace proto
}  // namespace ola
#endif  // PROTOBUF_OlaService__INCLUDED
